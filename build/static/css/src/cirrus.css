/*
* Cirrus 0.6.3
* Stanley Lim, Copyright 2021
* https://spiderpig86.github.io/Cirrus
*/
/* BASE STYLING + RESET FOR CIRRUS */
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,700|Nunito+Sans:400,700');
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
:root {
  /* v1 Colors */
  --cirrus-fg: #374054;
  --cirrus-bg: #ffffff;
  --cirrus-primary: #f03d4d;
  --cirrus-primary-rgb: 240, 61, 77;
  --cirrus-primary-light: #ffdadd;
  --cirrus-accent-hover: #d62939;
  --cirrus-accent-border: #c21b2b;
  --cirrus-light: #f6f9fc;
  --cirrus-light-gray: #f8f9fa;
  --cirrus-gray: #d5d7dc;
  --cirrus-dark-gray: #909090;
  --cirrus-dark: #363636;
  --cirrus-link: #5e5cc7;
  --cirrus-link-dark: #4643e2;
  --cirrus-info: #2972fa;
  --cirrus-success: #0dd157;
  --cirrus-success-rgb: 13, 209, 87;
  --cirrus-warning: #fab633;
  --cirrus-danger: #fb4143;
  --cirrus-black: #000000;
  --cirrus-white: #ffffff;
  --cirrus-light-hover: #d0e0ef;
  --cirrus-dark-hover: #505050;
  --cirrus-info-hover: #1062f9;
  --cirrus-link-hover: #f8f7ff;
  --cirrus-success-hover: #0cb94d;
  --cirrus-warning-hover: #f9ad1a;
  --cirrus-danger-hover: #eb0507;
  --cirrus-select-bg: rgba(0, 161, 255, 0.2);
  --cirrus-code-bg: var(--cirrus-primary-light);
  --cirrus-code-fg: #dc4753;
  --cirrus-form-group-bg: var(--cirrus-light-gray);
  --cirrus-form-group-fg: var(--cirrus-dark-gray);
  --toast-primary-bg: rgba(49, 59, 80, 0.9);
  --animation-duration: 0.2s;
  --focus-opacity: 0.55;
  --space-size: 0.5rem;
  --font-size-xs: 0.75rem;
  --font-size-s: 0.875rem;
  --font-size-m: 1rem;
  --font-size-l: 1.25rem;
  --font-size-xl: 1.5rem;
  --cirrus-focus-size: 0 0 0.1rem 0.15rem;
  --cirrus-focus-color: rgba(240, 61, 77, 0.13);
}

* {
  margin: 0;
  padding: 0;
  /* Prevent setting borders from increasing the size of an elrement */
  box-sizing: border-box;
  text-rendering: optimizeLegibility;
  -webkit-tap-highlight-color: transparent;
}

html,
body {
  margin: 0;
  padding: 0;
  border: none;
  height: 100%;
}

/* Nunito Sans for the font */
body {
  letter-spacing: 0.01rem;
  line-height: 1.8;
  /* Globally adjust line height */
  font-size: 1rem;
  font-weight: 400;
  font-family: 'Nunito Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto',
    'Helvetica Neue', Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
  letter-spacing: 0.01rem;
  color: var(--cirrus-fg);
}

/* Remove bullets from unordered lists */
ul {
  list-style: none;
}

/* Setting up embedded content */
img,
embed,
object,
video {
  max-width: 100%;
  height: auto;
}

.hero.fullscreen video {
  height: 100%;
  object-fit: fill;
  position: absolute;
  width: 100%;
  z-index: -1;
}

iframe {
  outline: 0;
  border: 1px solid rgba(0, 0, 0, 0.1);
  border-radius: 3px;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

article,
aside,
figure,
footer,
header,
hgroup,
section {
  display: block;
}

input,
optgroup,
select,
textarea {
  margin: 0;
  font-family: inherit;
  font-size: inherit;
}

label {
  display: inline-block;
  margin: 0.25rem 0;
}

fieldset {
  padding: 1rem;
}
fieldset legend {
  font-weight: bold;
}

[hidden] {
  display: none !important;
}

/* Selection Color */
::selection {
  background-color: var(--cirrus-select-bg);
}

/* When focusing any element */
:focus {
  box-shadow: var(--cirrus-focus-size) var(--cirrus-focus-color);
  outline: none;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Global Mixins
*/
/*
    Mixin that returns a property map as a series of CSS class properties.

    E.g. $xs: (color: #fff, opacity: 0.5), $sm... =>

    <class>--xs {
        color: #fff;
        opacity: 0.5;
    }
*/
/*
    Bring to front on focus.
*/
/*
    Group selectors that share common styling.
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* BUTTONS */
/* Button styling */
/* Un-themed */
.btn,
button,
[type='submit'],
[type='reset'],
[type='button'] {
  line-height: 2rem;
  overflow: hidden;
  padding: 0.5rem 1rem;
  border: 1px solid transparent;
  border-radius: 0.25rem;
  cursor: pointer;
  text-align: center;
  transition: all var(--animation-duration);
  background-color: var(--btn-color);
  border-color: var(--btn-border-color);
  color: var(--btn-fg);
  font-size: 0.75rem;
  font-weight: inherit;
  letter-spacing: 0.03rem;
  text-transform: uppercase;
  font-family: Montserrat;
  min-width: 2rem;
  user-select: none;
  margin-bottom: 1rem;
  outline: none;
  --btn-color: #f8f9fa;
  --btn-fg: #495057;
  --btn-border-color: #e9ecef;
  /* Base States */
  /* Loading Button*/
  /* Make the loading circle, if present, white when button is active */
  /* Animated Button */
  /* Close Button */
  /* BUTTON STYLES */
  /* Regular */
  /* GLYPHS */
  /* Alternatives to pad-left and pad-right */
}
.btn:hover,
button:hover,
[type='submit']:hover,
[type='reset']:hover,
[type='button']:hover {
  transition: all var(--animation-duration);
  --btn-color: #f1f3f5;
  color: var(--btn-fg);
}
.btn:active,
button:active,
[type='submit']:active,
[type='reset']:active,
[type='button']:active {
  transition: var(--animation-duration) ease;
}
.btn:focus,
button:focus,
[type='submit']:focus,
[type='reset']:focus,
[type='button']:focus {
  outline: none;
}
.btn:disabled,
button:disabled,
[type='submit']:disabled,
[type='reset']:disabled,
[type='button']:disabled {
  cursor: not-allowed;
  opacity: 0.5;
}
.btn:disabled:active,
button:disabled:active,
[type='submit']:disabled:active,
[type='reset']:disabled:active,
[type='button']:disabled:active {
  pointer-events: none;
}
.btn.outline,
button.outline,
[type='submit'].outline,
[type='reset'].outline,
[type='button'].outline {
  --btn-color: transparent;
}
.btn.outline:hover,
button.outline:hover,
[type='submit'].outline:hover,
[type='reset'].outline:hover,
[type='button'].outline:hover {
  --btn-color: #e9ecef;
}
.btn.loading:active::after,
button.loading:active::after,
[type='submit'].loading:active::after,
[type='reset'].loading:active::after,
[type='button'].loading:active::after {
  border-radius: 50%;
  border-right-color: transparent;
  border-top-color: transparent;
  transition: var(--animation-duration) ease;
}
.btn.btn-animated,
button.btn-animated,
[type='submit'].btn-animated,
[type='reset'].btn-animated,
[type='button'].btn-animated {
  transition: calc(var(--animation-duration) / 2) ease;
}
.btn.btn-animated:active,
button.btn-animated:active,
[type='submit'].btn-animated:active,
[type='reset'].btn-animated:active,
[type='button'].btn-animated:active {
  transform: scale(0.95);
  transition: calc(var(--animation-duration) / 2) ease;
}
.btn.btn-close,
button.btn-close,
[type='submit'].btn-close,
[type='reset'].btn-close,
[type='button'].btn-close {
  background-color: rgba(10, 10, 10, 0.2);
  border: none;
  border-radius: 290486px;
  cursor: pointer;
  display: inline-block;
  flex-grow: 0;
  flex-shrink: 0;
  font-size: 0;
  height: 20px;
  outline: 0;
  position: relative;
  vertical-align: top;
  width: 20px;
  padding: 0;
  min-width: 20px;
  /* Render the x in the close button */
}
.btn.btn-close:hover,
button.btn-close:hover,
[type='submit'].btn-close:hover,
[type='reset'].btn-close:hover,
[type='button'].btn-close:hover {
  background-color: rgba(10, 10, 10, 0.3);
}
.btn.btn-close::before,
button.btn-close::before,
[type='submit'].btn-close::before,
[type='reset'].btn-close::before,
[type='button'].btn-close::before {
  background-color: var(--cirrus-bg);
  content: '';
  display: block;
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translateX(-50%) translateY(-50%) rotate(45deg);
  transform-origin: center center;
  height: 2px;
  width: 50%;
}
.btn.btn-close::after,
button.btn-close::after,
[type='submit'].btn-close::after,
[type='reset'].btn-close::after,
[type='button'].btn-close::after {
  background-color: var(--cirrus-bg);
  content: '';
  display: block;
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translateX(-50%) translateY(-50%) rotate(45deg);
  transform-origin: center center;
  height: 50%;
  width: 2px;
}
.btn.btn-transparent,
button.btn-transparent,
[type='submit'].btn-transparent,
[type='reset'].btn-transparent,
[type='button'].btn-transparent {
  --btn-color: transparent;
  --btn-fg: var(--cirrus-dark);
  --btn-border-color: transparent;
}
.btn.btn-transparent:focus,
button.btn-transparent:focus,
[type='submit'].btn-transparent:focus,
[type='reset'].btn-transparent:focus,
[type='button'].btn-transparent:focus {
  box-shadow: 0 0 0 0.2rem rgba(246, 249, 252, 0.5);
}
.btn.btn-transparent:hover,
button.btn-transparent:hover,
[type='submit'].btn-transparent:hover,
[type='reset'].btn-transparent:hover,
[type='button'].btn-transparent:hover {
  --btn-color: rgba(0, 0, 0, 0.1);
}
.btn.btn-transparent.outline,
button.btn-transparent.outline,
[type='submit'].btn-transparent.outline,
[type='reset'].btn-transparent.outline,
[type='button'].btn-transparent.outline {
  --btn-fg: var(--cirrus-dark);
}
.btn.btn-light,
button.btn-light,
[type='submit'].btn-light,
[type='reset'].btn-light,
[type='button'].btn-light {
  --btn-color: var(--cirrus-light);
  --btn-fg: var(--cirrus-dark);
  --btn-border-color: var(--cirrus-light);
}
.btn.btn-light:hover,
button.btn-light:hover,
[type='submit'].btn-light:hover,
[type='reset'].btn-light:hover,
[type='button'].btn-light:hover {
  --btn-color: var(--cirrus-light-hover);
}
.btn.btn-light:focus,
button.btn-light:focus,
[type='submit'].btn-light:focus,
[type='reset'].btn-light:focus,
[type='button'].btn-light:focus {
  box-shadow: 0 0 0 0.2rem rgba(246, 249, 252, 0.5);
}
.btn.btn-dark,
button.btn-dark,
[type='submit'].btn-dark,
[type='reset'].btn-dark,
[type='button'].btn-dark {
  --btn-color: var(--cirrus-dark);
  --btn-fg: var(--cirrus-light);
  --btn-border-color: var(--cirrus-dark);
}
.btn.btn-dark:focus,
button.btn-dark:focus,
[type='submit'].btn-dark:focus,
[type='reset'].btn-dark:focus,
[type='button'].btn-dark:focus {
  box-shadow: 0 0 0 0.2rem rgba(54, 54, 54, 0.5);
}
.btn.btn-dark:hover,
button.btn-dark:hover,
[type='submit'].btn-dark:hover,
[type='reset'].btn-dark:hover,
[type='button'].btn-dark:hover {
  --btn-color: var(--cirrus-dark-hover);
}
.btn.btn-dark.outline:hover,
button.btn-dark.outline:hover,
[type='submit'].btn-dark.outline:hover,
[type='reset'].btn-dark.outline:hover,
[type='button'].btn-dark.outline:hover {
  --btn-color: var(--cirrus-dark);
}
.btn.btn-black,
button.btn-black,
[type='submit'].btn-black,
[type='reset'].btn-black,
[type='button'].btn-black {
  --btn-color: #000;
  --btn-fg: var(--cirrus-light);
  --btn-border-color: #000;
}
.btn.btn-black:focus,
button.btn-black:focus,
[type='submit'].btn-black:focus,
[type='reset'].btn-black:focus,
[type='button'].btn-black:focus {
  box-shadow: 0 0 0 0.2rem rgba(54, 54, 54, 0.5);
}
.btn.btn-black:hover,
button.btn-black:hover,
[type='submit'].btn-black:hover,
[type='reset'].btn-black:hover,
[type='button'].btn-black:hover {
  --btn-color: #000;
}
.btn.btn-primary,
button.btn-primary,
[type='submit'].btn-primary,
[type='reset'].btn-primary,
[type='button'].btn-primary {
  --btn-color: var(--cirrus-primary);
  --btn-fg: var(--cirrus-light);
  --btn-border-color: var(--cirrus-accent-border);
}
.btn.btn-primary:focus,
button.btn-primary:focus,
[type='submit'].btn-primary:focus,
[type='reset'].btn-primary:focus,
[type='button'].btn-primary:focus {
  box-shadow: 0 0 0 0.2rem rgba(240, 61, 77, 0.5);
}
.btn.btn-primary:hover,
button.btn-primary:hover,
[type='submit'].btn-primary:hover,
[type='reset'].btn-primary:hover,
[type='button'].btn-primary:hover {
  --btn-color: var(--cirrus-accent-hover);
}
.btn.btn-primary.outline:hover,
button.btn-primary.outline:hover,
[type='submit'].btn-primary.outline:hover,
[type='reset'].btn-primary.outline:hover,
[type='button'].btn-primary.outline:hover {
  --btn-color: var(--cirrus-primary);
}
.btn.btn-info,
button.btn-info,
[type='submit'].btn-info,
[type='reset'].btn-info,
[type='button'].btn-info {
  --btn-color: var(--cirrus-info);
  --btn-fg: var(--cirrus-light);
  --btn-border-color: var(--cirrus-info);
}
.btn.btn-info:focus,
button.btn-info:focus,
[type='submit'].btn-info:focus,
[type='reset'].btn-info:focus,
[type='button'].btn-info:focus {
  box-shadow: 0 0 0 0.2rem rgba(41, 114, 250, 0.5);
}
.btn.btn-info:hover,
button.btn-info:hover,
[type='submit'].btn-info:hover,
[type='reset'].btn-info:hover,
[type='button'].btn-info:hover {
  --btn-color: var(--cirrus-info-hover);
}
.btn.btn-info.outline:hover,
button.btn-info.outline:hover,
[type='submit'].btn-info.outline:hover,
[type='reset'].btn-info.outline:hover,
[type='button'].btn-info.outline:hover {
  --btn-color: var(--cirrus-info);
}
.btn.btn-link,
button.btn-link,
[type='submit'].btn-link,
[type='reset'].btn-link,
[type='button'].btn-link {
  --btn-color: var(--cirrus-link);
  --btn-fg: var(--cirrus-light);
  --btn-border-color: var(--cirrus-link);
}
.btn.btn-link:focus,
button.btn-link:focus,
[type='submit'].btn-link:focus,
[type='reset'].btn-link:focus,
[type='button'].btn-link:focus {
  box-shadow: 0 0 0 0.2rem rgba(94, 92, 199, 0.5);
}
.btn.btn-link:hover,
button.btn-link:hover,
[type='submit'].btn-link:hover,
[type='reset'].btn-link:hover,
[type='button'].btn-link:hover {
  --btn-color: var(--cirrus-link-dark);
}
.btn.btn-link.outline,
button.btn-link.outline,
[type='submit'].btn-link.outline,
[type='reset'].btn-link.outline,
[type='button'].btn-link.outline {
  --btn-fg: var(--cirrus-link);
  border: 1px solid transparent;
}
.btn.btn-link.outline:hover,
button.btn-link.outline:hover,
[type='submit'].btn-link.outline:hover,
[type='reset'].btn-link.outline:hover,
[type='button'].btn-link.outline:hover {
  --btn-color: var(--cirrus-link-hover);
  border: 1px solid transparent;
  text-decoration: underline;
}
.btn.btn-success,
button.btn-success,
[type='submit'].btn-success,
[type='reset'].btn-success,
[type='button'].btn-success {
  --btn-color: var(--cirrus-success);
  --btn-fg: var(--cirrus-light);
  --btn-border-color: var(--cirrus-success);
}
.btn.btn-success:focus,
button.btn-success:focus,
[type='submit'].btn-success:focus,
[type='reset'].btn-success:focus,
[type='button'].btn-success:focus {
  box-shadow: 0 0 0 0.2rem rgba(13, 209, 87, 0.5);
}
.btn.btn-success:hover,
button.btn-success:hover,
[type='submit'].btn-success:hover,
[type='reset'].btn-success:hover,
[type='button'].btn-success:hover {
  --btn-color: var(--cirrus-success-hover);
}
.btn.btn-success.outline:hover,
button.btn-success.outline:hover,
[type='submit'].btn-success.outline:hover,
[type='reset'].btn-success.outline:hover,
[type='button'].btn-success.outline:hover {
  --btn-color: var(--cirrus-success);
}
.btn.btn-warning,
button.btn-warning,
[type='submit'].btn-warning,
[type='reset'].btn-warning,
[type='button'].btn-warning {
  --btn-color: var(--cirrus-warning);
  --btn-fg: var(--cirrus-dark);
  --btn-border-color: var(--cirrus-warning);
}
.btn.btn-warning:focus,
button.btn-warning:focus,
[type='submit'].btn-warning:focus,
[type='reset'].btn-warning:focus,
[type='button'].btn-warning:focus {
  box-shadow: 0 0 0 0.2rem rgba(250, 182, 51, 0.5);
}
.btn.btn-warning:hover,
button.btn-warning:hover,
[type='submit'].btn-warning:hover,
[type='reset'].btn-warning:hover,
[type='button'].btn-warning:hover {
  --btn-color: var(--cirrus-warning-hover);
}
.btn.btn-warning.outline:hover,
button.btn-warning.outline:hover,
[type='submit'].btn-warning.outline:hover,
[type='reset'].btn-warning.outline:hover,
[type='button'].btn-warning.outline:hover {
  --btn-color: var(--cirrus-warning);
}
.btn.btn-danger,
button.btn-danger,
[type='submit'].btn-danger,
[type='reset'].btn-danger,
[type='button'].btn-danger {
  --btn-color: var(--cirrus-danger);
  --btn-fg: var(--cirrus-light);
  --btn-border-color: var(--cirrus-danger);
}
.btn.btn-danger:focus,
button.btn-danger:focus,
[type='submit'].btn-danger:focus,
[type='reset'].btn-danger:focus,
[type='button'].btn-danger:focus {
  box-shadow: 0 0 0 0.2rem rgba(251, 65, 67, 0.5);
}
.btn.btn-danger:hover,
button.btn-danger:hover,
[type='submit'].btn-danger:hover,
[type='reset'].btn-danger:hover,
[type='button'].btn-danger:hover {
  --btn-color: var(--cirrus-danger-hover);
}
.btn.btn-danger.outline:hover,
button.btn-danger.outline:hover,
[type='submit'].btn-danger.outline:hover,
[type='reset'].btn-danger.outline:hover,
[type='button'].btn-danger.outline:hover {
  --btn-color: var(--cirrus-danger);
}
.btn.btn--xs,
button.btn--xs,
[type='submit'].btn--xs,
[type='reset'].btn--xs,
[type='button'].btn--xs {
  padding: 0 0.5rem;
  font-size: 50%;
}
.btn.btn--sm,
button.btn--sm,
[type='submit'].btn--sm,
[type='reset'].btn--sm,
[type='button'].btn--sm {
  padding: 0.25rem 1rem;
  font-size: 70%;
}
.btn.btn--md,
button.btn--md,
[type='submit'].btn--md,
[type='reset'].btn--md,
[type='button'].btn--md {
  padding: 0.5rem 1.5rem;
  font-size: 90%;
}
.btn.btn--lg,
button.btn--lg,
[type='submit'].btn--lg,
[type='reset'].btn--lg,
[type='button'].btn--lg {
  padding: 0.75rem 2rem;
  font-size: 110%;
}
.btn.btn--xl,
button.btn--xl,
[type='submit'].btn--xl,
[type='reset'].btn--xl,
[type='button'].btn--xl {
  padding: 1rem 2.5rem;
  font-size: 130%;
}
.btn .fa-wrapper.pad-right,
button .fa-wrapper.pad-right,
[type='submit'] .fa-wrapper.pad-right,
[type='reset'] .fa-wrapper.pad-right,
[type='button'] .fa-wrapper.pad-right {
  margin-right: 0.4rem;
}
.btn .fa-wrapper.pad-left,
button .fa-wrapper.pad-left,
[type='submit'] .fa-wrapper.pad-left,
[type='reset'] .fa-wrapper.pad-left,
[type='button'] .fa-wrapper.pad-left {
  margin-left: 0.4rem;
}
.btn span:first-child,
button span:first-child,
[type='submit'] span:first-child,
[type='reset'] span:first-child,
[type='button'] span:first-child {
  margin-right: 0.2rem;
}
.btn span:last-child,
button span:last-child,
[type='submit'] span:last-child,
[type='reset'] span:last-child,
[type='button'] span:last-child {
  margin-left: 0.2rem;
}

/* Links as Buttons */
a.btn {
  display: inline-flex;
}

[class^='btn-']:not(.btn-container):not(.btn-close),
[class*=' btn-']:not(.btn-container):not(.btn-close) {
  background-color: var(--btn-color);
  border: 1px solid var(--btn-border-color);
  color: var(--btn-fg);
  transition: all var(--animation-duration);
  /* Outline Variants */
}
[class^='btn-']:not(.btn-container):not(.btn-close):hover,
[class*=' btn-']:not(.btn-container):not(.btn-close):hover {
  background-color: var(--btn-color);
  border-color: var(--btn-border-color);
  transition: all var(--animation-duration);
}
[class^='btn-']:not(.btn-container):not(.btn-close).outline,
[class*=' btn-']:not(.btn-container):not(.btn-close).outline {
  background-color: transparent;
  color: var(--btn-color);
}
[class^='btn-']:not(.btn-container):not(.btn-close).outline:hover,
[class*=' btn-']:not(.btn-container):not(.btn-close).outline:hover {
  background-color: var(--btn-color);
  color: var(--btn-fg);
  transition: all var(--animation-duration);
}
[class^='btn-']:not(.btn-container):not(.btn-close).outline.btn-transparent,
[class*=' btn-']:not(.btn-container):not(.btn-close).outline.btn-transparent {
  color: #495057 !important;
}

/* Make the loader white so it is visible */
.loading.btn-accent:after {
  border: 2px solid #fff;
  border-right-color: transparent;
  border-top-color: transparent;
}

/* BUTTON GROUPS */
/* Will group buttons with components in a single component */
.btn-group {
  display: inline-flex;
}
.btn-group .btn,
.btn-group button,
.btn-group [type='submit'],
.btn-group [type='reset'],
.btn-group [type='button'] {
  flex: 1 0 auto;
  margin: 0;
}
.btn-group .btn:first-child:not(:last-child),
.btn-group button:first-child:not(:last-child),
.btn-group [type='submit']:first-child:not(:last-child),
.btn-group [type='reset']:first-child:not(:last-child),
.btn-group [type='button']:first-child:not(:last-child) {
  /* Style the first child in group > 1 buttons */
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}
.btn-group .btn:last-child:not(:first-child),
.btn-group button:last-child:not(:first-child),
.btn-group [type='submit']:last-child:not(:first-child),
.btn-group [type='reset']:last-child:not(:first-child),
.btn-group [type='button']:last-child:not(:first-child) {
  /* Style the last child in group > 1 buttons */
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  margin-left: -1px;
}
.btn-group .btn:not(:first-child):not(:last-child),
.btn-group button:not(:first-child):not(:last-child),
.btn-group [type='submit']:not(:first-child):not(:last-child),
.btn-group [type='reset']:not(:first-child):not(:last-child),
.btn-group [type='button']:not(:first-child):not(:last-child) {
  /* Style button in middle of group */
  border-radius: 0;
  /* Remove roundness from center buttons */
  margin-left: -1px;
}
.btn-group .btn:focus,
.btn-group button:focus,
.btn-group [type='submit']:focus,
.btn-group [type='reset']:focus,
.btn-group [type='button']:focus {
  z-index: 1;
}
.btn-group.btn-group-fill {
  /* Makes the button group fill the width and proportion the buttons to fill the space */
  display: flex;
}
.btn-group.btn-group-fill .btn,
.btn-group.btn-group-fill button,
.btn-group.btn-group-fill [type='submit'],
.btn-group.btn-group-fill [type='reset'],
.btn-group.btn-group-fill [type='button'] {
  flex: 1 0;
  /* Make the buttons fill the available width and proportion themselves */
}
.btn-group.btn-group-fill:focus {
  z-index: 1;
}

@media screen and (max-width: 767px) {
  .btn-group {
    display: flex;
    flex-direction: column;
  }
  .btn-group .btn,
  .btn-group button,
  .btn-group [type='submit'],
  .btn-group [type='reset'],
  .btn-group [type='button'] {
    margin-bottom: -1px;
  }
  .btn-group .btn:first-child:not(:last-child),
  .btn-group button:first-child:not(:last-child),
  .btn-group [type='submit']:first-child:not(:last-child),
  .btn-group [type='reset']:first-child:not(:last-child),
  .btn-group [type='button']:first-child:not(:last-child) {
    border-radius: 0.25rem 0.25rem 0 0;
  }
  .btn-group .btn:not(:first-child):not(:last-child),
  .btn-group button:not(:first-child):not(:last-child),
  .btn-group [type='submit']:not(:first-child):not(:last-child),
  .btn-group [type='reset']:not(:first-child):not(:last-child),
  .btn-group [type='button']:not(:first-child):not(:last-child) {
    margin-left: 0;
  }
  .btn-group .btn:last-child:not(:first-child),
  .btn-group button:last-child:not(:first-child),
  .btn-group [type='submit']:last-child:not(:first-child),
  .btn-group [type='reset']:last-child:not(:first-child),
  .btn-group [type='button']:last-child:not(:first-child) {
    border-radius: 0 0 0.25rem 0.25rem;
    margin-left: 0;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* CODE */
code {
  --cirrus-code-label-fg: #868e96;
  padding: 0.3rem;
  margin: 0.5em 0;
  overflow: auto;
  background-color: var(--cirrus-code-bg);
  color: var(--cirrus-code-fg);
  border-radius: 3px;
  /* Dark theme for code */
}
code:before {
  color: var(--cirrus-code-label-fg);
  content: attr(data-lang);
  font-size: 0.9rem;
  position: absolute;
  right: 1rem;
  top: 0.7rem;
}
code.dark {
  --cirrus-code-bg: #343a40;
  --cirrus-code-fg: #f8f9fa;
  --cirrus-border-left-bg: #212529;
  --cirrus-code-label-fg: #ced4da;
}

pre > code {
  --cirrus-code-bg: #f8f9fa;
  --cirrus-code-fg: #343a40;
  --cirrus-border-left-bg: #e9ecef;
  background-color: var(--cirrus-code-bg);
  font-size: 14px;
  display: block;
  padding: 1rem;
  white-space: pre-wrap;
  word-wrap: break-word;
  font-family: SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace;
  text-align: left;
  line-height: 1.5;
  -moz-tab-size: 4;
  tab-size: 4;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
  border-left: 0.3rem solid var(--cirrus-border-left-bg);
  margin: 0;
  position: relative;
  color: var(--cirrus-code-fg);
}
pre > code[data-lang]:not([data-lang='']) {
  padding: 2rem 1.5rem 1rem;
}
@import url('https://fonts.googleapis.com/css?family=Nunito:200,300,400,600,700');
@import url('https://fonts.googleapis.com/css?family=Montserrat:400,700');
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Global Mixins
*/
/*
    Mixin that returns a property map as a series of CSS class properties.

    E.g. $xs: (color: #fff, opacity: 0.5), $sm... =>

    <class>--xs {
        color: #fff;
        opacity: 0.5;
    }
*/
/*
    Bring to front on focus.
*/
/* FONT */
/* Constants */
/* Headers */
h6 {
  font-size: 1.25rem;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 1rem;
}

h5 {
  font-size: 1.5rem;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 1rem;
}

h4 {
  font-size: 1.75rem;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 1rem;
}

h3 {
  font-size: 2rem;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 1rem;
}

h2 {
  font-size: 2.5rem;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 1rem;
}

h1 {
  font-size: 3rem;
  letter-spacing: 0.025rem;
  font-family: 'Montserrat', sans-serif;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: 1rem;
}

/* Headlines (for larger titles) */
.headline-4 {
  font-size: 3.5rem;
  letter-spacing: 0.05rem;
}

.headline-3 {
  font-size: 4.5rem;
  letter-spacing: 0.05rem;
}

.headline-2 {
  font-size: 5.5rem;
  letter-spacing: 0.05rem;
}

.headline-1 {
  font-size: 6.5rem;
  letter-spacing: 0.05rem;
}

/* Regular text sizes */
.text-xs {
  font-size: 0.75rem !important;
  line-height: 1.5rem !important;
}

.text-sm {
  font-size: 0.875rem !important;
  line-height: 1.75rem !important;
}

.text-md {
  font-size: 1rem !important;
  line-height: 2rem !important;
}

.text-lg {
  font-size: 1.25rem !important;
  line-height: 2.25rem !important;
}

.text-xl {
  font-size: 1.5rem !important;
  line-height: 2.25rem !important;
}

p,
article,
blockquote {
  font-size: 1rem;
  line-height: 2;
  margin-bottom: 1rem;
}

p.lead {
  font-size: 1.2rem;
}

blockquote {
  background-color: #f8f9fa;
  border-left: 5px solid #e9ecef;
  border-radius: 3px;
  margin-bottom: 1rem;
  padding: 1rem 2rem;
}
blockquote.text--large {
  font-size: 1.15rem;
}
blockquote p {
  margin: 0;
}

cite {
  opacity: 0.7;
}

mark,
.mark {
  padding: 0.2em;
  background-color: #f0e8c4;
}

.font-alt {
  font-family: 'Nunito Sans';
}

.content h1 {
  line-height: 1.125em;
  margin: 1rem 0;
}
.content h2 {
  line-height: 1.125em;
  margin: 1rem 0;
}
.content h3 {
  line-height: 1.125em;
  margin: 1rem 0;
}
.content h4 {
  line-height: 1.125em;
  margin: 1rem 0;
}
.content h5 {
  line-height: 1.125em;
  margin: 1rem 0;
}
.content h6 {
  line-height: 1.125em;
  margin: 1rem 0;
}

/* TODO: To deprecate */
.title {
  font-weight: bold;
}

.title:not(:last-child),
.subtitle:not(:last-child) {
  margin-bottom: 1rem;
}

.title + .subtitle {
  /* Make the subtitlte closer to the title */
  margin-top: -0.75rem;
}

/* Use default line-height for these texts and when line-height-inherit is specified */
.card-tile p,
.card-tile article,
.card-tile blockquote {
  line-height: inherit;
}

/* Weights */
.font-thin {
  font-weight: 200;
}

.font-light {
  font-weight: 300;
}

.font-normal {
  font-weight: 400;
}

.font-semibold {
  font-weight: 600;
}

.font-bold {
  font-weight: 700;
}

/* Text Transformations */
.uppercase {
  text-transform: uppercase;
}

.lowercase {
  text-transform: lowercase;
}

.capitalize {
  text-transform: capitalize;
}

.rtl {
  direction: rtl;
}

/* Font Awesome */
.icon {
  /* Usually used in spans */
  display: inline-block;
  /* font-size: 21px; Allow font sizes for icons to be overwritten */
  /* line-height: 1.5rem; Allow line height to be inherited or overwritten */
  text-align: center;
  width: 1.5rem;
  vertical-align: baseline;
}
.icon.x-small {
  margin: 0.55rem 0 0 0.1rem;
}
.icon.small {
  margin: 0.95rem 0 0 0.1rem;
}
.icon .fa-wrapper {
  font-size: inherit;
}

.info {
  display: block;
  font-size: var(--font-size-s);
  margin-top: 0.25rem;
  color: #868e96;
}
.info.inline {
  /* Keeps the extra info inline */
  display: inline-block;
  margin-left: 0.5rem;
}

.caret {
  display: inline-block;
  width: 0;
  height: 0;
  margin-left: 2px;
  vertical-align: middle;
  border-top: 4px dashed;
  border-top: 4px solid\9;
  border-right: 4px solid transparent;
  border-left: 4px solid transparent;
}

/* Other text elements */
abbr[title] {
  border-bottom: 0.1rem dotted;
  cursor: help;
  text-decoration: none;
}

kbd {
  background-color: var(--cirrus-fg);
  border-radius: 0.2rem;
  color: #fff;
  display: inline-block;
  line-height: 1;
  padding: 0.5rem;
  vertical-align: baseline;
}

/* MOBILE */
@media screen and (max-width: 639px) {
  h6 {
    font-size: 1rem;
  }

  h5 {
    font-size: 1.25rem;
  }

  h4 {
    font-size: 1.5rem;
  }

  h3 {
    font-size: 1.75rem;
  }

  h2 {
    font-size: 2rem;
  }

  h1 {
    font-size: 2.25rem;
  }

  /* Headlines (for larger titles) */
  .headline-4 {
    font-size: 3rem;
  }

  .headline-3 {
    font-size: 3.25rem;
  }

  .headline-2 {
    font-size: 3.5rem;
  }

  .headline-1 {
    font-size: 3.75rem;
  }

  p,
  article,
  blockquote {
    margin: 1rem 0;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* FOOTER */
.footer {
  background-color: #343a40;
  padding: 6rem 0;
  text-align: center;
  margin-top: 5rem;
  width: 100%;
}
.footer.footer--fixed {
  bottom: 0;
  position: fixed;
}
.footer a {
  color: #e9ecef;
  font-weight: bolder;
}
.footer a:hover {
  color: #ced4da;
}
.footer p {
  color: #868e96;
}
.footer ul {
  margin: 0.5rem 0;
  /* Remove the left margin seen in global style */
}
.footer .footer__title {
  text-align: center;
  letter-spacing: 6px;
  position: relative;
  padding-bottom: 10px;
}
.footer .footer__list-title {
  color: #ced4da;
  font-size: 75%;
  text-transform: uppercase;
  font-weight: bolder;
}
.footer .footer__list-title::after {
  content: '';
  display: block;
  width: 10%;
  margin: auto;
  border-bottom: 2px solid;
  border-color: #343b49;
}
.footer ul a .footer__list-item,
.footer .footer__list-item {
  margin: 0.1rem;
  color: #868e96;
  transition: all var(--animation-duration);
  font-size: 75%;
  text-transform: uppercase;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Global Mixins
*/
/*
    Mixin that returns a property map as a series of CSS class properties.

    E.g. $xs: (color: #fff, opacity: 0.5), $sm... =>

    <class>--xs {
        color: #fff;
        opacity: 0.5;
    }
*/
/*
    Bring to front on focus.
*/
/* FORMS */
/*
    Mixins
*/
/*
    Styles
*/
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']),
select {
  width: 100%;
  border: 1px solid #dee2e6;
  border-radius: 3px;
  font-family: 'Nunito Sans';
  font-size: var(--font-size-m);
  letter-spacing: 0.02rem;
  transition: all 0.3s;
  outline: none;
  padding: 0.85rem 1.1rem;
  /* Input Field Sizes */
  /* Hold Font Awesome glyphs inside input fields */
  /* More sizes coming soon */
  /* Search field */
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input--xs,
select.input--xs {
  font-size: 0.75rem;
  padding: 0.35rem 0.9rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input--sm,
select.input--sm {
  font-size: 0.875rem;
  padding: 0.55rem 1rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input--lg,
select.input--lg {
  font-size: 1.25rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input--xl,
select.input--xl {
  font-size: 1.5rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-left,
select.input-contains-icon,
select.input-contains-icon-left {
  padding-left: 2.75rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right,
select.input-contains-icon-right {
  padding-right: 2.75rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon.input--xs,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right.input-xs,
select.input-contains-icon.input--xs,
select.input-contains-icon-right.input-xs {
  padding-left: 2rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon.input--sm,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right.input-sm,
select.input-contains-icon.input--sm,
select.input-contains-icon-right.input-sm {
  padding-left: 2.5rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon.input--lg,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right.input-lg,
select.input-contains-icon.input--lg,
select.input-contains-icon-right.input-lg {
  padding-left: 3.5rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon.input--xl,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right.input-xl,
select.input-contains-icon.input--xl,
select.input-contains-icon-right.input-xl {
  padding-left: 4rem;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon.input--xs
  ~ .icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-left.input--xs
  ~ .icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right.input--xs
  ~ .icon.icon-right,
select.input-contains-icon.input--xs ~ .icon,
select.input-contains-icon-left.input--xs ~ .icon,
select.input-contains-icon-right.input--xs ~ .icon.icon-right {
  line-height: 1.75rem;
  width: 1.75rem;
  font-size: 7px;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon.input--sm
  ~ .icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-left.input--sm
  ~ .icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right.input--sm
  ~ .icon.icon-right,
select.input-contains-icon.input--sm ~ .icon,
select.input-contains-icon-left.input--sm ~ .icon,
select.input-contains-icon-right.input--sm ~ .icon.icon-right {
  width: 2.5rem;
  font-size: 14px;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon.input--lg
  ~ .icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-left.input--lg
  ~ .icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right.input--lg
  ~ .icon.icon-right,
select.input-contains-icon.input--lg ~ .icon,
select.input-contains-icon-left.input--lg ~ .icon,
select.input-contains-icon-right.input--lg ~ .icon.icon-right {
  line-height: 3.5rem;
  width: 3.5rem;
  font-size: 28px;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon.input--xl
  ~ .icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-left.input--xl
  ~ .icon,
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-contains-icon-right.input--xl
  ~ .icon.icon-right,
select.input-contains-icon.input--xl ~ .icon,
select.input-contains-icon-left.input--xl ~ .icon,
select.input-contains-icon-right.input--xl ~ .icon.icon-right {
  line-height: 2.5rem;
  width: 3.75rem;
  font-size: 35px;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset'])[type='search'],
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).search,
select[type='search'],
select.search {
  background-repeat: no-repeat;
  background-position: left 0.6rem center;
  background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path opacity="0.45" d="M14.891,14.39l-0.5.5a0.355,0.355,0,0,1-.5,0L9.526,10.529a5.3,5.3,0,1,1,2.106-4.212,5.268,5.268,0,0,1-1.1,3.21l4.362,4.362A0.354,0.354,0,0,1,14.891,14.39ZM6.316,2.418a3.9,3.9,0,1,0,3.9,3.9A3.9,3.9,0,0,0,6.316,2.418Z"/></svg>');
  /* NEEDS FIXING */
  padding-left: 2rem !important;
  -webkit-appearance: none;
  /* Fix Safari issue */
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset'])[type='color'],
select[type='color'] {
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
  box-sizing: border-box;
  transition: 0.3s;
  outline: 0;
  position: relative;
  height: 3rem;
  background-color: #fff;
  padding: 0.55rem 0.8rem !important;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-success,
select.input-success {
  border-color: var(--cirrus-success);
  background-color: rgba(0, 224, 0, 0.05) !important;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-success:focus,
select.input-success:focus {
  box-shadow: 0 0 0 0.2rem rgba(13, 209, 87, 0.55), inset 0px 1px 8px rgba(0, 0, 0, 0.07);
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-error,
select.input-error {
  border-color: var(--cirrus-danger);
  background-color: rgba(244, 67, 54, 0.05) !important;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']).input-error:focus,
select.input-error:focus {
  box-shadow: 0 0 0 0.2rem rgba(251, 65, 67, 0.55), inset 0px 1px 8px rgba(0, 0, 0, 0.07);
}

textarea,
textarea[type='text'] {
  width: 100%;
  border: 1px solid #dee2e6;
  border-radius: 3px;
  font-family: 'Nunito Sans';
  font-size: var(--font-size-m);
  letter-spacing: 0.02rem;
  transition: all 0.3s;
  outline: none;
  padding: 0.85rem 1.1rem;
  /* Input Field Sizes */
  /* Hold Font Awesome glyphs inside input fields */
  /* More sizes coming soon */
  min-height: 8rem;
  line-height: 1.5rem;
  resize: vertical;
}
textarea.input--xs,
textarea[type='text'].input--xs {
  font-size: 0.75rem;
  padding: 0.35rem 0.9rem;
}
textarea.input--sm,
textarea[type='text'].input--sm {
  font-size: 0.875rem;
  padding: 0.55rem 1rem;
}
textarea.input--lg,
textarea[type='text'].input--lg {
  font-size: 1.25rem;
}
textarea.input--xl,
textarea[type='text'].input--xl {
  font-size: 1.5rem;
}
textarea.input-contains-icon,
textarea.input-contains-icon-left,
textarea[type='text'].input-contains-icon,
textarea[type='text'].input-contains-icon-left {
  padding-left: 2.75rem;
}
textarea.input-contains-icon-right,
textarea[type='text'].input-contains-icon-right {
  padding-right: 2.75rem;
}
textarea.input-contains-icon.input--xs,
textarea.input-contains-icon-right.input-xs,
textarea[type='text'].input-contains-icon.input--xs,
textarea[type='text'].input-contains-icon-right.input-xs {
  padding-left: 2rem;
}
textarea.input-contains-icon.input--sm,
textarea.input-contains-icon-right.input-sm,
textarea[type='text'].input-contains-icon.input--sm,
textarea[type='text'].input-contains-icon-right.input-sm {
  padding-left: 2.5rem;
}
textarea.input-contains-icon.input--lg,
textarea.input-contains-icon-right.input-lg,
textarea[type='text'].input-contains-icon.input--lg,
textarea[type='text'].input-contains-icon-right.input-lg {
  padding-left: 3.5rem;
}
textarea.input-contains-icon.input--xl,
textarea.input-contains-icon-right.input-xl,
textarea[type='text'].input-contains-icon.input--xl,
textarea[type='text'].input-contains-icon-right.input-xl {
  padding-left: 4rem;
}
textarea.input-contains-icon.input--xs ~ .icon,
textarea.input-contains-icon-left.input--xs ~ .icon,
textarea.input-contains-icon-right.input--xs ~ .icon.icon-right,
textarea[type='text'].input-contains-icon.input--xs ~ .icon,
textarea[type='text'].input-contains-icon-left.input--xs ~ .icon,
textarea[type='text'].input-contains-icon-right.input--xs ~ .icon.icon-right {
  line-height: 1.75rem;
  width: 1.75rem;
  font-size: 7px;
}
textarea.input-contains-icon.input--sm ~ .icon,
textarea.input-contains-icon-left.input--sm ~ .icon,
textarea.input-contains-icon-right.input--sm ~ .icon.icon-right,
textarea[type='text'].input-contains-icon.input--sm ~ .icon,
textarea[type='text'].input-contains-icon-left.input--sm ~ .icon,
textarea[type='text'].input-contains-icon-right.input--sm ~ .icon.icon-right {
  width: 2.5rem;
  font-size: 14px;
}
textarea.input-contains-icon.input--lg ~ .icon,
textarea.input-contains-icon-left.input--lg ~ .icon,
textarea.input-contains-icon-right.input--lg ~ .icon.icon-right,
textarea[type='text'].input-contains-icon.input--lg ~ .icon,
textarea[type='text'].input-contains-icon-left.input--lg ~ .icon,
textarea[type='text'].input-contains-icon-right.input--lg ~ .icon.icon-right {
  line-height: 3.5rem;
  width: 3.5rem;
  font-size: 28px;
}
textarea.input-contains-icon.input--xl ~ .icon,
textarea.input-contains-icon-left.input--xl ~ .icon,
textarea.input-contains-icon-right.input--xl ~ .icon.icon-right,
textarea[type='text'].input-contains-icon.input--xl ~ .icon,
textarea[type='text'].input-contains-icon-left.input--xl ~ .icon,
textarea[type='text'].input-contains-icon-right.input--xl ~ .icon.icon-right {
  line-height: 2.5rem;
  width: 3.75rem;
  font-size: 35px;
}

input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']):focus,
select:focus,
textarea:focus,
textarea[type='text']:focus,
input[type='text'].input-focused,
.input-focused {
  border-color: #3dabf0;
  box-shadow: 0 0 0 0.2rem rgba(61, 171, 240, 0.45), inset 0px 1px 8px rgba(0, 0, 0, 0.07);
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']):focus.input-success,
select:focus.input-success,
textarea:focus.input-success,
textarea[type='text']:focus.input-success,
input[type='text'].input-focused.input-success,
.input-focused.input-success {
  border-color: var(--cirrus-success);
  background-color: rgba(0, 224, 0, 0.05) !important;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']):focus.input-success:focus,
select:focus.input-success:focus,
textarea:focus.input-success:focus,
textarea[type='text']:focus.input-success:focus,
input[type='text'].input-focused.input-success:focus,
.input-focused.input-success:focus {
  box-shadow: 0 0 0 0.2rem rgba(13, 209, 87, 0.55), inset 0px 1px 8px rgba(0, 0, 0, 0.07);
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']):focus.input-error,
select:focus.input-error,
textarea:focus.input-error,
textarea[type='text']:focus.input-error,
input[type='text'].input-focused.input-error,
.input-focused.input-error {
  border-color: var(--cirrus-danger);
  background-color: rgba(244, 67, 54, 0.05) !important;
}
input:not([type='checkbox']):not([type='radio']):not([type='submit']):not([type='button']):not([type='reset']):focus.input-error:focus,
select:focus.input-error:focus,
textarea:focus.input-error:focus,
textarea[type='text']:focus.input-error:focus,
input[type='text'].input-focused.input-error:focus,
.input-focused.input-error:focus {
  box-shadow: 0 0 0 0.2rem rgba(251, 65, 67, 0.55), inset 0px 1px 8px rgba(0, 0, 0, 0.07);
}

select {
  width: 100%;
  border: 1px solid #dee2e6;
  border-radius: 3px;
  font-family: 'Nunito Sans';
  font-size: var(--font-size-m);
  letter-spacing: 0.02rem;
  transition: all 0.3s;
  outline: none;
  padding: 0.85rem 1.1rem;
  /* Input Field Sizes */
  /* Hold Font Awesome glyphs inside input fields */
  /* More sizes coming soon */
  background-color: #fff;
  border: 1px solid #ddd;
  /* Fixes for Safari and other browsers for consistent UI */
}
select.input--xs {
  font-size: 0.75rem;
  padding: 0.35rem 0.9rem;
}
select.input--sm {
  font-size: 0.875rem;
  padding: 0.55rem 1rem;
}
select.input--lg {
  font-size: 1.25rem;
}
select.input--xl {
  font-size: 1.5rem;
}
select.input-contains-icon,
select.input-contains-icon-left {
  padding-left: 2.75rem;
}
select.input-contains-icon-right {
  padding-right: 2.75rem;
}
select.input-contains-icon.input--xs,
select.input-contains-icon-right.input-xs {
  padding-left: 2rem;
}
select.input-contains-icon.input--sm,
select.input-contains-icon-right.input-sm {
  padding-left: 2.5rem;
}
select.input-contains-icon.input--lg,
select.input-contains-icon-right.input-lg {
  padding-left: 3.5rem;
}
select.input-contains-icon.input--xl,
select.input-contains-icon-right.input-xl {
  padding-left: 4rem;
}
select.input-contains-icon.input--xs ~ .icon,
select.input-contains-icon-left.input--xs ~ .icon,
select.input-contains-icon-right.input--xs ~ .icon.icon-right {
  line-height: 1.75rem;
  width: 1.75rem;
  font-size: 7px;
}
select.input-contains-icon.input--sm ~ .icon,
select.input-contains-icon-left.input--sm ~ .icon,
select.input-contains-icon-right.input--sm ~ .icon.icon-right {
  width: 2.5rem;
  font-size: 14px;
}
select.input-contains-icon.input--lg ~ .icon,
select.input-contains-icon-left.input--lg ~ .icon,
select.input-contains-icon-right.input--lg ~ .icon.icon-right {
  line-height: 3.5rem;
  width: 3.5rem;
  font-size: 28px;
}
select.input-contains-icon.input--xl ~ .icon,
select.input-contains-icon-left.input--xl ~ .icon,
select.input-contains-icon-right.input--xl ~ .icon.icon-right {
  line-height: 2.5rem;
  width: 3.75rem;
  font-size: 35px;
}
select[multiple] option {
  padding: 0.2rem 0.4rem;
}
select.select:not([size]):not([multiple]) {
  background: url("data:image/svg+xml;charset=utf8,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%204%205'%3E%3Cpath%20fill='%23667189'%20d='M2%200L0%202h4zm0%205L0%203h4z'/%3E%3C/svg%3E")
    no-repeat right 0.85rem center/0.5rem 0.6rem no-repeat;
  -webkit-appearance: none;
}

input:not([class*='btn-']):disabled,
input:not([class*=' btn-']):disabled:hover,
select:disabled,
textarea:disabled {
  background-color: #f1f3f5;
  cursor: not-allowed;
  border: 1px solid #f1f3f5;
}

label.label {
  color: #495057;
  display: inline-block;
  /* changed from block */
  font-weight: bold;
  margin-top: 0.8rem;
}
label + .input-control {
  margin-top: 0;
}
label.label:not(:last-child) {
  margin-bottom: 0;
}
label:first-child:not(:last-child):not(.form-group-label) {
  margin-right: 0.5rem;
}
label:not(:first-child):not(:last-child):not(.form-group-label) {
  margin: 0 0.5rem;
}
label:last-child:not(:first-child):not(.form-group-label) {
  margin-left: 0.5rem;
}

/* Required asterisk */
.required {
  /* Use this in a span or a div */
  position: relative;
  top: 1px;
  font-weight: bold;
  color: #b31e1d;
  padding-left: 0.1rem;
}

/* Used for when the input controls have another control adjacent to it but we want to position it inside the input field like font-awesome glyphs. As of 0.5.2, it is the default container for input fields. */
.input-control {
  position: relative;
  margin: 0.5rem 0;
}

.input-contains-icon ~ .icon,
.input-contains-icon-left ~ .icon,
.input-contains-icon-right ~ .icon {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
}

.input-contains-icon ~ .icon:not(.icon-right),
.input-contains-icon-left ~ .icon.icon-left {
  /* Nomral input only */
  position: absolute;
  left: 0;
  top: 0;
  width: 3rem;
  z-index: 1;
}

.input-contains-icon-right ~ .icon.icon-right {
  position: absolute;
  pointer-events: none;
  line-height: 2.75rem;
  vertical-align: baseline;
  top: 0;
  right: 0;
  width: 3rem;
  z-index: 1;
}

/* Form groups that group inputs with other controls. */
.form-group {
  /* This is just an extended portion of an input which is just like a label and is read only */
  /* This will style the controls if they are the leftmost control in the form group for labels, inputs, and buttons. */
  display: flex;
  display: -ms-flexbox;
  margin: 0.5rem 0;
  /* Add margin to the container since they have been removed from children */
  /* Fixes the text width being cut off */
  /* Form group controls */
  /* Keeps inputs in form group above other components */
}
.form-group .form-group-btn {
  flex: 1 0 auto;
  margin-bottom: 0;
  /* Style the front controls */
  /* Style the middle controls */
  /* Handles right most control in form group */
}
.form-group .form-group-btn:first-child:not(:last-child) {
  border-top-right-radius: 0 !important;
  border-bottom-right-radius: 0 !important;
}
.form-group .form-group-btn:not(:first-child):not(:last-child) {
  border-radius: 0 !important;
  margin-left: -1px;
  margin-right: -1px;
  /* Remove spacing in middle controls */
}
.form-group .form-group-btn:last-child:not(:first-child) {
  border-top-left-radius: 0 !important;
  border-bottom-left-radius: 0 !important;
  margin-left: -1px;
  z-index: 0;
}
.form-group .form-group-btn:focus {
  z-index: 1;
}
.form-group .form-group-label {
  background-color: var(--cirrus-form-group-bg);
  border: 1px solid #dee2e6;
  border-radius: 0.2rem;
  color: var(--cirrus-form-group-fg);
  margin: 0;
  padding: 0.8rem;
  user-select: none;
  /* Style the front controls */
  /* Style the middle controls */
  /* Handles right most control in form group */
}
.form-group .form-group-label:first-child:not(:last-child) {
  border-top-right-radius: 0 !important;
  border-bottom-right-radius: 0 !important;
}
.form-group .form-group-label:not(:first-child):not(:last-child) {
  border-radius: 0 !important;
  margin-left: -1px;
  margin-right: -1px;
  /* Remove spacing in middle controls */
}
.form-group .form-group-label:last-child:not(:first-child) {
  border-top-left-radius: 0 !important;
  border-bottom-left-radius: 0 !important;
  margin-left: -1px;
  z-index: 0;
}
.form-group .form-group-label.label--xs {
  font-size: 0.75rem;
}
.form-group .form-group-label.label--sm {
  font-size: 0.875rem;
}
.form-group .form-group-label.label--lg {
  font-size: 1.25rem;
}
.form-group .form-group-label.label--xl {
  font-size: 1.5rem;
}
.form-group .form-group-input {
  /* Style the front controls */
  /* Style the middle controls */
  /* Handles right most control in form group */
}
.form-group .form-group-input:first-child:not(:last-child) {
  border-top-right-radius: 0 !important;
  border-bottom-right-radius: 0 !important;
}
.form-group .form-group-input:not(:first-child):not(:last-child) {
  border-radius: 0 !important;
  margin-left: -1px;
  margin-right: -1px;
  /* Remove spacing in middle controls */
}
.form-group .form-group-input:last-child:not(:first-child) {
  border-top-left-radius: 0 !important;
  border-bottom-left-radius: 0 !important;
  margin-left: -1px;
  z-index: 0;
}
.form-group .form-group-input:focus {
  z-index: 1;
}

/* Change place holder color */
::-moz-placeholder {
  color: #a9a9a9;
  /* Lighter than the default */
}

::-webkit-input-placeholder {
  color: #a9a9a9;
  /* Lighter than the default */
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* Separate CSS file, but same part as Layout */
/* The base container that is similar in structure to a card but more flexible */
.frame {
  border-radius: 3px;
  box-shadow: 0 0.2rem 1.25rem 0 rgba(27, 30, 36, 0.07);
  display: flex;
  flex-direction: column;
  /* For the frame header and footer, use flex display */
  /* The frame navbar can be used with level or header classes to create a navigation menu */
}
.frame .frame__header,
.frame .frame__footer {
  flex: 0 0 auto;
  padding: 1rem;
}
.frame .frame__nav {
  flex: 0 0 auto;
}
.frame .frame__body {
  flex: 1 1 auto;
  overflow-y: auto;
  /* Show the scrollbar when needed */
  padding: 0 1rem;
}
.frame .frame__title {
  color: #374054;
  font-size: 1rem;
  margin: 0.75rem auto 0;
}
.frame .frame__subtitle {
  color: rgba(55, 64, 84, 0.6);
  font-size: 1rem;
  margin: 0 auto 0.75rem;
}
/*
    Group selectors that share common styling.
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* These styles can also be used on menus in the body */
/* HEADER */
.header {
  flex-grow: 1;
  width: 100%;
  z-index: 100;
  margin-bottom: 20px;
  box-shadow: 0 3px 15px rgba(57, 63, 72, 0.1);
  background-color: var(--cirrus-bg);
  max-height: 100vh;
  padding: 0 2rem;
  transition: all 0.3s;
  display: flex;
  --header-link-color: #495057;
  --header-link-color-hover: #606a73;
  /* Remove any padding set for headers in default.scss */
  /* Header dark theme */
  /* Add transition to nav menu when it drops down */
  /* The container that contains all the header menu components. Child of header */
  /* Static header at the top of the screen */
  /* Hover effect for header elements when appropriate */
}
.header h1 {
  margin: 0;
}
.header h2 {
  margin: 0;
}
.header h3 {
  margin: 0;
}
.header h4 {
  margin: 0;
}
.header h5 {
  margin: 0;
}
.header h6 {
  margin: 0;
}
.header a {
  color: var(--header-link-color);
}
.header a:hover {
  color: var(--header-link-color-hover);
}
.header.header-dark {
  background-color: rgba(0, 0, 0, 0.87);
  color: #fff;
  --header-link-color: #fff;
  --header-link-color-hover: #fff;
  /* Theme for dark menu */
}
.header.header-clear {
  background-color: transparent;
  box-shadow: none;
  /* Add border radius to whole menu with clear header */
}
.header.header-clear .nav-item .dropdown-menu {
  border-radius: 4px;
}
.header.header-animated .header-nav {
  transition: all 0.3s;
}
.header .header-nav {
  /* Flex display 768px and higher */
  overflow: auto;
}
.header .header-brand {
  align-items: stretch;
  display: flex;
  flex-shrink: 0;
  max-width: 100vw;
  min-height: 3.25rem;
  overflow-x: auto;
  overflow-y: hidden;
}
.header.header-fixed {
  position: fixed;
  top: 0;
  /* Change this if you want to float the header somewhere else */
}
.header:not(.header-clear) .nav-item:not(.no-hover):hover,
.header:not(.header-clear) .nav-item:not(.no-hover).hovered {
  background-color: rgba(216, 216, 216, 0.15);
  transition: all 0.3s;
}
.header:not(.header-clear) .nav-item.active,
.header:not(.header-clear) .nav-item.active:hover {
  background-color: rgba(216, 216, 216, 0.35);
}
.header .nav-btn {
  cursor: pointer;
  display: block;
  height: 3.5rem;
  position: relative;
  width: 3.5rem;
}
.header .btn,
.header button,
.header [type='submit'],
.header [type='reset'],
.header [type='button'] {
  margin: 0;
}

/* Styles for header menu (aka the nav bar) */
.nav-menu {
  transition: all 0.3s;
}
.nav-menu .has-sub {
  position: relative;
}

/* Allow the user to scroll through navbar items if it exceeds nav-left, nav-center, or nav-right widths */
.nav-overflow-x {
  justify-content: inherit;
  overflow-x: scroll;
}

/* Wrapper to vertically center header items */
.nav-item {
  align-items: center;
  display: flex;
  position: relative;
  flex-grow: 0;
  flex-shrink: 0;
  justify-content: center;
  transition: all 0.3s;
  padding: 0 0.3rem;
  cursor: pointer;
  /* HEADER DROP DOWN MENU */
  /* Add room for the dropdown chevron pseudoelement */
}
.nav-item a {
  align-items: center;
  display: flex;
}
.nav-item .dropdown-menu {
  background-color: var(--cirrus-bg);
  position: absolute;
  top: 95%;
  /*right: 0; /* Unable to solve problem when we have multiple drop down menus */
  z-index: 1000;
  float: left;
  min-width: 160px;
  padding: 5px 0;
  margin: 2px 0 0;
  font-size: 14px;
  text-align: left;
  list-style: none;
  background-clip: padding-box;
  border: 1px solid #e9ecef;
  border-radius: 0 0 4px 4px;
  box-shadow: 0 0.5rem 1rem rgba(10, 10, 10, 0.1);
  /* Just add a transition in general */
}
.nav-item .dropdown-menu.dropdown-animated {
  transition: all var(--animation-duration);
}
.nav-item .dropdown-menu > li > a {
  display: block;
  padding: 0.5rem 1rem;
  clear: both;
  line-height: 1.42857143;
  white-space: nowrap;
}
.nav-item .dropdown-menu > li {
  margin: 0;
  transition: all 0.3s;
}
.nav-item .dropdown-menu > li:hover {
  transition: all 0.3s;
  background-color: rgba(216, 216, 216, 0.15);
}
.nav-item .dropdown-menu > li:active {
  transition: all 0.3s;
  background-color: rgba(216, 216, 216, 0.25);
}
.nav-item .dropdown-menu > li:last-child {
  margin-bottom: 0;
}
.nav-item .dropdown-menu .dropdown-menu-divider {
  border: none;
  background-color: rgba(216, 216, 216, 0.15);
  height: 1px;
  margin: 0.5rem 0;
}
.nav-item.has-sub .nav-dropdown-link {
  padding-right: 2.5rem;
  position: relative;
  /* Needed for hiding glyphs in mobile header */
  /* Dropdown menu location adjustment located below for sizes above phones */
  /* Dropdown menu indicator */
}
.nav-item.has-sub .nav-dropdown-link::after {
  border: 2px solid var(--cirrus-primary);
  /* Must be first to create the triangle shape */
  border-right: 0;
  /* Create the triangle effect */
  border-top: 0;
  display: block;
  height: 0.5em;
  width: 0.5em;
  content: ' ';
  transform: rotate(-45deg);
  pointer-events: none;
  margin-top: -0.435em;
  right: 1.125em;
  top: 50%;
  position: absolute;
}

/* Dark dropdown menu theme */
.nav-item .dropdown-menu.dropdown-dark,
.header.header-dark .dropdown-menu {
  background-color: rgba(0, 0, 0, 0.87);
  border: 1px solid #343a40;
  color: #fff;
}

.dropdown-menu.dropdown-shown,
.nav-item.active {
  opacity: 1;
}

@media screen and (min-width: 768px) {
  .header {
    align-items: stretch;
    display: flex;
    /* Align items to the left */
    /* Align items to the right */
    /* Centering items, best used when nav-brand is not used to prevent offset */
    /* Hide hamburger button */
  }
  .header .header-nav {
    flex-grow: 1;
    align-items: stretch;
    /* Make items fill up all available space regardless of width https://drafts.csswg.org/css-align/ */
    display: flex;
    position: relative;
    text-align: center;
    width: 100%;
    top: 0;
    overflow: visible;
    /* Only visible for showing dropdown menus, hidden for mobile */
  }
  .header .nav-left {
    align-items: stretch;
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 0;
    display: flex;
    justify-content: flex-start;
    white-space: nowrap;
    /* Align dropdown menu to the left side of the parent nav-item for header-left */
  }
  .header .nav-left .has-sub .dropdown-menu {
    left: 0;
    right: auto;
  }
  .header .nav-right {
    align-items: stretch;
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 0;
    display: flex;
    justify-content: flex-end;
    white-space: nowrap;
    /* Align dropdown menu to the right side of the parent nav-item for header-right */
  }
  .header .nav-right .has-sub .dropdown-menu {
    left: auto;
    right: 0;
  }
  .header .nav-center {
    align-items: stretch;
    display: flex;
    flex-grow: 0;
    flex-shrink: 0;
    justify-content: center;
    margin-left: auto;
    margin-right: auto;
  }
  .header .nav-btn {
    display: none;
  }
  .header .nav-item {
    /* Expand link area for desktop views so it is easier to click */
  }
  .header .nav-item a {
    padding: 0.5rem 1rem;
  }
  .header .nav-item .dropdown-menu {
    opacity: 0;
    pointer-events: none;
    /* Make cursor not respond to menu links when not displayed */
  }
  .header .nav-item .dropdown-menu.dropdown-animated {
    transform: translateY(-5px);
  }
  .header .nav-item .dropdown-menu.dropdown-shown,
  .header .nav-item.toggle-hover:hover .dropdown-menu,
  .header .nav-item .dropdown-menu.dropdown-animated.dropdown-shown {
    opacity: 1;
    transform: none;
    pointer-events: auto;
  }
}
@media screen and (max-width: 767px) {
  /* Add scrolling support in header */
  .header {
    flex-direction: column;
    /* Hide dropdown menu on mobile */
  }
  .header .header-brand .nav-item:first-child {
    padding: 0 1rem;
    /* Add padding to the first child, usually the logo */
  }
  .header .header-nav {
    height: 0;
    /* Show the dropdown */
    /* Make the menu items larger in the dropdown menu */
    /* Get rid of extra spaces */
  }
  .header .header-nav.active {
    height: 100vh;
  }
  .header .header-nav .nav-item {
    padding: 1rem;
  }
  .header .header-nav .nav-item > a {
    padding: 0;
    width: 100%;
    /* Stretch the link to span the entire list item */
  }

  /* Remove flex for mobile devices */
  .nav-item.has-sub {
    display: block;
  }
  .nav-item.has-sub .dropdown-menu {
    /* Hide the menu by default in mobile view (overflow on header-right can expose it) */
    display: none;
  }
  .nav-item.has-sub .dropdown-menu.dropdown-shown {
    border-radius: 0;
    box-shadow: none;
    display: block;
    position: relative;
    top: 1rem;
    float: none;
    border: none;
    background-color: transparent;
    margin-bottom: 1rem;
  }
  .nav-item.has-sub .dropdown-menu.dropdown-dark {
    background-color: rgba(0, 0, 0, 0.17);
    border: 0;
  }

  /* Hamburger button */
  .nav-btn {
    cursor: pointer;
    display: block;
    position: relative;
    margin-left: auto;
    /* Hamburger button on active */
  }
  .nav-btn span {
    background-color: var(--header-link-color);
    display: block;
    height: 2px;
    left: 50%;
    margin-left: -7px;
    position: absolute;
    top: 50%;
    transition: none 86ms ease-out;
    width: 15px;
    /* Line spacing in hamburger button */
  }
  .nav-btn span:nth-child(1) {
    margin-top: -6px;
  }
  .nav-btn span:nth-child(2) {
    margin-top: -1px;
  }
  .nav-btn span:nth-child(3) {
    margin-top: 4px;
  }
  .nav-btn.active span:nth-child(1) {
    margin-left: -5px;
    transform: rotate(45deg);
    transform-origin: left top;
  }
  .nav-btn.active span:nth-child(2) {
    opacity: 0;
  }
  .nav-btn.active span:nth-child(3) {
    margin-left: -5px;
    transform: rotate(-45deg);
    transform-origin: left bottom;
  }

  /* Hide drop down menu items */
  .nav-left,
  .nav-center,
  .nav-right {
    overflow: hidden;
  }

  /* No need for JS to show dropdown menu on mobile devices now */
  .header .nav-item.has-sub.toggle-hover:not(.no-hover):hover > .dropdown-menu {
    border-radius: 0;
    box-shadow: none;
    display: block;
    position: relative;
    top: 1rem;
    float: none;
    border: none;
    background-color: transparent;
    margin-bottom: 1rem;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Global Mixins
*/
/*
    Mixin that returns a property map as a series of CSS class properties.

    E.g. $xs: (color: #fff, opacity: 0.5), $sm... =>

    <class>--xs {
        color: #fff;
        opacity: 0.5;
    }
*/
/*
    Bring to front on focus.
*/
/* HEADER */
/* This works well with panel */
section {
  display: block;
}

.content {
  max-width: 48em;
  margin: 0 auto 1.5em;
  width: 100%;
}
@media screen and (min-width: 1024px) {
  .content {
    max-width: 64em;
  }
}
@media screen and (min-width: 1280px) {
  .content {
    max-width: 80em;
  }
}
@media screen and (min-width: 1536px) {
  .content {
    max-width: 96em;
  }
}

.fullscreen {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  min-height: 100vh;
}

/* This works well with spans and maybe even hr */
.divider {
  border-top: 0.05rem solid rgba(173, 181, 189, 0.5);
  height: 0.1rem;
  margin: 1.8rem 0 1.6rem;
  position: relative;
}
.divider[data-content] {
  margin: 0.8rem 0;
}
.divider--v[data-content]::after,
.divider[data-content]::after {
  background: #fff;
  color: #adb5bd;
  content: attr(data-content);
  left: 50%;
  display: inline-block;
  padding: 0 0.4rem;
  position: absolute;
  transform: translate(-50%, -50%);
  top: 50%;
}
.divider--v,
.divider--v[data-content] {
  display: block;
  padding: 0.8rem;
}
.divider--v::before,
.divider--v[data-content]::before {
  border-left: 0.05rem solid rgba(173, 181, 189, 0.5);
  bottom: 0.4rem;
  content: '';
  display: block;
  left: 50%;
  position: absolute;
  top: 0;
  transform: translateX(-50%);
}
.divider--v[data-content] {
  left: 50%;
  padding: 0.2rem 0;
  position: absolute;
  top: 50%;
  transform: translate(-50%, -50%);
}

/* Hero image div */
.hero-img {
  /* Specify the backgroud image yourself */
  background-size: cover;
}

.parallax-img {
  background-attachment: fixed !important;
}

.hero {
  /* Parent of hero-body */
  align-items: stretch;
  display: flex;
  /* Important to stretch height of hero-body */
  justify-content: space-between;
}
.hero .hero-body {
  flex-grow: 1;
  /* Tells the hero-body to take up the entire space */
  flex-shrink: 0;
  padding: 3rem 1.5rem;
  align-items: center;
  display: flex;
  width: 100%;
}

.space {
  display: block;
  width: 100%;
  height: 1rem;
}
.space.space--lg {
  padding: 1rem 0;
}
.space.space--xl {
  padding: 2rem 0;
}

/* Use for spacing out elements vertically */
.row {
  -ms-flex: 1;
  flex: 1;
  flex-wrap: wrap;
  padding: 0.5rem 0;
  display: flex;
  /* GRID */
  /* Auto align col to left in row */
  /* Auto align col to middle in row */
  /* Auto align col to right in row */
  /* Dividers for mobile layout */
  /* Base sizing where everything is 100% width */
  /* Column sizes for various viewports */
  /* Columns without the spacing */
}
.row::after {
  content: '';
  clear: both;
  display: table;
}
.row.row--no-wrap {
  flex-wrap: nowrap;
  overflow-x: auto;
  /* Can be disabled to remove scroll bar */
}
.row .col {
  display: block;
  flex: 1;
  padding: 0.15rem 0.75rem;
}
.row .offset-right {
  margin-left: 0;
  margin-right: auto;
}
.row .offset-center {
  margin-left: auto;
  margin-right: auto;
}
.row .offset-left {
  margin-left: auto;
  margin-right: 0;
}
.row.divided [class^='col'],
.row.divided [class*=' col'] {
  box-shadow: 0 -1px 0 0 rgba(173, 181, 189, 0.5);
}
.row [class^='col-'],
.row [class*=' col-'] {
  width: 100%;
  margin-left: 0;
  padding: 0 0.5rem;
}
@media screen and (min-width: 768px) {
  .row .col-1 {
    width: 8.3333333333%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-2 {
    width: 16.6666666667%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-3 {
    width: 25%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-4 {
    width: 33.3333333333%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-5 {
    width: 41.6666666667%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-6 {
    width: 50%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-7 {
    width: 58.3333333333%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-8 {
    width: 66.6666666667%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-9 {
    width: 75%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-10 {
    width: 83.3333333333%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-11 {
    width: 91.6666666667%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-12 {
    width: 100%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-1 {
    width: 8.3333333333%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-2 {
    width: 16.6666666667%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-3 {
    width: 25%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-4 {
    width: 33.3333333333%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-5 {
    width: 41.6666666667%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-6 {
    width: 50%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-7 {
    width: 58.3333333333%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-8 {
    width: 66.6666666667%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-9 {
    width: 75%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-10 {
    width: 83.3333333333%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-11 {
    width: 91.6666666667%;
  }
}
@media screen and (min-width: 640px) {
  .row .col-xs-12 {
    width: 100%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-1 {
    width: 8.3333333333%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-2 {
    width: 16.6666666667%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-3 {
    width: 25%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-4 {
    width: 33.3333333333%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-5 {
    width: 41.6666666667%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-6 {
    width: 50%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-7 {
    width: 58.3333333333%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-8 {
    width: 66.6666666667%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-9 {
    width: 75%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-10 {
    width: 83.3333333333%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-11 {
    width: 91.6666666667%;
  }
}
@media screen and (min-width: 768px) {
  .row .col-sm-12 {
    width: 100%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-1 {
    width: 8.3333333333%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-2 {
    width: 16.6666666667%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-3 {
    width: 25%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-4 {
    width: 33.3333333333%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-5 {
    width: 41.6666666667%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-6 {
    width: 50%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-7 {
    width: 58.3333333333%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-8 {
    width: 66.6666666667%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-9 {
    width: 75%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-10 {
    width: 83.3333333333%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-11 {
    width: 91.6666666667%;
  }
}
@media screen and (min-width: 1024px) {
  .row .col-md-12 {
    width: 100%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-1 {
    width: 8.3333333333%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-2 {
    width: 16.6666666667%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-3 {
    width: 25%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-4 {
    width: 33.3333333333%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-5 {
    width: 41.6666666667%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-6 {
    width: 50%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-7 {
    width: 58.3333333333%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-8 {
    width: 66.6666666667%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-9 {
    width: 75%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-10 {
    width: 83.3333333333%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-11 {
    width: 91.6666666667%;
  }
}
@media screen and (min-width: 1280px) {
  .row .col-lg-12 {
    width: 100%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-1 {
    width: 8.3333333333%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-2 {
    width: 16.6666666667%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-3 {
    width: 25%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-4 {
    width: 33.3333333333%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-5 {
    width: 41.6666666667%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-6 {
    width: 50%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-7 {
    width: 58.3333333333%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-8 {
    width: 66.6666666667%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-9 {
    width: 75%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-10 {
    width: 83.3333333333%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-11 {
    width: 91.6666666667%;
  }
}
@media screen and (min-width: 1536px) {
  .row .col-xl-12 {
    width: 100%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-1 {
    margin-left: 8.3333333333%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-2 {
    margin-left: 16.6666666667%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-3 {
    margin-left: 25%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-4 {
    margin-left: 33.3333333333%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-5 {
    margin-left: 41.6666666667%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-6 {
    margin-left: 50%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-7 {
    margin-left: 58.3333333333%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-8 {
    margin-left: 66.6666666667%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-9 {
    margin-left: 75%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-10 {
    margin-left: 83.3333333333%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-11 {
    margin-left: 91.6666666667%;
  }
}
@media screen and (min-width: 640px) {
  .row .offset-12 {
    margin-left: 100%;
  }
}
.row.no-space [class^='col-'],
.row.no-space [class*=' col-'] {
  padding: 0;
}

.r {
  /* Legacy row pre 0.5.5 */
  max-width: 100%;
  padding: 0.5rem;
}

.level {
  align-items: center;
  justify-content: space-between;
  /* Used to stretch the contents of div in level to fill */
}
.level .level-item {
  /* Centers items */
  align-items: center;
  display: flex;
  -ms-flex-preferred-size: auto;
  flex-basis: auto;
  flex-grow: 0;
  flex-shrink: 0;
  justify-content: center;
}
.level .level-content {
  flex-basis: auto;
  flex-grow: 1;
  flex-shrink: 1;
  text-align: left;
  width: 100%;
}

/* Width/Height CSS */
.h-10 {
  height: 10% !important;
}

.h-20 {
  height: 20% !important;
}

.h-30 {
  height: 30% !important;
}

.h-40 {
  height: 40% !important;
}

.h-50 {
  height: 50% !important;
}

.h-60 {
  height: 60% !important;
}

.h-70 {
  height: 70% !important;
}

.h-80 {
  height: 80% !important;
}

.h-90 {
  height: 90% !important;
}

.h-100 {
  height: 100% !important;
}

.h-auto {
  height: auto !important;
}

.h-screen {
  height: 100vh !important;
}

@media screen and (min-width: 640px) {
  .h-10-sm {
    height: 10% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-20-sm {
    height: 20% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-30-sm {
    height: 30% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-40-sm {
    height: 40% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-50-sm {
    height: 50% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-60-sm {
    height: 60% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-70-sm {
    height: 70% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-80-sm {
    height: 80% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-90-sm {
    height: 90% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-100-sm {
    height: 100% !important;
  }
}
@media screen and (min-width: 640px) {
  .h-auto-sm {
    height: auto !important;
  }
}
@media screen and (min-width: 640px) {
  .h-screen-sm {
    height: 100vh !important;
  }
}
@media screen and (min-width: 768px) {
  .h-10-md {
    height: 10% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-20-md {
    height: 20% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-30-md {
    height: 30% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-40-md {
    height: 40% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-50-md {
    height: 50% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-60-md {
    height: 60% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-70-md {
    height: 70% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-80-md {
    height: 80% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-90-md {
    height: 90% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-100-md {
    height: 100% !important;
  }
}
@media screen and (min-width: 768px) {
  .h-auto-md {
    height: auto !important;
  }
}
@media screen and (min-width: 768px) {
  .h-screen-md {
    height: 100vh !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-10-lg {
    height: 10% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-20-lg {
    height: 20% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-30-lg {
    height: 30% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-40-lg {
    height: 40% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-50-lg {
    height: 50% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-60-lg {
    height: 60% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-70-lg {
    height: 70% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-80-lg {
    height: 80% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-90-lg {
    height: 90% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-100-lg {
    height: 100% !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-auto-lg {
    height: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  .h-screen-lg {
    height: 100vh !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-10-xl {
    height: 10% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-20-xl {
    height: 20% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-30-xl {
    height: 30% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-40-xl {
    height: 40% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-50-xl {
    height: 50% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-60-xl {
    height: 60% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-70-xl {
    height: 70% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-80-xl {
    height: 80% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-90-xl {
    height: 90% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-100-xl {
    height: 100% !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-auto-xl {
    height: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  .h-screen-xl {
    height: 100vh !important;
  }
}
.w-10 {
  width: 10% !important;
}

.w-20 {
  width: 20% !important;
}

.w-30 {
  width: 30% !important;
}

.w-40 {
  width: 40% !important;
}

.w-50 {
  width: 50% !important;
}

.w-60 {
  width: 60% !important;
}

.w-70 {
  width: 70% !important;
}

.w-80 {
  width: 80% !important;
}

.w-90 {
  width: 90% !important;
}

.w-100 {
  width: 100% !important;
}

.w-auto {
  width: auto !important;
}

.w-screen {
  width: 100vw !important;
}

@media screen and (min-width: 640px) {
  .w-10-sm {
    width: 10% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-20-sm {
    width: 20% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-30-sm {
    width: 30% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-40-sm {
    width: 40% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-50-sm {
    width: 50% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-60-sm {
    width: 60% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-70-sm {
    width: 70% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-80-sm {
    width: 80% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-90-sm {
    width: 90% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-100-sm {
    width: 100% !important;
  }
}
@media screen and (min-width: 640px) {
  .w-auto-sm {
    width: auto !important;
  }
}
@media screen and (min-width: 640px) {
  .w-screen-sm {
    width: 100vw !important;
  }
}
@media screen and (min-width: 768px) {
  .w-10-md {
    width: 10% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-20-md {
    width: 20% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-30-md {
    width: 30% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-40-md {
    width: 40% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-50-md {
    width: 50% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-60-md {
    width: 60% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-70-md {
    width: 70% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-80-md {
    width: 80% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-90-md {
    width: 90% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-100-md {
    width: 100% !important;
  }
}
@media screen and (min-width: 768px) {
  .w-auto-md {
    width: auto !important;
  }
}
@media screen and (min-width: 768px) {
  .w-screen-md {
    width: 100vw !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-10-lg {
    width: 10% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-20-lg {
    width: 20% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-30-lg {
    width: 30% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-40-lg {
    width: 40% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-50-lg {
    width: 50% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-60-lg {
    width: 60% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-70-lg {
    width: 70% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-80-lg {
    width: 80% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-90-lg {
    width: 90% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-100-lg {
    width: 100% !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-auto-lg {
    width: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  .w-screen-lg {
    width: 100vw !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-10-xl {
    width: 10% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-20-xl {
    width: 20% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-30-xl {
    width: 30% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-40-xl {
    width: 40% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-50-xl {
    width: 50% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-60-xl {
    width: 60% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-70-xl {
    width: 70% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-80-xl {
    width: 80% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-90-xl {
    width: 90% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-100-xl {
    width: 100% !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-auto-xl {
    width: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  .w-screen-xl {
    width: 100vw !important;
  }
}
.min-h-none {
  min-height: none !important;
}

.min-h-xs {
  min-height: 640px !important;
}

.min-h-sm {
  min-height: 768px !important;
}

.min-h-md {
  min-height: 1024px !important;
}

.min-h-lg {
  min-height: 1280px !important;
}

.min-h-xl {
  min-height: 1536px !important;
}

.min-h-10 {
  min-height: 10% !important;
}

.min-h-20 {
  min-height: 20% !important;
}

.min-h-30 {
  min-height: 30% !important;
}

.min-h-40 {
  min-height: 40% !important;
}

.min-h-50 {
  min-height: 50% !important;
}

.min-h-60 {
  min-height: 60% !important;
}

.min-h-70 {
  min-height: 70% !important;
}

.min-h-80 {
  min-height: 80% !important;
}

.min-h-90 {
  min-height: 90% !important;
}

.min-h-100 {
  min-height: 100% !important;
}

.min-h-screen {
  min-height: 100vh !important;
}

.min-w-none {
  min-width: none !important;
}

.min-w-xs {
  min-width: 640px !important;
}

.min-w-sm {
  min-width: 768px !important;
}

.min-w-md {
  min-width: 1024px !important;
}

.min-w-lg {
  min-width: 1280px !important;
}

.min-w-xl {
  min-width: 1536px !important;
}

.min-w-10 {
  min-width: 10% !important;
}

.min-w-20 {
  min-width: 20% !important;
}

.min-w-30 {
  min-width: 30% !important;
}

.min-w-40 {
  min-width: 40% !important;
}

.min-w-50 {
  min-width: 50% !important;
}

.min-w-60 {
  min-width: 60% !important;
}

.min-w-70 {
  min-width: 70% !important;
}

.min-w-80 {
  min-width: 80% !important;
}

.min-w-90 {
  min-width: 90% !important;
}

.min-w-100 {
  min-width: 100% !important;
}

.min-w-screen {
  min-width: 100vh !important;
}

.max-h-none {
  max-height: none !important;
}

.max-h-xs {
  max-height: 640px !important;
}

.max-h-sm {
  max-height: 768px !important;
}

.max-h-md {
  max-height: 1024px !important;
}

.max-h-lg {
  max-height: 1280px !important;
}

.max-h-xl {
  max-height: 1536px !important;
}

.max-h-10 {
  max-height: 10% !important;
}

.max-h-20 {
  max-height: 20% !important;
}

.max-h-30 {
  max-height: 30% !important;
}

.max-h-40 {
  max-height: 40% !important;
}

.max-h-50 {
  max-height: 50% !important;
}

.max-h-60 {
  max-height: 60% !important;
}

.max-h-70 {
  max-height: 70% !important;
}

.max-h-80 {
  max-height: 80% !important;
}

.max-h-90 {
  max-height: 90% !important;
}

.max-h-100 {
  max-height: 100% !important;
}

.max-h-screen {
  max-height: 100vh !important;
}

.max-w-none {
  max-width: none !important;
}

.max-w-xs {
  max-width: 640px !important;
}

.max-w-sm {
  max-width: 768px !important;
}

.max-w-md {
  max-width: 1024px !important;
}

.max-w-lg {
  max-width: 1280px !important;
}

.max-w-xl {
  max-width: 1536px !important;
}

.max-w-10 {
  max-width: 10% !important;
}

.max-w-20 {
  max-width: 20% !important;
}

.max-w-30 {
  max-width: 30% !important;
}

.max-w-40 {
  max-width: 40% !important;
}

.max-w-50 {
  max-width: 50% !important;
}

.max-w-60 {
  max-width: 60% !important;
}

.max-w-70 {
  max-width: 70% !important;
}

.max-w-80 {
  max-width: 80% !important;
}

.max-w-90 {
  max-width: 90% !important;
}

.max-w-100 {
  max-width: 100% !important;
}

.max-w-screen {
  max-width: 100vh !important;
}

/* Do the actual balancing only on larger screens */
@media screen and (min-width: 768px) {
  .level,
  .level-left,
  .level-right {
    display: flex;
  }
}

@media screen and (max-width: 767px) {
  .level-right {
    margin-left: 1rem;
  }

  /* Keep all level children the same height */
  .level.fill-height {
    align-items: stretch;
    display: flex;
  }
}
/* MOBILE */
@media screen and (max-width: 767px) {
  .container {
    width: 100%;
  }

  .row {
    margin-top: 0;
  }

  /* Dividers for mobile layout */
  .divided > .row [class^='col-'],
  .divided > .row [class*=' col-'] {
    box-shadow: 0 -1px 0 0 rgba(34, 36, 38, 0.15);
  }

  .level.fill-height {
    display: inherit;
    /* Allow children to expand */
  }

  .hero-body {
    padding: 0;
  }
}
/*
    Group selectors that share common styling.
*/
/* LINKS */
a {
  color: var(--cirrus-link);
  font-weight: 600;
  padding: 2px;
  text-decoration: none;
  transition: all 0.3s;
}
a:hover {
  color: var(--cirrus-link-dark);
  transition: all 0.3s;
}
a.underline {
  text-decoration: underline;
}

.subtitle a {
  padding: 0;
  /* Removes weird offset in subtitle links */
}

h1 a,
h2 a,
h3 a,
h4 a,
h5 a,
h6 a,
article a,
blockquote a {
  display: inline;
}

/* Remove uneeded space since buttons have their own padding */
a .btn,
a button,
[type='submit'] a {
  margin-bottom: 0;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* LISTS */
ul,
ol {
  margin: 1rem 0 1rem 1rem;
  padding-inline-start: 0.5rem;
  /* Handle nesting */
}
ul ul,
ul ol,
ol ul,
ol ol {
  margin: 0 0 0 1rem;
}

ul {
  list-style: disc;
  /* Nested list bullet types */
}
ul ul {
  list-style-type: circle;
}
ul ul ul {
  list-style-type: square;
}

ol ol {
  list-style: lower-alpha;
}

ol ol ol {
  list-style: upper-roman;
}

/* Description lists */
dl {
  margin: 1rem 0;
}

/* Detail title */
dt {
  font-weight: 700;
}

dd {
  margin-bottom: 0.5rem;
}

li {
  margin: 0.25rem 0;
}

/* MISC */
ul {
  /* MENU LISTS */
  /* Style headers to have even space distribution. */
  /* Style menu items */
  /* Style sub menus inside a menu */
  /* Menu item divider */
  /* Title for the section separated by the divider */
}
ul.no-bullets {
  list-style: none;
}
ul.menu {
  font-size: 1rem;
  list-style: none;
  margin: 0.5rem 0;
}
ul .menu-title:not(:first-child) {
  margin-bottom: 1rem;
}
ul .menu-title:not(:last-child) {
  margin-top: 1rem;
}
ul .menu-item a {
  color: #495057;
  display: block;
  padding: 0.5em 0.75em;
  border-radius: 3px;
  font-size: var(--font-size-s);
  cursor: pointer;
  transition: all var(--animation-duration);
}
ul .menu-item:hover > a {
  background-color: rgba(208, 208, 208, 0.3);
  color: var(--cirrus-primary);
  transition: all var(--animation-duration);
}
ul .menu-item.selected > a {
  color: #fff;
  background-color: var(--cirrus-primary);
}
ul .menu-item .menu-addon {
  padding: 0.3rem;
  z-index: 1;
  position: relative;
  color: var(--cirrus-fg);
  cursor: pointer;
  float: left;
  margin-right: 0.1rem;
  transition: all var(--animation-duration);
}
ul .menu-item .menu-addon .icon {
  font-size: inherit;
  vertical-align: auto;
}
ul .menu-item .menu-addon:hover {
  transition: all var(--animation-duration);
}
ul .menu-item .menu-addon.right {
  float: right;
  margin-right: 0;
  margin-left: 0.1rem;
}
ul .menu-item.selected .menu-addon {
  color: #fff;
}
ul .menu-item ul {
  border-left: 1px solid #dee2e6;
  margin: 0.75rem;
  padding-left: 0.75rem;
}
ul .divider {
  border-top: 0.1rem solid #e9ecef;
  height: 0.1rem;
  margin: 1rem 0;
}
ul .divider::after {
  content: attr(data-label);
  /* Text that will be displayed */
  background-color: var(--cirrus-bg);
  color: #adb5bd;
  display: inline-block;
  padding: 0 0.7rem;
  margin: 0.5rem;
  font-size: 0.7rem;
  transform: translateY(-1.1rem);
}

/* Dropdown menu for dropdown buttons */
.list-dropdown {
  display: inline-block;
  position: relative;
  /* Allow for shown and :focus selectors for JS and native CSS transitions */
}
.list-dropdown .menu {
  position: absolute;
  top: 75%;
  left: 0;
  animation: slide-down var(--animation-duration) ease 1;
  background-color: var(--cirrus-bg);
  border-radius: 0.2rem;
  box-shadow: 0 1rem 3rem rgba(149, 157, 165, 0.3);
  margin: 0;
  opacity: 0;
  min-width: 15rem;
  padding: 0.25rem 0.5rem;
  transform: translateY(0.5rem);
  z-index: 10;
  pointer-events: none;
  /* Remove pointer events to prevent mouse hover to show menu even though it is not visible */
  overflow: hidden;
  transition: all var(--animation-duration);
}
@media screen and (max-width: 767px) {
  .list-dropdown .menu {
    height: 0;
    padding: 0 !important;
    position: relative;
  }
}
.list-dropdown.dropdown-right .menu {
  left: auto;
  right: 0;
}
.list-dropdown.shown .menu,
.list-dropdown .btn-dropdown:focus + .menu,
.list-dropdown .menu:hover {
  display: block;
  opacity: 1;
  top: 100%;
  z-index: 100;
  pointer-events: auto;
  /* Restore pointer events */
  height: auto;
  transition: all var(--animation-duration);
}
.list-dropdown .btn-group .btn-dropdown:nth-last-child(2) {
  border-bottom-right-radius: 3px;
  border-top-right-radius: 3px;
}

/* TREE */
/* Tree Navigation Menu */
.tree {
  margin: 0;
}
.tree .tree-item {
  /* The title of the tree menu */
  /* The dropdown glyph of the tree menu */
  /* Expand the tree-item-body (has menu-items) */
  /* Rotate the dropdown glyph */
  /* Container for the menu-items of the tree menu */
}
.tree .tree-item .tree-item-header {
  display: block;
  padding: 0.25rem 0.5rem;
  cursor: pointer;
  font-weight: 700;
  /* Keep styling consistent with menu-items */
}
.tree .tree-item .tree-item-header .icon {
  transition: all var(--animation-duration);
}
.tree .tree-item input:checked ~ .tree-item-body {
  max-height: 100vh;
}
.tree .tree-item input:checked ~ .tree-item-header .icon {
  transform: rotate(90deg);
}
.tree .tree-item .tree-item-body {
  max-height: 0;
  /* Hidden at first */
  margin-left: 1.5rem;
  overflow: hidden;
  transition: all var(--animation-duration);
}

/* The body that will encompass the tree-nav and tree-nav-content */
.tree-nav-body {
  display: flex;
  height: 100vh;
  flex-wrap: nowrap;
  /* A fixed menu on the side with a tree component */
  /* The container for the tree component to prevent it from overflowing */
  /* Darkened area that will close the navbar when clicked for mobile only */
  /* Push document body further right to account for sidebar space */
  /* The body where all other HTML components are entered if a tree-nav is used */
}
.tree-nav-body .tree-nav {
  flex-grow: 0;
  flex-shrink: 1;
  padding: 2rem 1rem 2rem 2rem;
  min-width: 15rem;
  height: 100vh;
  overflow: auto;
}
.tree-nav-body .tree-nav-container {
  overflow-y: auto;
  top: 4rem;
  bottom: 1rem;
}
.tree-nav-body + .tree-nav-close {
  display: none;
  /* Not needed in desktop */
}
.tree-nav-body + .tree-nav-content {
  max-width: 100%;
  padding: 2rem;
  flex: 1 0 auto;
  overflow: auto;
  margin: 0;
}
.tree-nav-body .tree-nav-content {
  width: 100%;
  overflow: auto;
  margin: 0;
  padding: 2rem;
}

@media screen and (max-width: 767px) {
  /* Hide the menu to the side by default */
  .tree-nav {
    height: 100%;
    left: 0;
    overflow-y: auto;
    padding: 3rem 1.5rem;
    position: fixed;
    top: 0;
    transform: translateX(-100%);
    transition: transform var(--animation-duration) ease;
    z-index: 400;
    /* Open the menu from the side */
    /* Use a link and add the id of this element as the url */
    /* Create the area to click to close the menu */
    /* Reset max-width in mobile */
  }
  .tree-nav:target {
    transform: translateX(0);
    transition: transform var(--animation-duration) ease;
    /* Show the darkened area when the tree nav menu is clicked */
  }
  .tree-nav:target + .tree-nav-close {
    display: block;
    background-color: rgba(0, 0, 0, 0.15);
    height: 100%;
    left: 0;
    position: fixed;
    right: 0;
    top: 0;
    width: 100%;
    z-index: 300;
  }
  .tree-nav .tree-nav-close {
    background-color: rgba(0, 0, 0, 0.15);
    display: none;
    height: 100%;
    left: 0;
    position: fixed;
    right: 0;
    top: 0;
    width: 100%;
    z-index: 300;
  }
  .tree-nav + .tree-nav-body {
    max-width: inherit;
  }

  /* Header bar for mobile websites with the tree-nav */
  .tree-nav-header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background-color: rgba(248, 249, 250, 0.8);
    height: 3.5rem;
    padding: 0.75rem 0.5rem;
    text-align: center;
    z-index: 300;
  }

  /* For dropdown menu used in header (different from header dropdown) */
  .nav-item.has-sub .list-dropdown {
    width: 100%;
  }
  .nav-item.has-sub .list-dropdown .btn-group {
    width: 100%;
  }
  .nav-item.has-sub .list-dropdown .btn-group .btn-dropdown {
    flex-grow: 0;
  }

  /* Show the dropdown menu in mobile hamburger menu relative with the header menu */
  .list-dropdown .btn-dropdown:focus + .menu {
    position: relative;
    width: 100%;
  }
}
/* MEDIA CSS */
/* Handles images, videos, figures, etc */
video.video-fullscreen {
  position: absolute;
  height: 100vh;
  object-fit: cover;
  width: 100%;
  z-index: -1;
}

/* Add to parent container to make media child fill container */
.media-stretch {
  display: block;
  padding: 0;
  overflow: hidden;
  width: 100%;
  position: relative;
  /* Add pseudoclass to allow media to have height (default height is 0) */
  /* Force media embed to fill parent container */
  /* Alternate media ratios */
  /* For HTML5 video objects */
}
.media-stretch::before {
  content: '';
  display: block;
  padding-bottom: 56.25%;
  /* 9 / 16  for 16:9 ratio */
}
.media-stretch iframe,
.media-stretch embed,
.media-stretch object {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100%;
  /* Make sure media does exceed or go under boundary limit */
  height: 100%;
}
.media-stretch.rat-4-3::before {
  padding-bottom: 75%;
}
.media-stretch.rat-1-1::before {
  padding-bottom: 100%;
}
.media-stretch video {
  height: auto;
  max-width: 100%;
  width: 100%;
}

/* FIGURES */
/* For flexible media display */
.fig {
  margin: 0 0 0.5rem 0;
  /* Small margin at the bottom */
}
.fig .fig-caption {
  margin-top: 1rem;
}

/* IMAGES */
.img-stretch {
  max-width: 100%;
  height: auto;
  display: block;
}

.img-cover {
  object-fit: cover;
}

.img-contain {
  object-fit: contain;
}
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Margin */
.m-0 {
  margin: calc(var(--space-size) * 0) !important;
}

.mt-0,
.my-0 {
  margin-top: calc(var(--space-size) * 0) !important;
}

.mb-0,
.my-0 {
  margin-bottom: calc(var(--space-size) * 0) !important;
}

.ml-0,
.mx-0 {
  margin-left: calc(var(--space-size) * 0) !important;
}

.mr-0,
.mx-0 {
  margin-right: calc(var(--space-size) * 0) !important;
}

/* Spacing */
.p-0 {
  padding: calc(var(--space-size) * 0) !important;
}

.pt-0,
.py-0 {
  padding-top: calc(var(--space-size) * 0) !important;
}

.pb-0,
.py-0 {
  padding-bottom: calc(var(--space-size) * 0) !important;
}

.pl-0,
.px-0 {
  padding-left: calc(var(--space-size) * 0) !important;
}

.pr-0,
.px-0 {
  padding-right: calc(var(--space-size) * 0) !important;
}

/* Margin */
.m-1 {
  margin: calc(var(--space-size) * 1) !important;
}

.mt-1,
.my-1 {
  margin-top: calc(var(--space-size) * 1) !important;
}

.mb-1,
.my-1 {
  margin-bottom: calc(var(--space-size) * 1) !important;
}

.ml-1,
.mx-1 {
  margin-left: calc(var(--space-size) * 1) !important;
}

.mr-1,
.mx-1 {
  margin-right: calc(var(--space-size) * 1) !important;
}

/* Spacing */
.p-1 {
  padding: calc(var(--space-size) * 1) !important;
}

.pt-1,
.py-1 {
  padding-top: calc(var(--space-size) * 1) !important;
}

.pb-1,
.py-1 {
  padding-bottom: calc(var(--space-size) * 1) !important;
}

.pl-1,
.px-1 {
  padding-left: calc(var(--space-size) * 1) !important;
}

.pr-1,
.px-1 {
  padding-right: calc(var(--space-size) * 1) !important;
}

/* Margin */
.m-2 {
  margin: calc(var(--space-size) * 2) !important;
}

.mt-2,
.my-2 {
  margin-top: calc(var(--space-size) * 2) !important;
}

.mb-2,
.my-2 {
  margin-bottom: calc(var(--space-size) * 2) !important;
}

.ml-2,
.mx-2 {
  margin-left: calc(var(--space-size) * 2) !important;
}

.mr-2,
.mx-2 {
  margin-right: calc(var(--space-size) * 2) !important;
}

/* Spacing */
.p-2 {
  padding: calc(var(--space-size) * 2) !important;
}

.pt-2,
.py-2 {
  padding-top: calc(var(--space-size) * 2) !important;
}

.pb-2,
.py-2 {
  padding-bottom: calc(var(--space-size) * 2) !important;
}

.pl-2,
.px-2 {
  padding-left: calc(var(--space-size) * 2) !important;
}

.pr-2,
.px-2 {
  padding-right: calc(var(--space-size) * 2) !important;
}

/* Margin */
.m-3 {
  margin: calc(var(--space-size) * 3) !important;
}

.mt-3,
.my-3 {
  margin-top: calc(var(--space-size) * 3) !important;
}

.mb-3,
.my-3 {
  margin-bottom: calc(var(--space-size) * 3) !important;
}

.ml-3,
.mx-3 {
  margin-left: calc(var(--space-size) * 3) !important;
}

.mr-3,
.mx-3 {
  margin-right: calc(var(--space-size) * 3) !important;
}

/* Spacing */
.p-3 {
  padding: calc(var(--space-size) * 3) !important;
}

.pt-3,
.py-3 {
  padding-top: calc(var(--space-size) * 3) !important;
}

.pb-3,
.py-3 {
  padding-bottom: calc(var(--space-size) * 3) !important;
}

.pl-3,
.px-3 {
  padding-left: calc(var(--space-size) * 3) !important;
}

.pr-3,
.px-3 {
  padding-right: calc(var(--space-size) * 3) !important;
}

/* Margin */
.m-4 {
  margin: calc(var(--space-size) * 4) !important;
}

.mt-4,
.my-4 {
  margin-top: calc(var(--space-size) * 4) !important;
}

.mb-4,
.my-4 {
  margin-bottom: calc(var(--space-size) * 4) !important;
}

.ml-4,
.mx-4 {
  margin-left: calc(var(--space-size) * 4) !important;
}

.mr-4,
.mx-4 {
  margin-right: calc(var(--space-size) * 4) !important;
}

/* Spacing */
.p-4 {
  padding: calc(var(--space-size) * 4) !important;
}

.pt-4,
.py-4 {
  padding-top: calc(var(--space-size) * 4) !important;
}

.pb-4,
.py-4 {
  padding-bottom: calc(var(--space-size) * 4) !important;
}

.pl-4,
.px-4 {
  padding-left: calc(var(--space-size) * 4) !important;
}

.pr-4,
.px-4 {
  padding-right: calc(var(--space-size) * 4) !important;
}

/* Margin */
.m-5 {
  margin: calc(var(--space-size) * 5) !important;
}

.mt-5,
.my-5 {
  margin-top: calc(var(--space-size) * 5) !important;
}

.mb-5,
.my-5 {
  margin-bottom: calc(var(--space-size) * 5) !important;
}

.ml-5,
.mx-5 {
  margin-left: calc(var(--space-size) * 5) !important;
}

.mr-5,
.mx-5 {
  margin-right: calc(var(--space-size) * 5) !important;
}

/* Spacing */
.p-5 {
  padding: calc(var(--space-size) * 5) !important;
}

.pt-5,
.py-5 {
  padding-top: calc(var(--space-size) * 5) !important;
}

.pb-5,
.py-5 {
  padding-bottom: calc(var(--space-size) * 5) !important;
}

.pl-5,
.px-5 {
  padding-left: calc(var(--space-size) * 5) !important;
}

.pr-5,
.px-5 {
  padding-right: calc(var(--space-size) * 5) !important;
}

/* Margin */
.m-6 {
  margin: calc(var(--space-size) * 6) !important;
}

.mt-6,
.my-6 {
  margin-top: calc(var(--space-size) * 6) !important;
}

.mb-6,
.my-6 {
  margin-bottom: calc(var(--space-size) * 6) !important;
}

.ml-6,
.mx-6 {
  margin-left: calc(var(--space-size) * 6) !important;
}

.mr-6,
.mx-6 {
  margin-right: calc(var(--space-size) * 6) !important;
}

/* Spacing */
.p-6 {
  padding: calc(var(--space-size) * 6) !important;
}

.pt-6,
.py-6 {
  padding-top: calc(var(--space-size) * 6) !important;
}

.pb-6,
.py-6 {
  padding-bottom: calc(var(--space-size) * 6) !important;
}

.pl-6,
.px-6 {
  padding-left: calc(var(--space-size) * 6) !important;
}

.pr-6,
.px-6 {
  padding-right: calc(var(--space-size) * 6) !important;
}

/* Margin */
.m-8 {
  margin: calc(var(--space-size) * 8) !important;
}

.mt-8,
.my-8 {
  margin-top: calc(var(--space-size) * 8) !important;
}

.mb-8,
.my-8 {
  margin-bottom: calc(var(--space-size) * 8) !important;
}

.ml-8,
.mx-8 {
  margin-left: calc(var(--space-size) * 8) !important;
}

.mr-8,
.mx-8 {
  margin-right: calc(var(--space-size) * 8) !important;
}

/* Spacing */
.p-8 {
  padding: calc(var(--space-size) * 8) !important;
}

.pt-8,
.py-8 {
  padding-top: calc(var(--space-size) * 8) !important;
}

.pb-8,
.py-8 {
  padding-bottom: calc(var(--space-size) * 8) !important;
}

.pl-8,
.px-8 {
  padding-left: calc(var(--space-size) * 8) !important;
}

.pr-8,
.px-8 {
  padding-right: calc(var(--space-size) * 8) !important;
}

/* Margin */
.m-10 {
  margin: calc(var(--space-size) * 10) !important;
}

.mt-10,
.my-10 {
  margin-top: calc(var(--space-size) * 10) !important;
}

.mb-10,
.my-10 {
  margin-bottom: calc(var(--space-size) * 10) !important;
}

.ml-10,
.mx-10 {
  margin-left: calc(var(--space-size) * 10) !important;
}

.mr-10,
.mx-10 {
  margin-right: calc(var(--space-size) * 10) !important;
}

/* Spacing */
.p-10 {
  padding: calc(var(--space-size) * 10) !important;
}

.pt-10,
.py-10 {
  padding-top: calc(var(--space-size) * 10) !important;
}

.pb-10,
.py-10 {
  padding-bottom: calc(var(--space-size) * 10) !important;
}

.pl-10,
.px-10 {
  padding-left: calc(var(--space-size) * 10) !important;
}

.pr-10,
.px-10 {
  padding-right: calc(var(--space-size) * 10) !important;
}

/* Margin */
.m-12 {
  margin: calc(var(--space-size) * 12) !important;
}

.mt-12,
.my-12 {
  margin-top: calc(var(--space-size) * 12) !important;
}

.mb-12,
.my-12 {
  margin-bottom: calc(var(--space-size) * 12) !important;
}

.ml-12,
.mx-12 {
  margin-left: calc(var(--space-size) * 12) !important;
}

.mr-12,
.mx-12 {
  margin-right: calc(var(--space-size) * 12) !important;
}

/* Spacing */
.p-12 {
  padding: calc(var(--space-size) * 12) !important;
}

.pt-12,
.py-12 {
  padding-top: calc(var(--space-size) * 12) !important;
}

.pb-12,
.py-12 {
  padding-bottom: calc(var(--space-size) * 12) !important;
}

.pl-12,
.px-12 {
  padding-left: calc(var(--space-size) * 12) !important;
}

.pr-12,
.px-12 {
  padding-right: calc(var(--space-size) * 12) !important;
}

/* Margin */
.m-16 {
  margin: calc(var(--space-size) * 16) !important;
}

.mt-16,
.my-16 {
  margin-top: calc(var(--space-size) * 16) !important;
}

.mb-16,
.my-16 {
  margin-bottom: calc(var(--space-size) * 16) !important;
}

.ml-16,
.mx-16 {
  margin-left: calc(var(--space-size) * 16) !important;
}

.mr-16,
.mx-16 {
  margin-right: calc(var(--space-size) * 16) !important;
}

/* Spacing */
.p-16 {
  padding: calc(var(--space-size) * 16) !important;
}

.pt-16,
.py-16 {
  padding-top: calc(var(--space-size) * 16) !important;
}

.pb-16,
.py-16 {
  padding-bottom: calc(var(--space-size) * 16) !important;
}

.pl-16,
.px-16 {
  padding-left: calc(var(--space-size) * 16) !important;
}

.pr-16,
.px-16 {
  padding-right: calc(var(--space-size) * 16) !important;
}

/* Margin */
.m-20 {
  margin: calc(var(--space-size) * 20) !important;
}

.mt-20,
.my-20 {
  margin-top: calc(var(--space-size) * 20) !important;
}

.mb-20,
.my-20 {
  margin-bottom: calc(var(--space-size) * 20) !important;
}

.ml-20,
.mx-20 {
  margin-left: calc(var(--space-size) * 20) !important;
}

.mr-20,
.mx-20 {
  margin-right: calc(var(--space-size) * 20) !important;
}

/* Spacing */
.p-20 {
  padding: calc(var(--space-size) * 20) !important;
}

.pt-20,
.py-20 {
  padding-top: calc(var(--space-size) * 20) !important;
}

.pb-20,
.py-20 {
  padding-bottom: calc(var(--space-size) * 20) !important;
}

.pl-20,
.px-20 {
  padding-left: calc(var(--space-size) * 20) !important;
}

.pr-20,
.px-20 {
  padding-right: calc(var(--space-size) * 20) !important;
}

/* Margin */
.m-24 {
  margin: calc(var(--space-size) * 24) !important;
}

.mt-24,
.my-24 {
  margin-top: calc(var(--space-size) * 24) !important;
}

.mb-24,
.my-24 {
  margin-bottom: calc(var(--space-size) * 24) !important;
}

.ml-24,
.mx-24 {
  margin-left: calc(var(--space-size) * 24) !important;
}

.mr-24,
.mx-24 {
  margin-right: calc(var(--space-size) * 24) !important;
}

/* Spacing */
.p-24 {
  padding: calc(var(--space-size) * 24) !important;
}

.pt-24,
.py-24 {
  padding-top: calc(var(--space-size) * 24) !important;
}

.pb-24,
.py-24 {
  padding-bottom: calc(var(--space-size) * 24) !important;
}

.pl-24,
.px-24 {
  padding-left: calc(var(--space-size) * 24) !important;
}

.pr-24,
.px-24 {
  padding-right: calc(var(--space-size) * 24) !important;
}

/* Margin */
.m-32 {
  margin: calc(var(--space-size) * 32) !important;
}

.mt-32,
.my-32 {
  margin-top: calc(var(--space-size) * 32) !important;
}

.mb-32,
.my-32 {
  margin-bottom: calc(var(--space-size) * 32) !important;
}

.ml-32,
.mx-32 {
  margin-left: calc(var(--space-size) * 32) !important;
}

.mr-32,
.mx-32 {
  margin-right: calc(var(--space-size) * 32) !important;
}

/* Spacing */
.p-32 {
  padding: calc(var(--space-size) * 32) !important;
}

.pt-32,
.py-32 {
  padding-top: calc(var(--space-size) * 32) !important;
}

.pb-32,
.py-32 {
  padding-bottom: calc(var(--space-size) * 32) !important;
}

.pl-32,
.px-32 {
  padding-left: calc(var(--space-size) * 32) !important;
}

.pr-32,
.px-32 {
  padding-right: calc(var(--space-size) * 32) !important;
}

.ml-auto,
.mx-auto {
  margin-left: auto !important;
}

.mr-auto,
.mx-auto {
  margin-right: auto !important;
}

.mt-auto,
.my-auto {
  margin-top: auto !important;
}

.mb-auto,
.my-auto {
  margin-bottom: auto !important;
}

@media screen and (min-width: 640px) {
  /* Margin */
  .m-0-sm {
    margin: calc(var(--space-size) * 0) !important;
  }

  .mt-0-sm,
  .my-0-sm {
    margin-top: calc(var(--space-size) * 0) !important;
  }

  .mb-0-sm,
  .my-0-sm {
    margin-bottom: calc(var(--space-size) * 0) !important;
  }

  .ml-0-sm,
  .mx-0-sm {
    margin-left: calc(var(--space-size) * 0) !important;
  }

  .mr-0-sm,
  .mx-0-sm {
    margin-right: calc(var(--space-size) * 0) !important;
  }

  /* Spacing */
  .p-0-sm {
    padding: calc(var(--space-size) * 0) !important;
  }

  .pt-0-sm,
  .py-0-sm {
    padding-top: calc(var(--space-size) * 0) !important;
  }

  .pb-0-sm,
  .py-0-sm {
    padding-bottom: calc(var(--space-size) * 0) !important;
  }

  .pl-0-sm,
  .px-0-sm {
    padding-left: calc(var(--space-size) * 0) !important;
  }

  .pr-0-sm,
  .px-0-sm {
    padding-right: calc(var(--space-size) * 0) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-1-sm {
    margin: calc(var(--space-size) * 1) !important;
  }

  .mt-1-sm,
  .my-1-sm {
    margin-top: calc(var(--space-size) * 1) !important;
  }

  .mb-1-sm,
  .my-1-sm {
    margin-bottom: calc(var(--space-size) * 1) !important;
  }

  .ml-1-sm,
  .mx-1-sm {
    margin-left: calc(var(--space-size) * 1) !important;
  }

  .mr-1-sm,
  .mx-1-sm {
    margin-right: calc(var(--space-size) * 1) !important;
  }

  /* Spacing */
  .p-1-sm {
    padding: calc(var(--space-size) * 1) !important;
  }

  .pt-1-sm,
  .py-1-sm {
    padding-top: calc(var(--space-size) * 1) !important;
  }

  .pb-1-sm,
  .py-1-sm {
    padding-bottom: calc(var(--space-size) * 1) !important;
  }

  .pl-1-sm,
  .px-1-sm {
    padding-left: calc(var(--space-size) * 1) !important;
  }

  .pr-1-sm,
  .px-1-sm {
    padding-right: calc(var(--space-size) * 1) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-2-sm {
    margin: calc(var(--space-size) * 2) !important;
  }

  .mt-2-sm,
  .my-2-sm {
    margin-top: calc(var(--space-size) * 2) !important;
  }

  .mb-2-sm,
  .my-2-sm {
    margin-bottom: calc(var(--space-size) * 2) !important;
  }

  .ml-2-sm,
  .mx-2-sm {
    margin-left: calc(var(--space-size) * 2) !important;
  }

  .mr-2-sm,
  .mx-2-sm {
    margin-right: calc(var(--space-size) * 2) !important;
  }

  /* Spacing */
  .p-2-sm {
    padding: calc(var(--space-size) * 2) !important;
  }

  .pt-2-sm,
  .py-2-sm {
    padding-top: calc(var(--space-size) * 2) !important;
  }

  .pb-2-sm,
  .py-2-sm {
    padding-bottom: calc(var(--space-size) * 2) !important;
  }

  .pl-2-sm,
  .px-2-sm {
    padding-left: calc(var(--space-size) * 2) !important;
  }

  .pr-2-sm,
  .px-2-sm {
    padding-right: calc(var(--space-size) * 2) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-3-sm {
    margin: calc(var(--space-size) * 3) !important;
  }

  .mt-3-sm,
  .my-3-sm {
    margin-top: calc(var(--space-size) * 3) !important;
  }

  .mb-3-sm,
  .my-3-sm {
    margin-bottom: calc(var(--space-size) * 3) !important;
  }

  .ml-3-sm,
  .mx-3-sm {
    margin-left: calc(var(--space-size) * 3) !important;
  }

  .mr-3-sm,
  .mx-3-sm {
    margin-right: calc(var(--space-size) * 3) !important;
  }

  /* Spacing */
  .p-3-sm {
    padding: calc(var(--space-size) * 3) !important;
  }

  .pt-3-sm,
  .py-3-sm {
    padding-top: calc(var(--space-size) * 3) !important;
  }

  .pb-3-sm,
  .py-3-sm {
    padding-bottom: calc(var(--space-size) * 3) !important;
  }

  .pl-3-sm,
  .px-3-sm {
    padding-left: calc(var(--space-size) * 3) !important;
  }

  .pr-3-sm,
  .px-3-sm {
    padding-right: calc(var(--space-size) * 3) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-4-sm {
    margin: calc(var(--space-size) * 4) !important;
  }

  .mt-4-sm,
  .my-4-sm {
    margin-top: calc(var(--space-size) * 4) !important;
  }

  .mb-4-sm,
  .my-4-sm {
    margin-bottom: calc(var(--space-size) * 4) !important;
  }

  .ml-4-sm,
  .mx-4-sm {
    margin-left: calc(var(--space-size) * 4) !important;
  }

  .mr-4-sm,
  .mx-4-sm {
    margin-right: calc(var(--space-size) * 4) !important;
  }

  /* Spacing */
  .p-4-sm {
    padding: calc(var(--space-size) * 4) !important;
  }

  .pt-4-sm,
  .py-4-sm {
    padding-top: calc(var(--space-size) * 4) !important;
  }

  .pb-4-sm,
  .py-4-sm {
    padding-bottom: calc(var(--space-size) * 4) !important;
  }

  .pl-4-sm,
  .px-4-sm {
    padding-left: calc(var(--space-size) * 4) !important;
  }

  .pr-4-sm,
  .px-4-sm {
    padding-right: calc(var(--space-size) * 4) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-5-sm {
    margin: calc(var(--space-size) * 5) !important;
  }

  .mt-5-sm,
  .my-5-sm {
    margin-top: calc(var(--space-size) * 5) !important;
  }

  .mb-5-sm,
  .my-5-sm {
    margin-bottom: calc(var(--space-size) * 5) !important;
  }

  .ml-5-sm,
  .mx-5-sm {
    margin-left: calc(var(--space-size) * 5) !important;
  }

  .mr-5-sm,
  .mx-5-sm {
    margin-right: calc(var(--space-size) * 5) !important;
  }

  /* Spacing */
  .p-5-sm {
    padding: calc(var(--space-size) * 5) !important;
  }

  .pt-5-sm,
  .py-5-sm {
    padding-top: calc(var(--space-size) * 5) !important;
  }

  .pb-5-sm,
  .py-5-sm {
    padding-bottom: calc(var(--space-size) * 5) !important;
  }

  .pl-5-sm,
  .px-5-sm {
    padding-left: calc(var(--space-size) * 5) !important;
  }

  .pr-5-sm,
  .px-5-sm {
    padding-right: calc(var(--space-size) * 5) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-6-sm {
    margin: calc(var(--space-size) * 6) !important;
  }

  .mt-6-sm,
  .my-6-sm {
    margin-top: calc(var(--space-size) * 6) !important;
  }

  .mb-6-sm,
  .my-6-sm {
    margin-bottom: calc(var(--space-size) * 6) !important;
  }

  .ml-6-sm,
  .mx-6-sm {
    margin-left: calc(var(--space-size) * 6) !important;
  }

  .mr-6-sm,
  .mx-6-sm {
    margin-right: calc(var(--space-size) * 6) !important;
  }

  /* Spacing */
  .p-6-sm {
    padding: calc(var(--space-size) * 6) !important;
  }

  .pt-6-sm,
  .py-6-sm {
    padding-top: calc(var(--space-size) * 6) !important;
  }

  .pb-6-sm,
  .py-6-sm {
    padding-bottom: calc(var(--space-size) * 6) !important;
  }

  .pl-6-sm,
  .px-6-sm {
    padding-left: calc(var(--space-size) * 6) !important;
  }

  .pr-6-sm,
  .px-6-sm {
    padding-right: calc(var(--space-size) * 6) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-8-sm {
    margin: calc(var(--space-size) * 8) !important;
  }

  .mt-8-sm,
  .my-8-sm {
    margin-top: calc(var(--space-size) * 8) !important;
  }

  .mb-8-sm,
  .my-8-sm {
    margin-bottom: calc(var(--space-size) * 8) !important;
  }

  .ml-8-sm,
  .mx-8-sm {
    margin-left: calc(var(--space-size) * 8) !important;
  }

  .mr-8-sm,
  .mx-8-sm {
    margin-right: calc(var(--space-size) * 8) !important;
  }

  /* Spacing */
  .p-8-sm {
    padding: calc(var(--space-size) * 8) !important;
  }

  .pt-8-sm,
  .py-8-sm {
    padding-top: calc(var(--space-size) * 8) !important;
  }

  .pb-8-sm,
  .py-8-sm {
    padding-bottom: calc(var(--space-size) * 8) !important;
  }

  .pl-8-sm,
  .px-8-sm {
    padding-left: calc(var(--space-size) * 8) !important;
  }

  .pr-8-sm,
  .px-8-sm {
    padding-right: calc(var(--space-size) * 8) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-10-sm {
    margin: calc(var(--space-size) * 10) !important;
  }

  .mt-10-sm,
  .my-10-sm {
    margin-top: calc(var(--space-size) * 10) !important;
  }

  .mb-10-sm,
  .my-10-sm {
    margin-bottom: calc(var(--space-size) * 10) !important;
  }

  .ml-10-sm,
  .mx-10-sm {
    margin-left: calc(var(--space-size) * 10) !important;
  }

  .mr-10-sm,
  .mx-10-sm {
    margin-right: calc(var(--space-size) * 10) !important;
  }

  /* Spacing */
  .p-10-sm {
    padding: calc(var(--space-size) * 10) !important;
  }

  .pt-10-sm,
  .py-10-sm {
    padding-top: calc(var(--space-size) * 10) !important;
  }

  .pb-10-sm,
  .py-10-sm {
    padding-bottom: calc(var(--space-size) * 10) !important;
  }

  .pl-10-sm,
  .px-10-sm {
    padding-left: calc(var(--space-size) * 10) !important;
  }

  .pr-10-sm,
  .px-10-sm {
    padding-right: calc(var(--space-size) * 10) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-12-sm {
    margin: calc(var(--space-size) * 12) !important;
  }

  .mt-12-sm,
  .my-12-sm {
    margin-top: calc(var(--space-size) * 12) !important;
  }

  .mb-12-sm,
  .my-12-sm {
    margin-bottom: calc(var(--space-size) * 12) !important;
  }

  .ml-12-sm,
  .mx-12-sm {
    margin-left: calc(var(--space-size) * 12) !important;
  }

  .mr-12-sm,
  .mx-12-sm {
    margin-right: calc(var(--space-size) * 12) !important;
  }

  /* Spacing */
  .p-12-sm {
    padding: calc(var(--space-size) * 12) !important;
  }

  .pt-12-sm,
  .py-12-sm {
    padding-top: calc(var(--space-size) * 12) !important;
  }

  .pb-12-sm,
  .py-12-sm {
    padding-bottom: calc(var(--space-size) * 12) !important;
  }

  .pl-12-sm,
  .px-12-sm {
    padding-left: calc(var(--space-size) * 12) !important;
  }

  .pr-12-sm,
  .px-12-sm {
    padding-right: calc(var(--space-size) * 12) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-16-sm {
    margin: calc(var(--space-size) * 16) !important;
  }

  .mt-16-sm,
  .my-16-sm {
    margin-top: calc(var(--space-size) * 16) !important;
  }

  .mb-16-sm,
  .my-16-sm {
    margin-bottom: calc(var(--space-size) * 16) !important;
  }

  .ml-16-sm,
  .mx-16-sm {
    margin-left: calc(var(--space-size) * 16) !important;
  }

  .mr-16-sm,
  .mx-16-sm {
    margin-right: calc(var(--space-size) * 16) !important;
  }

  /* Spacing */
  .p-16-sm {
    padding: calc(var(--space-size) * 16) !important;
  }

  .pt-16-sm,
  .py-16-sm {
    padding-top: calc(var(--space-size) * 16) !important;
  }

  .pb-16-sm,
  .py-16-sm {
    padding-bottom: calc(var(--space-size) * 16) !important;
  }

  .pl-16-sm,
  .px-16-sm {
    padding-left: calc(var(--space-size) * 16) !important;
  }

  .pr-16-sm,
  .px-16-sm {
    padding-right: calc(var(--space-size) * 16) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-20-sm {
    margin: calc(var(--space-size) * 20) !important;
  }

  .mt-20-sm,
  .my-20-sm {
    margin-top: calc(var(--space-size) * 20) !important;
  }

  .mb-20-sm,
  .my-20-sm {
    margin-bottom: calc(var(--space-size) * 20) !important;
  }

  .ml-20-sm,
  .mx-20-sm {
    margin-left: calc(var(--space-size) * 20) !important;
  }

  .mr-20-sm,
  .mx-20-sm {
    margin-right: calc(var(--space-size) * 20) !important;
  }

  /* Spacing */
  .p-20-sm {
    padding: calc(var(--space-size) * 20) !important;
  }

  .pt-20-sm,
  .py-20-sm {
    padding-top: calc(var(--space-size) * 20) !important;
  }

  .pb-20-sm,
  .py-20-sm {
    padding-bottom: calc(var(--space-size) * 20) !important;
  }

  .pl-20-sm,
  .px-20-sm {
    padding-left: calc(var(--space-size) * 20) !important;
  }

  .pr-20-sm,
  .px-20-sm {
    padding-right: calc(var(--space-size) * 20) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-24-sm {
    margin: calc(var(--space-size) * 24) !important;
  }

  .mt-24-sm,
  .my-24-sm {
    margin-top: calc(var(--space-size) * 24) !important;
  }

  .mb-24-sm,
  .my-24-sm {
    margin-bottom: calc(var(--space-size) * 24) !important;
  }

  .ml-24-sm,
  .mx-24-sm {
    margin-left: calc(var(--space-size) * 24) !important;
  }

  .mr-24-sm,
  .mx-24-sm {
    margin-right: calc(var(--space-size) * 24) !important;
  }

  /* Spacing */
  .p-24-sm {
    padding: calc(var(--space-size) * 24) !important;
  }

  .pt-24-sm,
  .py-24-sm {
    padding-top: calc(var(--space-size) * 24) !important;
  }

  .pb-24-sm,
  .py-24-sm {
    padding-bottom: calc(var(--space-size) * 24) !important;
  }

  .pl-24-sm,
  .px-24-sm {
    padding-left: calc(var(--space-size) * 24) !important;
  }

  .pr-24-sm,
  .px-24-sm {
    padding-right: calc(var(--space-size) * 24) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 640px) {
  /* Margin */
  .m-32-sm {
    margin: calc(var(--space-size) * 32) !important;
  }

  .mt-32-sm,
  .my-32-sm {
    margin-top: calc(var(--space-size) * 32) !important;
  }

  .mb-32-sm,
  .my-32-sm {
    margin-bottom: calc(var(--space-size) * 32) !important;
  }

  .ml-32-sm,
  .mx-32-sm {
    margin-left: calc(var(--space-size) * 32) !important;
  }

  .mr-32-sm,
  .mx-32-sm {
    margin-right: calc(var(--space-size) * 32) !important;
  }

  /* Spacing */
  .p-32-sm {
    padding: calc(var(--space-size) * 32) !important;
  }

  .pt-32-sm,
  .py-32-sm {
    padding-top: calc(var(--space-size) * 32) !important;
  }

  .pb-32-sm,
  .py-32-sm {
    padding-bottom: calc(var(--space-size) * 32) !important;
  }

  .pl-32-sm,
  .px-32-sm {
    padding-left: calc(var(--space-size) * 32) !important;
  }

  .pr-32-sm,
  .px-32-sm {
    padding-right: calc(var(--space-size) * 32) !important;
  }

  .ml-auto-sm,
  .mx-auto-sm {
    margin-left: auto !important;
  }

  .mr-auto-sm,
  .mx-auto-sm {
    margin-right: auto !important;
  }

  .mt-auto-sm,
  .my-auto-sm {
    margin-top: auto !important;
  }

  .mb-auto-sm,
  .my-auto-sm {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-0-md {
    margin: calc(var(--space-size) * 0) !important;
  }

  .mt-0-md,
  .my-0-md {
    margin-top: calc(var(--space-size) * 0) !important;
  }

  .mb-0-md,
  .my-0-md {
    margin-bottom: calc(var(--space-size) * 0) !important;
  }

  .ml-0-md,
  .mx-0-md {
    margin-left: calc(var(--space-size) * 0) !important;
  }

  .mr-0-md,
  .mx-0-md {
    margin-right: calc(var(--space-size) * 0) !important;
  }

  /* Spacing */
  .p-0-md {
    padding: calc(var(--space-size) * 0) !important;
  }

  .pt-0-md,
  .py-0-md {
    padding-top: calc(var(--space-size) * 0) !important;
  }

  .pb-0-md,
  .py-0-md {
    padding-bottom: calc(var(--space-size) * 0) !important;
  }

  .pl-0-md,
  .px-0-md {
    padding-left: calc(var(--space-size) * 0) !important;
  }

  .pr-0-md,
  .px-0-md {
    padding-right: calc(var(--space-size) * 0) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-1-md {
    margin: calc(var(--space-size) * 1) !important;
  }

  .mt-1-md,
  .my-1-md {
    margin-top: calc(var(--space-size) * 1) !important;
  }

  .mb-1-md,
  .my-1-md {
    margin-bottom: calc(var(--space-size) * 1) !important;
  }

  .ml-1-md,
  .mx-1-md {
    margin-left: calc(var(--space-size) * 1) !important;
  }

  .mr-1-md,
  .mx-1-md {
    margin-right: calc(var(--space-size) * 1) !important;
  }

  /* Spacing */
  .p-1-md {
    padding: calc(var(--space-size) * 1) !important;
  }

  .pt-1-md,
  .py-1-md {
    padding-top: calc(var(--space-size) * 1) !important;
  }

  .pb-1-md,
  .py-1-md {
    padding-bottom: calc(var(--space-size) * 1) !important;
  }

  .pl-1-md,
  .px-1-md {
    padding-left: calc(var(--space-size) * 1) !important;
  }

  .pr-1-md,
  .px-1-md {
    padding-right: calc(var(--space-size) * 1) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-2-md {
    margin: calc(var(--space-size) * 2) !important;
  }

  .mt-2-md,
  .my-2-md {
    margin-top: calc(var(--space-size) * 2) !important;
  }

  .mb-2-md,
  .my-2-md {
    margin-bottom: calc(var(--space-size) * 2) !important;
  }

  .ml-2-md,
  .mx-2-md {
    margin-left: calc(var(--space-size) * 2) !important;
  }

  .mr-2-md,
  .mx-2-md {
    margin-right: calc(var(--space-size) * 2) !important;
  }

  /* Spacing */
  .p-2-md {
    padding: calc(var(--space-size) * 2) !important;
  }

  .pt-2-md,
  .py-2-md {
    padding-top: calc(var(--space-size) * 2) !important;
  }

  .pb-2-md,
  .py-2-md {
    padding-bottom: calc(var(--space-size) * 2) !important;
  }

  .pl-2-md,
  .px-2-md {
    padding-left: calc(var(--space-size) * 2) !important;
  }

  .pr-2-md,
  .px-2-md {
    padding-right: calc(var(--space-size) * 2) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-3-md {
    margin: calc(var(--space-size) * 3) !important;
  }

  .mt-3-md,
  .my-3-md {
    margin-top: calc(var(--space-size) * 3) !important;
  }

  .mb-3-md,
  .my-3-md {
    margin-bottom: calc(var(--space-size) * 3) !important;
  }

  .ml-3-md,
  .mx-3-md {
    margin-left: calc(var(--space-size) * 3) !important;
  }

  .mr-3-md,
  .mx-3-md {
    margin-right: calc(var(--space-size) * 3) !important;
  }

  /* Spacing */
  .p-3-md {
    padding: calc(var(--space-size) * 3) !important;
  }

  .pt-3-md,
  .py-3-md {
    padding-top: calc(var(--space-size) * 3) !important;
  }

  .pb-3-md,
  .py-3-md {
    padding-bottom: calc(var(--space-size) * 3) !important;
  }

  .pl-3-md,
  .px-3-md {
    padding-left: calc(var(--space-size) * 3) !important;
  }

  .pr-3-md,
  .px-3-md {
    padding-right: calc(var(--space-size) * 3) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-4-md {
    margin: calc(var(--space-size) * 4) !important;
  }

  .mt-4-md,
  .my-4-md {
    margin-top: calc(var(--space-size) * 4) !important;
  }

  .mb-4-md,
  .my-4-md {
    margin-bottom: calc(var(--space-size) * 4) !important;
  }

  .ml-4-md,
  .mx-4-md {
    margin-left: calc(var(--space-size) * 4) !important;
  }

  .mr-4-md,
  .mx-4-md {
    margin-right: calc(var(--space-size) * 4) !important;
  }

  /* Spacing */
  .p-4-md {
    padding: calc(var(--space-size) * 4) !important;
  }

  .pt-4-md,
  .py-4-md {
    padding-top: calc(var(--space-size) * 4) !important;
  }

  .pb-4-md,
  .py-4-md {
    padding-bottom: calc(var(--space-size) * 4) !important;
  }

  .pl-4-md,
  .px-4-md {
    padding-left: calc(var(--space-size) * 4) !important;
  }

  .pr-4-md,
  .px-4-md {
    padding-right: calc(var(--space-size) * 4) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-5-md {
    margin: calc(var(--space-size) * 5) !important;
  }

  .mt-5-md,
  .my-5-md {
    margin-top: calc(var(--space-size) * 5) !important;
  }

  .mb-5-md,
  .my-5-md {
    margin-bottom: calc(var(--space-size) * 5) !important;
  }

  .ml-5-md,
  .mx-5-md {
    margin-left: calc(var(--space-size) * 5) !important;
  }

  .mr-5-md,
  .mx-5-md {
    margin-right: calc(var(--space-size) * 5) !important;
  }

  /* Spacing */
  .p-5-md {
    padding: calc(var(--space-size) * 5) !important;
  }

  .pt-5-md,
  .py-5-md {
    padding-top: calc(var(--space-size) * 5) !important;
  }

  .pb-5-md,
  .py-5-md {
    padding-bottom: calc(var(--space-size) * 5) !important;
  }

  .pl-5-md,
  .px-5-md {
    padding-left: calc(var(--space-size) * 5) !important;
  }

  .pr-5-md,
  .px-5-md {
    padding-right: calc(var(--space-size) * 5) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-6-md {
    margin: calc(var(--space-size) * 6) !important;
  }

  .mt-6-md,
  .my-6-md {
    margin-top: calc(var(--space-size) * 6) !important;
  }

  .mb-6-md,
  .my-6-md {
    margin-bottom: calc(var(--space-size) * 6) !important;
  }

  .ml-6-md,
  .mx-6-md {
    margin-left: calc(var(--space-size) * 6) !important;
  }

  .mr-6-md,
  .mx-6-md {
    margin-right: calc(var(--space-size) * 6) !important;
  }

  /* Spacing */
  .p-6-md {
    padding: calc(var(--space-size) * 6) !important;
  }

  .pt-6-md,
  .py-6-md {
    padding-top: calc(var(--space-size) * 6) !important;
  }

  .pb-6-md,
  .py-6-md {
    padding-bottom: calc(var(--space-size) * 6) !important;
  }

  .pl-6-md,
  .px-6-md {
    padding-left: calc(var(--space-size) * 6) !important;
  }

  .pr-6-md,
  .px-6-md {
    padding-right: calc(var(--space-size) * 6) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-8-md {
    margin: calc(var(--space-size) * 8) !important;
  }

  .mt-8-md,
  .my-8-md {
    margin-top: calc(var(--space-size) * 8) !important;
  }

  .mb-8-md,
  .my-8-md {
    margin-bottom: calc(var(--space-size) * 8) !important;
  }

  .ml-8-md,
  .mx-8-md {
    margin-left: calc(var(--space-size) * 8) !important;
  }

  .mr-8-md,
  .mx-8-md {
    margin-right: calc(var(--space-size) * 8) !important;
  }

  /* Spacing */
  .p-8-md {
    padding: calc(var(--space-size) * 8) !important;
  }

  .pt-8-md,
  .py-8-md {
    padding-top: calc(var(--space-size) * 8) !important;
  }

  .pb-8-md,
  .py-8-md {
    padding-bottom: calc(var(--space-size) * 8) !important;
  }

  .pl-8-md,
  .px-8-md {
    padding-left: calc(var(--space-size) * 8) !important;
  }

  .pr-8-md,
  .px-8-md {
    padding-right: calc(var(--space-size) * 8) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-10-md {
    margin: calc(var(--space-size) * 10) !important;
  }

  .mt-10-md,
  .my-10-md {
    margin-top: calc(var(--space-size) * 10) !important;
  }

  .mb-10-md,
  .my-10-md {
    margin-bottom: calc(var(--space-size) * 10) !important;
  }

  .ml-10-md,
  .mx-10-md {
    margin-left: calc(var(--space-size) * 10) !important;
  }

  .mr-10-md,
  .mx-10-md {
    margin-right: calc(var(--space-size) * 10) !important;
  }

  /* Spacing */
  .p-10-md {
    padding: calc(var(--space-size) * 10) !important;
  }

  .pt-10-md,
  .py-10-md {
    padding-top: calc(var(--space-size) * 10) !important;
  }

  .pb-10-md,
  .py-10-md {
    padding-bottom: calc(var(--space-size) * 10) !important;
  }

  .pl-10-md,
  .px-10-md {
    padding-left: calc(var(--space-size) * 10) !important;
  }

  .pr-10-md,
  .px-10-md {
    padding-right: calc(var(--space-size) * 10) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-12-md {
    margin: calc(var(--space-size) * 12) !important;
  }

  .mt-12-md,
  .my-12-md {
    margin-top: calc(var(--space-size) * 12) !important;
  }

  .mb-12-md,
  .my-12-md {
    margin-bottom: calc(var(--space-size) * 12) !important;
  }

  .ml-12-md,
  .mx-12-md {
    margin-left: calc(var(--space-size) * 12) !important;
  }

  .mr-12-md,
  .mx-12-md {
    margin-right: calc(var(--space-size) * 12) !important;
  }

  /* Spacing */
  .p-12-md {
    padding: calc(var(--space-size) * 12) !important;
  }

  .pt-12-md,
  .py-12-md {
    padding-top: calc(var(--space-size) * 12) !important;
  }

  .pb-12-md,
  .py-12-md {
    padding-bottom: calc(var(--space-size) * 12) !important;
  }

  .pl-12-md,
  .px-12-md {
    padding-left: calc(var(--space-size) * 12) !important;
  }

  .pr-12-md,
  .px-12-md {
    padding-right: calc(var(--space-size) * 12) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-16-md {
    margin: calc(var(--space-size) * 16) !important;
  }

  .mt-16-md,
  .my-16-md {
    margin-top: calc(var(--space-size) * 16) !important;
  }

  .mb-16-md,
  .my-16-md {
    margin-bottom: calc(var(--space-size) * 16) !important;
  }

  .ml-16-md,
  .mx-16-md {
    margin-left: calc(var(--space-size) * 16) !important;
  }

  .mr-16-md,
  .mx-16-md {
    margin-right: calc(var(--space-size) * 16) !important;
  }

  /* Spacing */
  .p-16-md {
    padding: calc(var(--space-size) * 16) !important;
  }

  .pt-16-md,
  .py-16-md {
    padding-top: calc(var(--space-size) * 16) !important;
  }

  .pb-16-md,
  .py-16-md {
    padding-bottom: calc(var(--space-size) * 16) !important;
  }

  .pl-16-md,
  .px-16-md {
    padding-left: calc(var(--space-size) * 16) !important;
  }

  .pr-16-md,
  .px-16-md {
    padding-right: calc(var(--space-size) * 16) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-20-md {
    margin: calc(var(--space-size) * 20) !important;
  }

  .mt-20-md,
  .my-20-md {
    margin-top: calc(var(--space-size) * 20) !important;
  }

  .mb-20-md,
  .my-20-md {
    margin-bottom: calc(var(--space-size) * 20) !important;
  }

  .ml-20-md,
  .mx-20-md {
    margin-left: calc(var(--space-size) * 20) !important;
  }

  .mr-20-md,
  .mx-20-md {
    margin-right: calc(var(--space-size) * 20) !important;
  }

  /* Spacing */
  .p-20-md {
    padding: calc(var(--space-size) * 20) !important;
  }

  .pt-20-md,
  .py-20-md {
    padding-top: calc(var(--space-size) * 20) !important;
  }

  .pb-20-md,
  .py-20-md {
    padding-bottom: calc(var(--space-size) * 20) !important;
  }

  .pl-20-md,
  .px-20-md {
    padding-left: calc(var(--space-size) * 20) !important;
  }

  .pr-20-md,
  .px-20-md {
    padding-right: calc(var(--space-size) * 20) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-24-md {
    margin: calc(var(--space-size) * 24) !important;
  }

  .mt-24-md,
  .my-24-md {
    margin-top: calc(var(--space-size) * 24) !important;
  }

  .mb-24-md,
  .my-24-md {
    margin-bottom: calc(var(--space-size) * 24) !important;
  }

  .ml-24-md,
  .mx-24-md {
    margin-left: calc(var(--space-size) * 24) !important;
  }

  .mr-24-md,
  .mx-24-md {
    margin-right: calc(var(--space-size) * 24) !important;
  }

  /* Spacing */
  .p-24-md {
    padding: calc(var(--space-size) * 24) !important;
  }

  .pt-24-md,
  .py-24-md {
    padding-top: calc(var(--space-size) * 24) !important;
  }

  .pb-24-md,
  .py-24-md {
    padding-bottom: calc(var(--space-size) * 24) !important;
  }

  .pl-24-md,
  .px-24-md {
    padding-left: calc(var(--space-size) * 24) !important;
  }

  .pr-24-md,
  .px-24-md {
    padding-right: calc(var(--space-size) * 24) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 768px) {
  /* Margin */
  .m-32-md {
    margin: calc(var(--space-size) * 32) !important;
  }

  .mt-32-md,
  .my-32-md {
    margin-top: calc(var(--space-size) * 32) !important;
  }

  .mb-32-md,
  .my-32-md {
    margin-bottom: calc(var(--space-size) * 32) !important;
  }

  .ml-32-md,
  .mx-32-md {
    margin-left: calc(var(--space-size) * 32) !important;
  }

  .mr-32-md,
  .mx-32-md {
    margin-right: calc(var(--space-size) * 32) !important;
  }

  /* Spacing */
  .p-32-md {
    padding: calc(var(--space-size) * 32) !important;
  }

  .pt-32-md,
  .py-32-md {
    padding-top: calc(var(--space-size) * 32) !important;
  }

  .pb-32-md,
  .py-32-md {
    padding-bottom: calc(var(--space-size) * 32) !important;
  }

  .pl-32-md,
  .px-32-md {
    padding-left: calc(var(--space-size) * 32) !important;
  }

  .pr-32-md,
  .px-32-md {
    padding-right: calc(var(--space-size) * 32) !important;
  }

  .ml-auto-md,
  .mx-auto-md {
    margin-left: auto !important;
  }

  .mr-auto-md,
  .mx-auto-md {
    margin-right: auto !important;
  }

  .mt-auto-md,
  .my-auto-md {
    margin-top: auto !important;
  }

  .mb-auto-md,
  .my-auto-md {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-0-lg {
    margin: calc(var(--space-size) * 0) !important;
  }

  .mt-0-lg,
  .my-0-lg {
    margin-top: calc(var(--space-size) * 0) !important;
  }

  .mb-0-lg,
  .my-0-lg {
    margin-bottom: calc(var(--space-size) * 0) !important;
  }

  .ml-0-lg,
  .mx-0-lg {
    margin-left: calc(var(--space-size) * 0) !important;
  }

  .mr-0-lg,
  .mx-0-lg {
    margin-right: calc(var(--space-size) * 0) !important;
  }

  /* Spacing */
  .p-0-lg {
    padding: calc(var(--space-size) * 0) !important;
  }

  .pt-0-lg,
  .py-0-lg {
    padding-top: calc(var(--space-size) * 0) !important;
  }

  .pb-0-lg,
  .py-0-lg {
    padding-bottom: calc(var(--space-size) * 0) !important;
  }

  .pl-0-lg,
  .px-0-lg {
    padding-left: calc(var(--space-size) * 0) !important;
  }

  .pr-0-lg,
  .px-0-lg {
    padding-right: calc(var(--space-size) * 0) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-1-lg {
    margin: calc(var(--space-size) * 1) !important;
  }

  .mt-1-lg,
  .my-1-lg {
    margin-top: calc(var(--space-size) * 1) !important;
  }

  .mb-1-lg,
  .my-1-lg {
    margin-bottom: calc(var(--space-size) * 1) !important;
  }

  .ml-1-lg,
  .mx-1-lg {
    margin-left: calc(var(--space-size) * 1) !important;
  }

  .mr-1-lg,
  .mx-1-lg {
    margin-right: calc(var(--space-size) * 1) !important;
  }

  /* Spacing */
  .p-1-lg {
    padding: calc(var(--space-size) * 1) !important;
  }

  .pt-1-lg,
  .py-1-lg {
    padding-top: calc(var(--space-size) * 1) !important;
  }

  .pb-1-lg,
  .py-1-lg {
    padding-bottom: calc(var(--space-size) * 1) !important;
  }

  .pl-1-lg,
  .px-1-lg {
    padding-left: calc(var(--space-size) * 1) !important;
  }

  .pr-1-lg,
  .px-1-lg {
    padding-right: calc(var(--space-size) * 1) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-2-lg {
    margin: calc(var(--space-size) * 2) !important;
  }

  .mt-2-lg,
  .my-2-lg {
    margin-top: calc(var(--space-size) * 2) !important;
  }

  .mb-2-lg,
  .my-2-lg {
    margin-bottom: calc(var(--space-size) * 2) !important;
  }

  .ml-2-lg,
  .mx-2-lg {
    margin-left: calc(var(--space-size) * 2) !important;
  }

  .mr-2-lg,
  .mx-2-lg {
    margin-right: calc(var(--space-size) * 2) !important;
  }

  /* Spacing */
  .p-2-lg {
    padding: calc(var(--space-size) * 2) !important;
  }

  .pt-2-lg,
  .py-2-lg {
    padding-top: calc(var(--space-size) * 2) !important;
  }

  .pb-2-lg,
  .py-2-lg {
    padding-bottom: calc(var(--space-size) * 2) !important;
  }

  .pl-2-lg,
  .px-2-lg {
    padding-left: calc(var(--space-size) * 2) !important;
  }

  .pr-2-lg,
  .px-2-lg {
    padding-right: calc(var(--space-size) * 2) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-3-lg {
    margin: calc(var(--space-size) * 3) !important;
  }

  .mt-3-lg,
  .my-3-lg {
    margin-top: calc(var(--space-size) * 3) !important;
  }

  .mb-3-lg,
  .my-3-lg {
    margin-bottom: calc(var(--space-size) * 3) !important;
  }

  .ml-3-lg,
  .mx-3-lg {
    margin-left: calc(var(--space-size) * 3) !important;
  }

  .mr-3-lg,
  .mx-3-lg {
    margin-right: calc(var(--space-size) * 3) !important;
  }

  /* Spacing */
  .p-3-lg {
    padding: calc(var(--space-size) * 3) !important;
  }

  .pt-3-lg,
  .py-3-lg {
    padding-top: calc(var(--space-size) * 3) !important;
  }

  .pb-3-lg,
  .py-3-lg {
    padding-bottom: calc(var(--space-size) * 3) !important;
  }

  .pl-3-lg,
  .px-3-lg {
    padding-left: calc(var(--space-size) * 3) !important;
  }

  .pr-3-lg,
  .px-3-lg {
    padding-right: calc(var(--space-size) * 3) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-4-lg {
    margin: calc(var(--space-size) * 4) !important;
  }

  .mt-4-lg,
  .my-4-lg {
    margin-top: calc(var(--space-size) * 4) !important;
  }

  .mb-4-lg,
  .my-4-lg {
    margin-bottom: calc(var(--space-size) * 4) !important;
  }

  .ml-4-lg,
  .mx-4-lg {
    margin-left: calc(var(--space-size) * 4) !important;
  }

  .mr-4-lg,
  .mx-4-lg {
    margin-right: calc(var(--space-size) * 4) !important;
  }

  /* Spacing */
  .p-4-lg {
    padding: calc(var(--space-size) * 4) !important;
  }

  .pt-4-lg,
  .py-4-lg {
    padding-top: calc(var(--space-size) * 4) !important;
  }

  .pb-4-lg,
  .py-4-lg {
    padding-bottom: calc(var(--space-size) * 4) !important;
  }

  .pl-4-lg,
  .px-4-lg {
    padding-left: calc(var(--space-size) * 4) !important;
  }

  .pr-4-lg,
  .px-4-lg {
    padding-right: calc(var(--space-size) * 4) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-5-lg {
    margin: calc(var(--space-size) * 5) !important;
  }

  .mt-5-lg,
  .my-5-lg {
    margin-top: calc(var(--space-size) * 5) !important;
  }

  .mb-5-lg,
  .my-5-lg {
    margin-bottom: calc(var(--space-size) * 5) !important;
  }

  .ml-5-lg,
  .mx-5-lg {
    margin-left: calc(var(--space-size) * 5) !important;
  }

  .mr-5-lg,
  .mx-5-lg {
    margin-right: calc(var(--space-size) * 5) !important;
  }

  /* Spacing */
  .p-5-lg {
    padding: calc(var(--space-size) * 5) !important;
  }

  .pt-5-lg,
  .py-5-lg {
    padding-top: calc(var(--space-size) * 5) !important;
  }

  .pb-5-lg,
  .py-5-lg {
    padding-bottom: calc(var(--space-size) * 5) !important;
  }

  .pl-5-lg,
  .px-5-lg {
    padding-left: calc(var(--space-size) * 5) !important;
  }

  .pr-5-lg,
  .px-5-lg {
    padding-right: calc(var(--space-size) * 5) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-6-lg {
    margin: calc(var(--space-size) * 6) !important;
  }

  .mt-6-lg,
  .my-6-lg {
    margin-top: calc(var(--space-size) * 6) !important;
  }

  .mb-6-lg,
  .my-6-lg {
    margin-bottom: calc(var(--space-size) * 6) !important;
  }

  .ml-6-lg,
  .mx-6-lg {
    margin-left: calc(var(--space-size) * 6) !important;
  }

  .mr-6-lg,
  .mx-6-lg {
    margin-right: calc(var(--space-size) * 6) !important;
  }

  /* Spacing */
  .p-6-lg {
    padding: calc(var(--space-size) * 6) !important;
  }

  .pt-6-lg,
  .py-6-lg {
    padding-top: calc(var(--space-size) * 6) !important;
  }

  .pb-6-lg,
  .py-6-lg {
    padding-bottom: calc(var(--space-size) * 6) !important;
  }

  .pl-6-lg,
  .px-6-lg {
    padding-left: calc(var(--space-size) * 6) !important;
  }

  .pr-6-lg,
  .px-6-lg {
    padding-right: calc(var(--space-size) * 6) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-8-lg {
    margin: calc(var(--space-size) * 8) !important;
  }

  .mt-8-lg,
  .my-8-lg {
    margin-top: calc(var(--space-size) * 8) !important;
  }

  .mb-8-lg,
  .my-8-lg {
    margin-bottom: calc(var(--space-size) * 8) !important;
  }

  .ml-8-lg,
  .mx-8-lg {
    margin-left: calc(var(--space-size) * 8) !important;
  }

  .mr-8-lg,
  .mx-8-lg {
    margin-right: calc(var(--space-size) * 8) !important;
  }

  /* Spacing */
  .p-8-lg {
    padding: calc(var(--space-size) * 8) !important;
  }

  .pt-8-lg,
  .py-8-lg {
    padding-top: calc(var(--space-size) * 8) !important;
  }

  .pb-8-lg,
  .py-8-lg {
    padding-bottom: calc(var(--space-size) * 8) !important;
  }

  .pl-8-lg,
  .px-8-lg {
    padding-left: calc(var(--space-size) * 8) !important;
  }

  .pr-8-lg,
  .px-8-lg {
    padding-right: calc(var(--space-size) * 8) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-10-lg {
    margin: calc(var(--space-size) * 10) !important;
  }

  .mt-10-lg,
  .my-10-lg {
    margin-top: calc(var(--space-size) * 10) !important;
  }

  .mb-10-lg,
  .my-10-lg {
    margin-bottom: calc(var(--space-size) * 10) !important;
  }

  .ml-10-lg,
  .mx-10-lg {
    margin-left: calc(var(--space-size) * 10) !important;
  }

  .mr-10-lg,
  .mx-10-lg {
    margin-right: calc(var(--space-size) * 10) !important;
  }

  /* Spacing */
  .p-10-lg {
    padding: calc(var(--space-size) * 10) !important;
  }

  .pt-10-lg,
  .py-10-lg {
    padding-top: calc(var(--space-size) * 10) !important;
  }

  .pb-10-lg,
  .py-10-lg {
    padding-bottom: calc(var(--space-size) * 10) !important;
  }

  .pl-10-lg,
  .px-10-lg {
    padding-left: calc(var(--space-size) * 10) !important;
  }

  .pr-10-lg,
  .px-10-lg {
    padding-right: calc(var(--space-size) * 10) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-12-lg {
    margin: calc(var(--space-size) * 12) !important;
  }

  .mt-12-lg,
  .my-12-lg {
    margin-top: calc(var(--space-size) * 12) !important;
  }

  .mb-12-lg,
  .my-12-lg {
    margin-bottom: calc(var(--space-size) * 12) !important;
  }

  .ml-12-lg,
  .mx-12-lg {
    margin-left: calc(var(--space-size) * 12) !important;
  }

  .mr-12-lg,
  .mx-12-lg {
    margin-right: calc(var(--space-size) * 12) !important;
  }

  /* Spacing */
  .p-12-lg {
    padding: calc(var(--space-size) * 12) !important;
  }

  .pt-12-lg,
  .py-12-lg {
    padding-top: calc(var(--space-size) * 12) !important;
  }

  .pb-12-lg,
  .py-12-lg {
    padding-bottom: calc(var(--space-size) * 12) !important;
  }

  .pl-12-lg,
  .px-12-lg {
    padding-left: calc(var(--space-size) * 12) !important;
  }

  .pr-12-lg,
  .px-12-lg {
    padding-right: calc(var(--space-size) * 12) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-16-lg {
    margin: calc(var(--space-size) * 16) !important;
  }

  .mt-16-lg,
  .my-16-lg {
    margin-top: calc(var(--space-size) * 16) !important;
  }

  .mb-16-lg,
  .my-16-lg {
    margin-bottom: calc(var(--space-size) * 16) !important;
  }

  .ml-16-lg,
  .mx-16-lg {
    margin-left: calc(var(--space-size) * 16) !important;
  }

  .mr-16-lg,
  .mx-16-lg {
    margin-right: calc(var(--space-size) * 16) !important;
  }

  /* Spacing */
  .p-16-lg {
    padding: calc(var(--space-size) * 16) !important;
  }

  .pt-16-lg,
  .py-16-lg {
    padding-top: calc(var(--space-size) * 16) !important;
  }

  .pb-16-lg,
  .py-16-lg {
    padding-bottom: calc(var(--space-size) * 16) !important;
  }

  .pl-16-lg,
  .px-16-lg {
    padding-left: calc(var(--space-size) * 16) !important;
  }

  .pr-16-lg,
  .px-16-lg {
    padding-right: calc(var(--space-size) * 16) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-20-lg {
    margin: calc(var(--space-size) * 20) !important;
  }

  .mt-20-lg,
  .my-20-lg {
    margin-top: calc(var(--space-size) * 20) !important;
  }

  .mb-20-lg,
  .my-20-lg {
    margin-bottom: calc(var(--space-size) * 20) !important;
  }

  .ml-20-lg,
  .mx-20-lg {
    margin-left: calc(var(--space-size) * 20) !important;
  }

  .mr-20-lg,
  .mx-20-lg {
    margin-right: calc(var(--space-size) * 20) !important;
  }

  /* Spacing */
  .p-20-lg {
    padding: calc(var(--space-size) * 20) !important;
  }

  .pt-20-lg,
  .py-20-lg {
    padding-top: calc(var(--space-size) * 20) !important;
  }

  .pb-20-lg,
  .py-20-lg {
    padding-bottom: calc(var(--space-size) * 20) !important;
  }

  .pl-20-lg,
  .px-20-lg {
    padding-left: calc(var(--space-size) * 20) !important;
  }

  .pr-20-lg,
  .px-20-lg {
    padding-right: calc(var(--space-size) * 20) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-24-lg {
    margin: calc(var(--space-size) * 24) !important;
  }

  .mt-24-lg,
  .my-24-lg {
    margin-top: calc(var(--space-size) * 24) !important;
  }

  .mb-24-lg,
  .my-24-lg {
    margin-bottom: calc(var(--space-size) * 24) !important;
  }

  .ml-24-lg,
  .mx-24-lg {
    margin-left: calc(var(--space-size) * 24) !important;
  }

  .mr-24-lg,
  .mx-24-lg {
    margin-right: calc(var(--space-size) * 24) !important;
  }

  /* Spacing */
  .p-24-lg {
    padding: calc(var(--space-size) * 24) !important;
  }

  .pt-24-lg,
  .py-24-lg {
    padding-top: calc(var(--space-size) * 24) !important;
  }

  .pb-24-lg,
  .py-24-lg {
    padding-bottom: calc(var(--space-size) * 24) !important;
  }

  .pl-24-lg,
  .px-24-lg {
    padding-left: calc(var(--space-size) * 24) !important;
  }

  .pr-24-lg,
  .px-24-lg {
    padding-right: calc(var(--space-size) * 24) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  /* Margin */
  .m-32-lg {
    margin: calc(var(--space-size) * 32) !important;
  }

  .mt-32-lg,
  .my-32-lg {
    margin-top: calc(var(--space-size) * 32) !important;
  }

  .mb-32-lg,
  .my-32-lg {
    margin-bottom: calc(var(--space-size) * 32) !important;
  }

  .ml-32-lg,
  .mx-32-lg {
    margin-left: calc(var(--space-size) * 32) !important;
  }

  .mr-32-lg,
  .mx-32-lg {
    margin-right: calc(var(--space-size) * 32) !important;
  }

  /* Spacing */
  .p-32-lg {
    padding: calc(var(--space-size) * 32) !important;
  }

  .pt-32-lg,
  .py-32-lg {
    padding-top: calc(var(--space-size) * 32) !important;
  }

  .pb-32-lg,
  .py-32-lg {
    padding-bottom: calc(var(--space-size) * 32) !important;
  }

  .pl-32-lg,
  .px-32-lg {
    padding-left: calc(var(--space-size) * 32) !important;
  }

  .pr-32-lg,
  .px-32-lg {
    padding-right: calc(var(--space-size) * 32) !important;
  }

  .ml-auto-lg,
  .mx-auto-lg {
    margin-left: auto !important;
  }

  .mr-auto-lg,
  .mx-auto-lg {
    margin-right: auto !important;
  }

  .mt-auto-lg,
  .my-auto-lg {
    margin-top: auto !important;
  }

  .mb-auto-lg,
  .my-auto-lg {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-0-xl {
    margin: calc(var(--space-size) * 0) !important;
  }

  .mt-0-xl,
  .my-0-xl {
    margin-top: calc(var(--space-size) * 0) !important;
  }

  .mb-0-xl,
  .my-0-xl {
    margin-bottom: calc(var(--space-size) * 0) !important;
  }

  .ml-0-xl,
  .mx-0-xl {
    margin-left: calc(var(--space-size) * 0) !important;
  }

  .mr-0-xl,
  .mx-0-xl {
    margin-right: calc(var(--space-size) * 0) !important;
  }

  /* Spacing */
  .p-0-xl {
    padding: calc(var(--space-size) * 0) !important;
  }

  .pt-0-xl,
  .py-0-xl {
    padding-top: calc(var(--space-size) * 0) !important;
  }

  .pb-0-xl,
  .py-0-xl {
    padding-bottom: calc(var(--space-size) * 0) !important;
  }

  .pl-0-xl,
  .px-0-xl {
    padding-left: calc(var(--space-size) * 0) !important;
  }

  .pr-0-xl,
  .px-0-xl {
    padding-right: calc(var(--space-size) * 0) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-1-xl {
    margin: calc(var(--space-size) * 1) !important;
  }

  .mt-1-xl,
  .my-1-xl {
    margin-top: calc(var(--space-size) * 1) !important;
  }

  .mb-1-xl,
  .my-1-xl {
    margin-bottom: calc(var(--space-size) * 1) !important;
  }

  .ml-1-xl,
  .mx-1-xl {
    margin-left: calc(var(--space-size) * 1) !important;
  }

  .mr-1-xl,
  .mx-1-xl {
    margin-right: calc(var(--space-size) * 1) !important;
  }

  /* Spacing */
  .p-1-xl {
    padding: calc(var(--space-size) * 1) !important;
  }

  .pt-1-xl,
  .py-1-xl {
    padding-top: calc(var(--space-size) * 1) !important;
  }

  .pb-1-xl,
  .py-1-xl {
    padding-bottom: calc(var(--space-size) * 1) !important;
  }

  .pl-1-xl,
  .px-1-xl {
    padding-left: calc(var(--space-size) * 1) !important;
  }

  .pr-1-xl,
  .px-1-xl {
    padding-right: calc(var(--space-size) * 1) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-2-xl {
    margin: calc(var(--space-size) * 2) !important;
  }

  .mt-2-xl,
  .my-2-xl {
    margin-top: calc(var(--space-size) * 2) !important;
  }

  .mb-2-xl,
  .my-2-xl {
    margin-bottom: calc(var(--space-size) * 2) !important;
  }

  .ml-2-xl,
  .mx-2-xl {
    margin-left: calc(var(--space-size) * 2) !important;
  }

  .mr-2-xl,
  .mx-2-xl {
    margin-right: calc(var(--space-size) * 2) !important;
  }

  /* Spacing */
  .p-2-xl {
    padding: calc(var(--space-size) * 2) !important;
  }

  .pt-2-xl,
  .py-2-xl {
    padding-top: calc(var(--space-size) * 2) !important;
  }

  .pb-2-xl,
  .py-2-xl {
    padding-bottom: calc(var(--space-size) * 2) !important;
  }

  .pl-2-xl,
  .px-2-xl {
    padding-left: calc(var(--space-size) * 2) !important;
  }

  .pr-2-xl,
  .px-2-xl {
    padding-right: calc(var(--space-size) * 2) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-3-xl {
    margin: calc(var(--space-size) * 3) !important;
  }

  .mt-3-xl,
  .my-3-xl {
    margin-top: calc(var(--space-size) * 3) !important;
  }

  .mb-3-xl,
  .my-3-xl {
    margin-bottom: calc(var(--space-size) * 3) !important;
  }

  .ml-3-xl,
  .mx-3-xl {
    margin-left: calc(var(--space-size) * 3) !important;
  }

  .mr-3-xl,
  .mx-3-xl {
    margin-right: calc(var(--space-size) * 3) !important;
  }

  /* Spacing */
  .p-3-xl {
    padding: calc(var(--space-size) * 3) !important;
  }

  .pt-3-xl,
  .py-3-xl {
    padding-top: calc(var(--space-size) * 3) !important;
  }

  .pb-3-xl,
  .py-3-xl {
    padding-bottom: calc(var(--space-size) * 3) !important;
  }

  .pl-3-xl,
  .px-3-xl {
    padding-left: calc(var(--space-size) * 3) !important;
  }

  .pr-3-xl,
  .px-3-xl {
    padding-right: calc(var(--space-size) * 3) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-4-xl {
    margin: calc(var(--space-size) * 4) !important;
  }

  .mt-4-xl,
  .my-4-xl {
    margin-top: calc(var(--space-size) * 4) !important;
  }

  .mb-4-xl,
  .my-4-xl {
    margin-bottom: calc(var(--space-size) * 4) !important;
  }

  .ml-4-xl,
  .mx-4-xl {
    margin-left: calc(var(--space-size) * 4) !important;
  }

  .mr-4-xl,
  .mx-4-xl {
    margin-right: calc(var(--space-size) * 4) !important;
  }

  /* Spacing */
  .p-4-xl {
    padding: calc(var(--space-size) * 4) !important;
  }

  .pt-4-xl,
  .py-4-xl {
    padding-top: calc(var(--space-size) * 4) !important;
  }

  .pb-4-xl,
  .py-4-xl {
    padding-bottom: calc(var(--space-size) * 4) !important;
  }

  .pl-4-xl,
  .px-4-xl {
    padding-left: calc(var(--space-size) * 4) !important;
  }

  .pr-4-xl,
  .px-4-xl {
    padding-right: calc(var(--space-size) * 4) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-5-xl {
    margin: calc(var(--space-size) * 5) !important;
  }

  .mt-5-xl,
  .my-5-xl {
    margin-top: calc(var(--space-size) * 5) !important;
  }

  .mb-5-xl,
  .my-5-xl {
    margin-bottom: calc(var(--space-size) * 5) !important;
  }

  .ml-5-xl,
  .mx-5-xl {
    margin-left: calc(var(--space-size) * 5) !important;
  }

  .mr-5-xl,
  .mx-5-xl {
    margin-right: calc(var(--space-size) * 5) !important;
  }

  /* Spacing */
  .p-5-xl {
    padding: calc(var(--space-size) * 5) !important;
  }

  .pt-5-xl,
  .py-5-xl {
    padding-top: calc(var(--space-size) * 5) !important;
  }

  .pb-5-xl,
  .py-5-xl {
    padding-bottom: calc(var(--space-size) * 5) !important;
  }

  .pl-5-xl,
  .px-5-xl {
    padding-left: calc(var(--space-size) * 5) !important;
  }

  .pr-5-xl,
  .px-5-xl {
    padding-right: calc(var(--space-size) * 5) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-6-xl {
    margin: calc(var(--space-size) * 6) !important;
  }

  .mt-6-xl,
  .my-6-xl {
    margin-top: calc(var(--space-size) * 6) !important;
  }

  .mb-6-xl,
  .my-6-xl {
    margin-bottom: calc(var(--space-size) * 6) !important;
  }

  .ml-6-xl,
  .mx-6-xl {
    margin-left: calc(var(--space-size) * 6) !important;
  }

  .mr-6-xl,
  .mx-6-xl {
    margin-right: calc(var(--space-size) * 6) !important;
  }

  /* Spacing */
  .p-6-xl {
    padding: calc(var(--space-size) * 6) !important;
  }

  .pt-6-xl,
  .py-6-xl {
    padding-top: calc(var(--space-size) * 6) !important;
  }

  .pb-6-xl,
  .py-6-xl {
    padding-bottom: calc(var(--space-size) * 6) !important;
  }

  .pl-6-xl,
  .px-6-xl {
    padding-left: calc(var(--space-size) * 6) !important;
  }

  .pr-6-xl,
  .px-6-xl {
    padding-right: calc(var(--space-size) * 6) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-8-xl {
    margin: calc(var(--space-size) * 8) !important;
  }

  .mt-8-xl,
  .my-8-xl {
    margin-top: calc(var(--space-size) * 8) !important;
  }

  .mb-8-xl,
  .my-8-xl {
    margin-bottom: calc(var(--space-size) * 8) !important;
  }

  .ml-8-xl,
  .mx-8-xl {
    margin-left: calc(var(--space-size) * 8) !important;
  }

  .mr-8-xl,
  .mx-8-xl {
    margin-right: calc(var(--space-size) * 8) !important;
  }

  /* Spacing */
  .p-8-xl {
    padding: calc(var(--space-size) * 8) !important;
  }

  .pt-8-xl,
  .py-8-xl {
    padding-top: calc(var(--space-size) * 8) !important;
  }

  .pb-8-xl,
  .py-8-xl {
    padding-bottom: calc(var(--space-size) * 8) !important;
  }

  .pl-8-xl,
  .px-8-xl {
    padding-left: calc(var(--space-size) * 8) !important;
  }

  .pr-8-xl,
  .px-8-xl {
    padding-right: calc(var(--space-size) * 8) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-10-xl {
    margin: calc(var(--space-size) * 10) !important;
  }

  .mt-10-xl,
  .my-10-xl {
    margin-top: calc(var(--space-size) * 10) !important;
  }

  .mb-10-xl,
  .my-10-xl {
    margin-bottom: calc(var(--space-size) * 10) !important;
  }

  .ml-10-xl,
  .mx-10-xl {
    margin-left: calc(var(--space-size) * 10) !important;
  }

  .mr-10-xl,
  .mx-10-xl {
    margin-right: calc(var(--space-size) * 10) !important;
  }

  /* Spacing */
  .p-10-xl {
    padding: calc(var(--space-size) * 10) !important;
  }

  .pt-10-xl,
  .py-10-xl {
    padding-top: calc(var(--space-size) * 10) !important;
  }

  .pb-10-xl,
  .py-10-xl {
    padding-bottom: calc(var(--space-size) * 10) !important;
  }

  .pl-10-xl,
  .px-10-xl {
    padding-left: calc(var(--space-size) * 10) !important;
  }

  .pr-10-xl,
  .px-10-xl {
    padding-right: calc(var(--space-size) * 10) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-12-xl {
    margin: calc(var(--space-size) * 12) !important;
  }

  .mt-12-xl,
  .my-12-xl {
    margin-top: calc(var(--space-size) * 12) !important;
  }

  .mb-12-xl,
  .my-12-xl {
    margin-bottom: calc(var(--space-size) * 12) !important;
  }

  .ml-12-xl,
  .mx-12-xl {
    margin-left: calc(var(--space-size) * 12) !important;
  }

  .mr-12-xl,
  .mx-12-xl {
    margin-right: calc(var(--space-size) * 12) !important;
  }

  /* Spacing */
  .p-12-xl {
    padding: calc(var(--space-size) * 12) !important;
  }

  .pt-12-xl,
  .py-12-xl {
    padding-top: calc(var(--space-size) * 12) !important;
  }

  .pb-12-xl,
  .py-12-xl {
    padding-bottom: calc(var(--space-size) * 12) !important;
  }

  .pl-12-xl,
  .px-12-xl {
    padding-left: calc(var(--space-size) * 12) !important;
  }

  .pr-12-xl,
  .px-12-xl {
    padding-right: calc(var(--space-size) * 12) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-16-xl {
    margin: calc(var(--space-size) * 16) !important;
  }

  .mt-16-xl,
  .my-16-xl {
    margin-top: calc(var(--space-size) * 16) !important;
  }

  .mb-16-xl,
  .my-16-xl {
    margin-bottom: calc(var(--space-size) * 16) !important;
  }

  .ml-16-xl,
  .mx-16-xl {
    margin-left: calc(var(--space-size) * 16) !important;
  }

  .mr-16-xl,
  .mx-16-xl {
    margin-right: calc(var(--space-size) * 16) !important;
  }

  /* Spacing */
  .p-16-xl {
    padding: calc(var(--space-size) * 16) !important;
  }

  .pt-16-xl,
  .py-16-xl {
    padding-top: calc(var(--space-size) * 16) !important;
  }

  .pb-16-xl,
  .py-16-xl {
    padding-bottom: calc(var(--space-size) * 16) !important;
  }

  .pl-16-xl,
  .px-16-xl {
    padding-left: calc(var(--space-size) * 16) !important;
  }

  .pr-16-xl,
  .px-16-xl {
    padding-right: calc(var(--space-size) * 16) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-20-xl {
    margin: calc(var(--space-size) * 20) !important;
  }

  .mt-20-xl,
  .my-20-xl {
    margin-top: calc(var(--space-size) * 20) !important;
  }

  .mb-20-xl,
  .my-20-xl {
    margin-bottom: calc(var(--space-size) * 20) !important;
  }

  .ml-20-xl,
  .mx-20-xl {
    margin-left: calc(var(--space-size) * 20) !important;
  }

  .mr-20-xl,
  .mx-20-xl {
    margin-right: calc(var(--space-size) * 20) !important;
  }

  /* Spacing */
  .p-20-xl {
    padding: calc(var(--space-size) * 20) !important;
  }

  .pt-20-xl,
  .py-20-xl {
    padding-top: calc(var(--space-size) * 20) !important;
  }

  .pb-20-xl,
  .py-20-xl {
    padding-bottom: calc(var(--space-size) * 20) !important;
  }

  .pl-20-xl,
  .px-20-xl {
    padding-left: calc(var(--space-size) * 20) !important;
  }

  .pr-20-xl,
  .px-20-xl {
    padding-right: calc(var(--space-size) * 20) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-24-xl {
    margin: calc(var(--space-size) * 24) !important;
  }

  .mt-24-xl,
  .my-24-xl {
    margin-top: calc(var(--space-size) * 24) !important;
  }

  .mb-24-xl,
  .my-24-xl {
    margin-bottom: calc(var(--space-size) * 24) !important;
  }

  .ml-24-xl,
  .mx-24-xl {
    margin-left: calc(var(--space-size) * 24) !important;
  }

  .mr-24-xl,
  .mx-24-xl {
    margin-right: calc(var(--space-size) * 24) !important;
  }

  /* Spacing */
  .p-24-xl {
    padding: calc(var(--space-size) * 24) !important;
  }

  .pt-24-xl,
  .py-24-xl {
    padding-top: calc(var(--space-size) * 24) !important;
  }

  .pb-24-xl,
  .py-24-xl {
    padding-bottom: calc(var(--space-size) * 24) !important;
  }

  .pl-24-xl,
  .px-24-xl {
    padding-left: calc(var(--space-size) * 24) !important;
  }

  .pr-24-xl,
  .px-24-xl {
    padding-right: calc(var(--space-size) * 24) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  /* Margin */
  .m-32-xl {
    margin: calc(var(--space-size) * 32) !important;
  }

  .mt-32-xl,
  .my-32-xl {
    margin-top: calc(var(--space-size) * 32) !important;
  }

  .mb-32-xl,
  .my-32-xl {
    margin-bottom: calc(var(--space-size) * 32) !important;
  }

  .ml-32-xl,
  .mx-32-xl {
    margin-left: calc(var(--space-size) * 32) !important;
  }

  .mr-32-xl,
  .mx-32-xl {
    margin-right: calc(var(--space-size) * 32) !important;
  }

  /* Spacing */
  .p-32-xl {
    padding: calc(var(--space-size) * 32) !important;
  }

  .pt-32-xl,
  .py-32-xl {
    padding-top: calc(var(--space-size) * 32) !important;
  }

  .pb-32-xl,
  .py-32-xl {
    padding-bottom: calc(var(--space-size) * 32) !important;
  }

  .pl-32-xl,
  .px-32-xl {
    padding-left: calc(var(--space-size) * 32) !important;
  }

  .pr-32-xl,
  .px-32-xl {
    padding-right: calc(var(--space-size) * 32) !important;
  }

  .ml-auto-xl,
  .mx-auto-xl {
    margin-left: auto !important;
  }

  .mr-auto-xl,
  .mx-auto-xl {
    margin-right: auto !important;
  }

  .mt-auto-xl,
  .my-auto-xl {
    margin-top: auto !important;
  }

  .mb-auto-xl,
  .my-auto-xl {
    margin-bottom: auto !important;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* TABLE */
.table {
  margin-bottom: 1.5rem;
  width: 100%;
  border-collapse: collapse;
  /* Allows us to set 0 margin in table cells */
  border-spacing: 0;
  text-align: center;
  /* Text center by default */
  /* Thicker border for table header */
  /* CUSTOM STYLES */
  /* All borders */
  /* Striped table */
  /* Decrease padding */
  /* Fixed title table */
  /* Borderless Table (for inner cells) */
}
.table td,
.table th {
  border: 1px solid rgba(222, 226, 230, 0.5);
  border-width: 0 0 1px;
  padding: 0.75rem;
  vertical-align: top;
  text-align: inherit;
  margin: 0;
}
.table tr {
  transition: all 0.3s;
}
.table tr.selected {
  /* Style a selected row */
  background-color: var(--cirrus-primary);
  color: #fff;
}
.table .table caption {
  padding-top: 0.75rem;
  padding-bottom: 0.75rem;
  color: #dee2e6;
  text-align: left;
  caption-side: bottom;
}
.table tr:not(.selected):hover,
.table.striped tbody tr:not(.selected):nth-child(even):hover {
  background-color: rgba(222, 226, 230, 0.15);
}
.table thead th,
.table thead {
  border-bottom: 2px solid rgba(222, 226, 230, 0.5);
}
.table thead th,
.table tfoot th {
  padding: 1rem;
}
.table tfoot th {
  border-top: 2px solid rgba(222, 226, 230, 0.5);
  border-bottom: none;
}
.table.bordered thead th,
.table.bordered thead {
  border-bottom: 1px solid rgba(222, 226, 230, 0.5);
}
.table.bordered td,
.table.bordered th {
  border: 1px solid rgba(219, 219, 219, 0.5);
}
.table.bordered thead td,
.table.bordered thead {
  border-width: 1px;
}
.table.striped tbody tr:nth-child(even) {
  background-color: rgba(0, 0, 0, 0.05);
}
.table.small td,
.table.small th {
  padding: 0.25rem 0.75rem;
}
.table.fixed-head thead {
  position: relative;
  display: block;
}
.table.fixed-head tbody {
  min-height: 200px;
  /* Set the height you want */
  display: block;
  /* Needed */
  overflow: auto;
  /* Shows scrollbars */
}
.table.fixed-head tr {
  display: table;
  width: 100%;
  /* Forces row to span container */
}
.table.borderless thead th,
.table.borderless th,
.table.borderless td {
  border: none;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* ANIMATIONS */
/* Keyframes */
/* Spinning loading animation */
@keyframes loading {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
}
/* Heart animation */
@keyframes pound {
  to {
    transform: scale(1.1);
  }
}
/* Bounce animations */
@keyframes bounce {
  from,
  20%,
  53%,
  80%,
  to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    transform: translate3d(0, 0, 0);
  }
  40%,
  43% {
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    transform: translate3d(0, -30px, 0);
  }
  70% {
    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
    transform: translate3d(0, -15px, 0);
  }
  90% {
    transform: translate3d(0, -4px, 0);
  }
}
@keyframes bounceIn {
  from,
  20%,
  40%,
  60%,
  80%,
  to {
    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
  }
  0% {
    opacity: 0;
    transform: scale3d(0.3, 0.3, 0.3);
  }
  20% {
    transform: scale3d(1.1, 1.1, 1.1);
  }
  40% {
    transform: scale3d(0.9, 0.9, 0.9);
  }
  60% {
    opacity: 1;
    transform: scale3d(1.03, 1.03, 1.03);
  }
  80% {
    transform: scale3d(0.97, 0.97, 0.97);
  }
  to {
    opacity: 1;
    transform: scale3d(1, 1, 1);
  }
}
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
/* Hover animation */
.hover-grow {
  /* Mouse leave */
  transition-duration: 0.32s;
}
.hover-grow:hover {
  /* Mouse enter */
  transform: scale(1.1);
  transition-duration: 0.08s;
}

.animated {
  animation-duration: 1s;
  animation-fill-mode: both;
  /* Loading button position relatively for loading spinner location */
}
.animated.loading {
  display: block;
  position: relative;
  /* Loading Spinner, align center by default */
  /* Hide text in loading button */
}
.animated.loading::after {
  border: 2px solid #ced4da;
  border-radius: 50%;
  border-right-color: transparent;
  border-top-color: transparent;
  content: '';
  display: block;
  height: 1rem;
  width: 1rem;
  left: calc(50% - 0.8em);
  top: calc(50% - 0.7407407407em);
  position: absolute;
  animation: loading 500ms infinite linear;
}
.animated.loading.loading-white::after {
  border-left-color: #fff;
  border-bottom-color: #fff;
}
.animated.loading.loading-left {
  padding-left: 3rem;
  /* Align spinner left */
}
.animated.loading.loading-left::after {
  left: 1rem;
  right: auto;
}
.animated.loading.loading-right {
  padding-right: 3rem;
  /* Align spinner right */
}
.animated.loading.loading-right::after {
  left: auto;
  right: 1rem;
}
.animated.loading.hide-text {
  color: transparent !important;
}
.animated.pulse {
  animation: pound 0.35s infinite alternate;
  vertical-align: baseline;
}
.animated.bounce {
  animation-name: bounce;
  transform-origin: center bottom;
}
.animated.bounceIn {
  animation-name: bounceIn;
}
.animated.fadeIn {
  animation-name: fadeIn;
}
.animated.infinite {
  animation-iteration-count: infinite;
}
.animated.infinite.alternate {
  animation-direction: alternate;
}
.animated.paused {
  animation-play-state: paused !important;
}
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Global Mixins
*/
/*
    Mixin that returns a property map as a series of CSS class properties.

    E.g. $xs: (color: #fff, opacity: 0.5), $sm... =>

    <class>--xs {
        color: #fff;
        opacity: 0.5;
    }
*/
/*
    Bring to front on focus.
*/
/* Avatar */
.avatar {
  border-radius: 50%;
  position: relative;
  display: block;
  margin: auto;
  font-size: 1.5rem;
  font-weight: lighter;
  width: 3.2rem;
  height: 3.2rem;
  background-color: var(--cirrus-primary);
  overflow: hidden;
  /* Draw text on image just like in Gmail */
}
.avatar::before {
  content: attr(data-text);
  color: currentColor;
  left: 50%;
  top: 50%;
  position: absolute;
  transform: translate(-50%, -50%);
}
.avatar.avatar--xs {
  font-size: 0.8rem;
  width: 1.6rem;
  height: 1.6rem;
}
.avatar.avatar--sm {
  font-size: 1rem;
  width: 2.4rem;
  height: 2.4rem;
}
.avatar.avatar--lg {
  font-size: 2rem;
  width: 4.8rem;
  height: 4.8rem;
}
.avatar.avatar--xl {
  font-size: 3rem;
  width: 6.4rem;
  height: 6.4rem;
}
.avatar img.padded {
  padding: 0.5rem;
  width: 100%;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Group selectors that share common styling.
*/
/* CARDS */
.card {
  background-color: #fff;
  backface-visibility: hidden;
  border-radius: 5px;
  box-shadow: 0px 5px 12px 0 rgba(42, 51, 83, 0.12), 0px 0px 5px rgba(0, 0, 0, 0.06);
  margin-bottom: 1rem;
  overflow: hidden;
  position: relative;
  transition: all 0.3s;
  /* Allow for the cards to have the same height when u-flex is used on the card */
  /*
      NOTE: To have cards with the same height, place the card class with col-x classes and have the parent have fluid-container.
  */
  /* Card Title Bar */
}
.card:hover {
  transition: all 0.3s;
  box-shadow: 0px 8px 20px 0 rgba(42, 51, 83, 0.12), 0 5px 5px rgba(0, 0, 0, 0.06);
}
.card:hover .card-image::after {
  opacity: 0;
}
.card.slide-up,
.card.card--slide-up {
  display: flex;
  flex-direction: column;
  max-height: 550px;
  /* More card components in second example */
}
.card.slide-up:hover .card-body,
.card.slide-up:hover .card__body,
.card.card--slide-up:hover .card-body,
.card.card--slide-up:hover .card__body {
  opacity: 1;
}
.card.slide-up:hover .card-image,
.card.slide-up:hover .card__image,
.card.card--slide-up:hover .card-image,
.card.card--slide-up:hover .card__image {
  transform: translateY(-40px);
}
.card.slide-up:hover .mobile-title,
.card.slide-up:hover .card__mobile-title,
.card.card--slide-up:hover .mobile-title,
.card.card--slide-up:hover .card__mobile-title {
  bottom: 35%;
  transition: all 0.3s ease-in-out;
}
.card.slide-up .mobile-title,
.card.slide-up .card__mobile-title,
.card.card--slide-up .mobile-title,
.card.card--slide-up .card__mobile-title {
  position: absolute;
  left: 0;
  bottom: 5rem;
  background-color: var(--cirrus-bg);
  -moz-transition: 0.3s ease-in-out;
  -ms-transition: all 0.3s ease-in-out;
  transition: 0.3s ease-in-out;
  width: 100%;
  padding: 1.5rem 0 0 0;
  backface-visibility: hidden;
}
.card.slide-up .card-body,
.card.slide-up .card__body,
.card.card--slide-up .card-body,
.card.card--slide-up .card__body {
  opacity: 0;
  overflow: auto;
  transition: all var(--animation-duration) ease-in-out;
}
.card.u-flex .content {
  flex-grow: 1;
}
.card p {
  margin: 1rem 0;
}
.card .card-image,
.card .card__image {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  border-radius: 5px 5px 0 0;
  background-size: cover;
  background-repeat: no-repeat;
  transition: all 0.3s ease-in-out;
}
.card .card-image::after,
.card .card__image::after {
  content: '';
  display: block;
  position: absolute;
  background-color: rgba(0, 0, 0, 0.1);
  top: 0;
  left: 0;
  right: 0;
  transition: all 500ms;
  bottom: 0;
}
.card .card-container,
.card .card__container {
  display: block;
  position: relative;
  height: 40%;
  min-height: 21rem;
  /* So it appears in html5 standards mode */
}
.card .title-container,
.card .card__title-container {
  position: absolute;
  bottom: 1rem;
  width: 100%;
  padding: 0 1rem;
}
.card .title-container .title,
.card .title-container .subtitle,
.card .card__title-container .title,
.card .card__title-container .subtitle {
  color: #fff;
  margin: 1rem auto;
}
.card .title-container .title,
.card .card__title-container .title {
  font-weight: 300;
  font-size: 1.5rem;
  margin-bottom: 0;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.25);
}
.card .action-bar,
.card .card__action-bar {
  user-select: none;
  padding: 0.5rem;
  margin: 0;
  border-top: 1px solid #e9ecef;
  box-sizing: border-box;
  transition: left 200ms cubic-bezier(0.075, 0.82, 0.165, 1);
  /* Add some padding to the buttons */
}
.card .action-bar .btn,
.card .action-bar button,
.card .action-bar [type='submit'],
.card .action-bar [type='reset'],
.card .action-bar [type='button'],
.card .card__action-bar .btn,
.card .card__action-bar button,
.card .card__action-bar [type='submit'],
.card .card__action-bar [type='reset'],
.card .card__action-bar [type='button'] {
  margin: 0 0.5rem;
}
.card .action-bar + .card-footer,
.card .action-bar + .card__footer,
.card .card__action-bar + .card-footer,
.card .card__action-bar + .card__footer {
  padding: 1rem 0;
  border-top: 1px solid #e9ecef;
}
.card .card-footer,
.card .card__footer {
  position: relative;
  font-size: 0.875rem;
  color: #868e96;
}
.card .card-head,
.card .card__header {
  align-items: stretch;
  display: flex;
  border-bottom: 1px solid #e9ecef;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* EXTENDED FORM */
/* Mixins */
/* Base class layout for extended form */
.form-ext-control {
  padding-left: 1.5rem;
  position: relative;
  /* Checkbox */
  /* Radio Button */
  /* Hides the original input */
  /* Toggle Switches */
}
.form-ext-control.form-ext-checkbox .form-ext-input:checked ~ .form-ext-label:after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3E%3Cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3E%3C/svg%3E");
}
.form-ext-control.form-ext-checkbox .form-ext-label:before {
  border-radius: 0.25rem;
}
.form-ext-control.form-ext-radio .form-ext-input:checked ~ .form-ext-label:after {
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='-4 -4 8 8'%3E%3Ccircle r='3' fill='%23fff'/%3E%3C/svg%3E");
}
.form-ext-control.form-ext-radio .form-ext-label:before {
  border-radius: 50%;
}
.form-ext-control .form-ext-input {
  opacity: 0;
  position: absolute;
  z-index: -1;
  /* Checked state */
}
.form-ext-control .form-ext-input:disabled ~ .form-ext-label {
  opacity: 0.4;
}
.form-ext-control .form-ext-input:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-primary);
}
.form-ext-control .form-ext-input.form-ext-input--primary:checked ~ .form-ext-label {
  color: var(--cirrus-primary);
}
.form-ext-control .form-ext-input.form-ext-input--primary:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-primary);
}
.form-ext-control .form-ext-input.form-ext-input--primary:focus ~ .form-ext-label:before {
  border-color: inherit;
  box-shadow: 0 0 0 0.2rem rgba(240, 61, 77, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-input.form-ext-input--gray:checked ~ .form-ext-label {
  color: var(--cirrus-gray);
}
.form-ext-control .form-ext-input.form-ext-input--gray:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-gray);
}
.form-ext-control .form-ext-input.form-ext-input--gray:focus ~ .form-ext-label:before {
  border-color: inherit;
  box-shadow: 0 0 0 0.2rem rgba(213, 215, 220, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-input.form-ext-input--dark:checked ~ .form-ext-label {
  color: var(--cirrus-dark);
}
.form-ext-control .form-ext-input.form-ext-input--dark:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-dark);
}
.form-ext-control .form-ext-input.form-ext-input--dark:focus ~ .form-ext-label:before {
  border-color: inherit;
  box-shadow: 0 0 0 0.2rem rgba(54, 54, 54, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-input.form-ext-input--link:checked ~ .form-ext-label {
  color: var(--cirrus-link);
}
.form-ext-control .form-ext-input.form-ext-input--link:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-link);
}
.form-ext-control .form-ext-input.form-ext-input--link:focus ~ .form-ext-label:before {
  border-color: inherit;
  box-shadow: 0 0 0 0.2rem rgba(94, 92, 199, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-input.form-ext-input--info:checked ~ .form-ext-label {
  color: var(--cirrus-info);
}
.form-ext-control .form-ext-input.form-ext-input--info:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-info);
}
.form-ext-control .form-ext-input.form-ext-input--info:focus ~ .form-ext-label:before {
  border-color: inherit;
  box-shadow: 0 0 0 0.2rem rgba(41, 114, 250, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-input.form-ext-input--success:checked ~ .form-ext-label {
  color: var(--cirrus-success);
}
.form-ext-control .form-ext-input.form-ext-input--success:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-success);
}
.form-ext-control .form-ext-input.form-ext-input--success:focus ~ .form-ext-label:before {
  border-color: inherit;
  box-shadow: 0 0 0 0.2rem rgba(13, 209, 87, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-input.form-ext-input--warning:checked ~ .form-ext-label {
  color: var(--cirrus-warning);
}
.form-ext-control .form-ext-input.form-ext-input--warning:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-warning);
}
.form-ext-control .form-ext-input.form-ext-input--warning:focus ~ .form-ext-label:before {
  border-color: inherit;
  box-shadow: 0 0 0 0.2rem rgba(250, 182, 51, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-input.form-ext-input--danger:checked ~ .form-ext-label {
  color: var(--cirrus-danger);
}
.form-ext-control .form-ext-input.form-ext-input--danger:checked ~ .form-ext-label:before {
  background-color: var(--cirrus-danger);
}
.form-ext-control .form-ext-input.form-ext-input--danger:focus ~ .form-ext-label:before {
  border-color: inherit;
  box-shadow: 0 0 0 0.2rem rgba(251, 65, 67, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-input:disabled ~ .form-ext-toggle__toggler {
  opacity: 0.5;
}
.form-ext-control .form-ext-toggle__label {
  align-items: center;
  display: flex;
  justify-content: space-between;
}
.form-ext-control .form-ext-toggle {
  cursor: pointer;
  position: relative;
  /* Toggle themes */
  /**
   * Accessibility
   */
  /**
   * Accessibility
   */
  /**
   * Accessibility
   */
  /**
   * Accessibility
   */
  /**
   * Accessibility
   */
  /**
   * Accessibility
   */
  /**
   * Accessibility
   */
  /**
   * Accessibility
   */
}
.form-ext-control .form-ext-toggle input[type='checkbox'],
.form-ext-control .form-ext-toggle input[type='radio'] {
  opacity: 0;
  position: absolute;
  z-index: -1;
}
.form-ext-control .form-ext-toggle .form-ext-toggle__toggler {
  border: 1px solid var(--cirrus-gray);
  border-radius: 6.25rem;
  color: var(--cirrus-gray);
  display: block;
  font-size: 9px;
  height: 1.5rem;
  position: relative;
  width: 3rem;
}
.form-ext-control .form-ext-toggle .form-ext-toggle__toggler i {
  display: inline-block;
}
.form-ext-control .form-ext-toggle input[type='checkbox']:checked + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle input[type='checkbox']:checked + * .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle input[type='radio']:checked + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle input[type='radio']:checked + * .form-ext-toggle__toggler {
  background-color: var(--cirrus-primary);
  border-color: var(--cirrus-primary);
  color: #fff;
  position: relative;
  transition: all 0.4s ease;
}
.form-ext-control
  .form-ext-toggle
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler
  i::after,
.form-ext-control
  .form-ext-toggle
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler
  i::after,
.form-ext-control .form-ext-toggle input[type='radio']:checked + .form-ext-toggle__toggler i::after,
.form-ext-control
  .form-ext-toggle
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler
  i::after {
  background-color: #fff;
  left: calc(100% - 20px);
}
.form-ext-control
  .form-ext-toggle
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler
  i::before,
.form-ext-control
  .form-ext-toggle
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler
  i::before,
.form-ext-control
  .form-ext-toggle
  input[type='radio']:checked
  + .form-ext-toggle__toggler
  i::before,
.form-ext-control
  .form-ext-toggle
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler
  i::before {
  color: #fff;
  content: attr(data-check-icon);
  text-align: left;
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--primary
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--primary
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--primary
  input[type='radio']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--primary
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler {
  background-color: var(--cirrus-primary);
  border-color: var(--cirrus-primary);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--primary .form-ext-toggle__toggler {
  border-color: var(--cirrus-primary);
  color: var(--cirrus-primary);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--primary .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-primary);
}
.form-ext-control .form-ext-toggle .form-ext-input:focus + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle .form-ext-input:focus ~ .form-ext-label:before {
  box-shadow: 0 0 0 0.2rem rgba(240, 61, 77, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--primary
  .form-ext-input:focus
  + .form-ext-toggle__toggler {
  box-shadow: 0 0 0 0.2rem rgba(240, 61, 77, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--gray
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--gray
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--gray
  input[type='radio']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--gray
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler {
  background-color: var(--cirrus-gray);
  border-color: var(--cirrus-gray);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--gray .form-ext-toggle__toggler {
  border-color: var(--cirrus-gray);
  color: var(--cirrus-gray);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--gray .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-gray);
}
.form-ext-control .form-ext-toggle .form-ext-input:focus + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle .form-ext-input:focus ~ .form-ext-label:before {
  box-shadow: 0 0 0 0.2rem rgba(213, 215, 220, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--gray
  .form-ext-input:focus
  + .form-ext-toggle__toggler {
  box-shadow: 0 0 0 0.2rem rgba(213, 215, 220, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--dark
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--dark
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--dark
  input[type='radio']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--dark
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler {
  background-color: var(--cirrus-dark);
  border-color: var(--cirrus-dark);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--dark .form-ext-toggle__toggler {
  border-color: var(--cirrus-dark);
  color: var(--cirrus-dark);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--dark .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-dark);
}
.form-ext-control .form-ext-toggle .form-ext-input:focus + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle .form-ext-input:focus ~ .form-ext-label:before {
  box-shadow: 0 0 0 0.2rem rgba(54, 54, 54, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--dark
  .form-ext-input:focus
  + .form-ext-toggle__toggler {
  box-shadow: 0 0 0 0.2rem rgba(54, 54, 54, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--link
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--link
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--link
  input[type='radio']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--link
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler {
  background-color: var(--cirrus-link);
  border-color: var(--cirrus-link);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--link .form-ext-toggle__toggler {
  border-color: var(--cirrus-link);
  color: var(--cirrus-link);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--link .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-link);
}
.form-ext-control .form-ext-toggle .form-ext-input:focus + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle .form-ext-input:focus ~ .form-ext-label:before {
  box-shadow: 0 0 0 0.2rem rgba(94, 92, 199, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--link
  .form-ext-input:focus
  + .form-ext-toggle__toggler {
  box-shadow: 0 0 0 0.2rem rgba(94, 92, 199, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--info
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--info
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--info
  input[type='radio']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--info
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler {
  background-color: var(--cirrus-info);
  border-color: var(--cirrus-info);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--info .form-ext-toggle__toggler {
  border-color: var(--cirrus-info);
  color: var(--cirrus-info);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--info .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-info);
}
.form-ext-control .form-ext-toggle .form-ext-input:focus + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle .form-ext-input:focus ~ .form-ext-label:before {
  box-shadow: 0 0 0 0.2rem rgba(41, 114, 250, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--info
  .form-ext-input:focus
  + .form-ext-toggle__toggler {
  box-shadow: 0 0 0 0.2rem rgba(41, 114, 250, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--success
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--success
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--success
  input[type='radio']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--success
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler {
  background-color: var(--cirrus-success);
  border-color: var(--cirrus-success);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--success .form-ext-toggle__toggler {
  border-color: var(--cirrus-success);
  color: var(--cirrus-success);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--success .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-success);
}
.form-ext-control .form-ext-toggle .form-ext-input:focus + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle .form-ext-input:focus ~ .form-ext-label:before {
  box-shadow: 0 0 0 0.2rem rgba(13, 209, 87, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--success
  .form-ext-input:focus
  + .form-ext-toggle__toggler {
  box-shadow: 0 0 0 0.2rem rgba(13, 209, 87, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--warning
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--warning
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--warning
  input[type='radio']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--warning
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler {
  background-color: var(--cirrus-warning);
  border-color: var(--cirrus-warning);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--warning .form-ext-toggle__toggler {
  border-color: var(--cirrus-warning);
  color: var(--cirrus-warning);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--warning .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-warning);
}
.form-ext-control .form-ext-toggle .form-ext-input:focus + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle .form-ext-input:focus ~ .form-ext-label:before {
  box-shadow: 0 0 0 0.2rem rgba(250, 182, 51, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--warning
  .form-ext-input:focus
  + .form-ext-toggle__toggler {
  box-shadow: 0 0 0 0.2rem rgba(250, 182, 51, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--danger
  input[type='checkbox']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--danger
  input[type='checkbox']:checked
  + *
  .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--danger
  input[type='radio']:checked
  + .form-ext-toggle__toggler,
.form-ext-control
  .form-ext-toggle.form-ext-toggle--danger
  input[type='radio']:checked
  + *
  .form-ext-toggle__toggler {
  background-color: var(--cirrus-danger);
  border-color: var(--cirrus-danger);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--danger .form-ext-toggle__toggler {
  border-color: var(--cirrus-danger);
  color: var(--cirrus-danger);
}
.form-ext-control .form-ext-toggle .form-ext-toggle--danger .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-danger);
}
.form-ext-control .form-ext-toggle .form-ext-input:focus + .form-ext-toggle__toggler,
.form-ext-control .form-ext-toggle .form-ext-input:focus ~ .form-ext-label:before {
  box-shadow: 0 0 0 0.2rem rgba(251, 65, 67, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control
  .form-ext-toggle.form-ext-toggle--danger
  .form-ext-input:focus
  + .form-ext-toggle__toggler {
  box-shadow: 0 0 0 0.2rem rgba(251, 65, 67, 0.55), inset 0 1px 8px rgba(0, 0, 0, 0.07);
}
.form-ext-control .form-ext-toggle .form-ext-toggle__toggler i::before,
.form-ext-control .form-ext-toggle .form-ext-toggle__toggler i::after {
  content: '';
  display: block;
  position: absolute;
}
.form-ext-control .form-ext-toggle .form-ext-toggle__toggler i::before {
  content: attr(data-uncheck-icon);
  padding: 2px 7px;
  line-height: 18px;
  text-align: right;
  top: 0;
  width: 65%;
  font-size: 12px;
}
.form-ext-control .form-ext-toggle .form-ext-toggle__toggler i::after {
  background-color: var(--cirrus-gray);
  border-radius: 50%;
  height: 16px;
  left: 4px;
  width: 16px;
  transform: translateY(-50%);
  transition: left var(--animation-duration) ease;
  text-align: left;
}
.form-ext-control .form-ext-label {
  margin-bottom: 0;
  position: relative;
  /* Base of custom form inputs */
}
.form-ext-control .form-ext-label:before,
.form-ext-control .form-ext-label:after {
  content: '';
  display: block;
  height: 1rem;
  left: -1.5rem;
  position: absolute;
  top: 0.3rem;
  transition: all var(--animation-duration);
  width: 1rem;
}
.form-ext-control .form-ext-label:before {
  background-color: var(--cirrus-light);
  border: 1px solid #dee2e6;
  border-radius: 0.25rem;
  pointer-events: none;
  user-select: none;
  box-sizing: border-box;
}
.form-ext-control .form-ext-label:after {
  background-position: center;
  background-repeat: no-repeat;
  background-size: 50% 50%;
}

.form-ext-control .form-ext-input:checked ~ .form-ext-label:before {
  border: none;
}
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* GRID */
:root {
  --gap-0: 0;
  --gap-1: 0.25rem;
  --gap-2: 0.5rem;
  --gap-3: 1rem;
  --gap-4: 1.25rem;
  --gap-5: 1.5rem;
  --gap-6: 2rem;
  --gap-7: 3rem;
  --gap-8: 4rem;
  --gap-9: 5rem;
  --gap-10: 7rem;
  --gap-11: 9rem;
  --gap-12: 12rem;
  --grid-gap: --gap-2;
  --grid-template-column: repeat(12, minmax(0, 1fr));
  --grid-column-start: auto;
  --grid-column-end: auto;
  --grid-row-start: auto;
  --grid-row-end: auto;
}

.grid {
  display: grid;
  grid-gap: var(--grid-gap);
  grid-template-columns: var(--grid-template-column);
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Gap */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
  /* Templates */
  /* Column expansion */
  /* Row expansion */
  /* Cell Column Start/End */
  /* Cell Row Start/End */
}
.grid.grid-gap-1 {
  --grid-gap: var(--gap-1);
}
.grid.grid-gap-2 {
  --grid-gap: var(--gap-2);
}
.grid.grid-gap-3 {
  --grid-gap: var(--gap-3);
}
.grid.grid-gap-4 {
  --grid-gap: var(--gap-4);
}
.grid.grid-gap-5 {
  --grid-gap: var(--gap-5);
}
.grid.grid-gap-6 {
  --grid-gap: var(--gap-6);
}
.grid.grid-gap-7 {
  --grid-gap: var(--gap-7);
}
.grid.grid-gap-8 {
  --grid-gap: var(--gap-8);
}
.grid.grid-gap-9 {
  --grid-gap: var(--gap-9);
}
.grid.grid-gap-10 {
  --grid-gap: var(--gap-10);
}
.grid.grid-gap-11 {
  --grid-gap: var(--gap-11);
}
.grid.grid-gap-12 {
  --grid-gap: var(--gap-12);
}
.grid.grid-cols-1 {
  --grid-template-column: repeat(1, minmax(0, 1fr));
}
.grid .grid-c-1 {
  grid-column: span 1 / span 1;
}
.grid .grid-r-1 {
  grid-row: span 1 / span 1;
}
.grid .grid-cs-1 {
  grid-column-start: 1;
}
.grid .grid-ce-1 {
  grid-column-end: 2;
}
.grid .grid-rs-1 {
  grid-row-start: 1;
}
.grid .grid-re-1 {
  grid-row-end: 2;
}
.grid.grid-cols-2 {
  --grid-template-column: repeat(2, minmax(0, 1fr));
}
.grid .grid-c-2 {
  grid-column: span 2 / span 2;
}
.grid .grid-r-2 {
  grid-row: span 2 / span 2;
}
.grid .grid-cs-2 {
  grid-column-start: 2;
}
.grid .grid-ce-2 {
  grid-column-end: 3;
}
.grid .grid-rs-2 {
  grid-row-start: 2;
}
.grid .grid-re-2 {
  grid-row-end: 3;
}
.grid.grid-cols-3 {
  --grid-template-column: repeat(3, minmax(0, 1fr));
}
.grid .grid-c-3 {
  grid-column: span 3 / span 3;
}
.grid .grid-r-3 {
  grid-row: span 3 / span 3;
}
.grid .grid-cs-3 {
  grid-column-start: 3;
}
.grid .grid-ce-3 {
  grid-column-end: 4;
}
.grid .grid-rs-3 {
  grid-row-start: 3;
}
.grid .grid-re-3 {
  grid-row-end: 4;
}
.grid.grid-cols-4 {
  --grid-template-column: repeat(4, minmax(0, 1fr));
}
.grid .grid-c-4 {
  grid-column: span 4 / span 4;
}
.grid .grid-r-4 {
  grid-row: span 4 / span 4;
}
.grid .grid-cs-4 {
  grid-column-start: 4;
}
.grid .grid-ce-4 {
  grid-column-end: 5;
}
.grid .grid-rs-4 {
  grid-row-start: 4;
}
.grid .grid-re-4 {
  grid-row-end: 5;
}
.grid.grid-cols-5 {
  --grid-template-column: repeat(5, minmax(0, 1fr));
}
.grid .grid-c-5 {
  grid-column: span 5 / span 5;
}
.grid .grid-r-5 {
  grid-row: span 5 / span 5;
}
.grid .grid-cs-5 {
  grid-column-start: 5;
}
.grid .grid-ce-5 {
  grid-column-end: 6;
}
.grid .grid-rs-5 {
  grid-row-start: 5;
}
.grid .grid-re-5 {
  grid-row-end: 6;
}
.grid.grid-cols-6 {
  --grid-template-column: repeat(6, minmax(0, 1fr));
}
.grid .grid-c-6 {
  grid-column: span 6 / span 6;
}
.grid .grid-r-6 {
  grid-row: span 6 / span 6;
}
.grid .grid-cs-6 {
  grid-column-start: 6;
}
.grid .grid-ce-6 {
  grid-column-end: 7;
}
.grid .grid-rs-6 {
  grid-row-start: 6;
}
.grid .grid-re-6 {
  grid-row-end: 7;
}
.grid.grid-cols-7 {
  --grid-template-column: repeat(7, minmax(0, 1fr));
}
.grid .grid-c-7 {
  grid-column: span 7 / span 7;
}
.grid .grid-r-7 {
  grid-row: span 7 / span 7;
}
.grid .grid-cs-7 {
  grid-column-start: 7;
}
.grid .grid-ce-7 {
  grid-column-end: 8;
}
.grid .grid-rs-7 {
  grid-row-start: 7;
}
.grid .grid-re-7 {
  grid-row-end: 8;
}
.grid.grid-cols-8 {
  --grid-template-column: repeat(8, minmax(0, 1fr));
}
.grid .grid-c-8 {
  grid-column: span 8 / span 8;
}
.grid .grid-r-8 {
  grid-row: span 8 / span 8;
}
.grid .grid-cs-8 {
  grid-column-start: 8;
}
.grid .grid-ce-8 {
  grid-column-end: 9;
}
.grid .grid-rs-8 {
  grid-row-start: 8;
}
.grid .grid-re-8 {
  grid-row-end: 9;
}
.grid.grid-cols-9 {
  --grid-template-column: repeat(9, minmax(0, 1fr));
}
.grid .grid-c-9 {
  grid-column: span 9 / span 9;
}
.grid .grid-r-9 {
  grid-row: span 9 / span 9;
}
.grid .grid-cs-9 {
  grid-column-start: 9;
}
.grid .grid-ce-9 {
  grid-column-end: 10;
}
.grid .grid-rs-9 {
  grid-row-start: 9;
}
.grid .grid-re-9 {
  grid-row-end: 10;
}
.grid.grid-cols-10 {
  --grid-template-column: repeat(10, minmax(0, 1fr));
}
.grid .grid-c-10 {
  grid-column: span 10 / span 10;
}
.grid .grid-r-10 {
  grid-row: span 10 / span 10;
}
.grid .grid-cs-10 {
  grid-column-start: 10;
}
.grid .grid-ce-10 {
  grid-column-end: 11;
}
.grid .grid-rs-10 {
  grid-row-start: 10;
}
.grid .grid-re-10 {
  grid-row-end: 11;
}
.grid.grid-cols-11 {
  --grid-template-column: repeat(11, minmax(0, 1fr));
}
.grid .grid-c-11 {
  grid-column: span 11 / span 11;
}
.grid .grid-r-11 {
  grid-row: span 11 / span 11;
}
.grid .grid-cs-11 {
  grid-column-start: 11;
}
.grid .grid-ce-11 {
  grid-column-end: 12;
}
.grid .grid-rs-11 {
  grid-row-start: 11;
}
.grid .grid-re-11 {
  grid-row-end: 12;
}
.grid.grid-cols-12 {
  --grid-template-column: repeat(12, minmax(0, 1fr));
}
.grid .grid-c-12 {
  grid-column: span 12 / span 12;
}
.grid .grid-r-12 {
  grid-row: span 12 / span 12;
}
.grid .grid-cs-12 {
  grid-column-start: 12;
}
.grid .grid-ce-12 {
  grid-column-end: 13;
}
.grid .grid-rs-12 {
  grid-row-start: 12;
}
.grid .grid-re-12 {
  grid-row-end: 13;
}
.grid .grid-ce-end {
  grid-column-end: -1;
}
.grid .grid-re-end {
  grid-row-end: -1;
}
.grid .grid-ce-auto {
  grid-column-end: auto;
}
.grid .grid-re-auto {
  grid-row-end: auto;
}
@media screen and (max-width: 767px) {
  .grid {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
}

@media screen and (min-width: 640px) {
  .grid-sm {
    display: grid;
    grid-gap: var(--grid-gap);
    grid-template-columns: var(--grid-template-column);
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
  }
  .grid-sm.grid-gap-1-sm {
    --grid-gap: var(--gap-1);
  }
  .grid-sm.grid-gap-2-sm {
    --grid-gap: var(--gap-2);
  }
  .grid-sm.grid-gap-3-sm {
    --grid-gap: var(--gap-3);
  }
  .grid-sm.grid-gap-4-sm {
    --grid-gap: var(--gap-4);
  }
  .grid-sm.grid-gap-5-sm {
    --grid-gap: var(--gap-5);
  }
  .grid-sm.grid-gap-6-sm {
    --grid-gap: var(--gap-6);
  }
  .grid-sm.grid-gap-7-sm {
    --grid-gap: var(--gap-7);
  }
  .grid-sm.grid-gap-8-sm {
    --grid-gap: var(--gap-8);
  }
  .grid-sm.grid-gap-9-sm {
    --grid-gap: var(--gap-9);
  }
  .grid-sm.grid-gap-10-sm {
    --grid-gap: var(--gap-10);
  }
  .grid-sm.grid-gap-11-sm {
    --grid-gap: var(--gap-11);
  }
  .grid-sm.grid-gap-12-sm {
    --grid-gap: var(--gap-12);
  }
  .grid-sm.grid-cols-1-sm {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
  .grid-sm .grid-c-1-sm {
    grid-column: span 1 / span 1;
  }
  .grid-sm .grid-r-1-sm {
    grid-row: span 1 / span 1;
  }
  .grid-sm .grid-cs-1-sm {
    grid-column-start: 1;
  }
  .grid-sm .grid-ce-1-sm {
    grid-column-end: 2;
  }
  .grid-sm .grid-rs-1-sm {
    grid-row-start: 1;
  }
  .grid-sm .grid-re-1-sm {
    grid-row-end: 2;
  }
  .grid-sm.grid-cols-2-sm {
    --grid-template-column: repeat(2, minmax(0, 1fr));
  }
  .grid-sm .grid-c-2-sm {
    grid-column: span 2 / span 2;
  }
  .grid-sm .grid-r-2-sm {
    grid-row: span 2 / span 2;
  }
  .grid-sm .grid-cs-2-sm {
    grid-column-start: 2;
  }
  .grid-sm .grid-ce-2-sm {
    grid-column-end: 3;
  }
  .grid-sm .grid-rs-2-sm {
    grid-row-start: 2;
  }
  .grid-sm .grid-re-2-sm {
    grid-row-end: 3;
  }
  .grid-sm.grid-cols-3-sm {
    --grid-template-column: repeat(3, minmax(0, 1fr));
  }
  .grid-sm .grid-c-3-sm {
    grid-column: span 3 / span 3;
  }
  .grid-sm .grid-r-3-sm {
    grid-row: span 3 / span 3;
  }
  .grid-sm .grid-cs-3-sm {
    grid-column-start: 3;
  }
  .grid-sm .grid-ce-3-sm {
    grid-column-end: 4;
  }
  .grid-sm .grid-rs-3-sm {
    grid-row-start: 3;
  }
  .grid-sm .grid-re-3-sm {
    grid-row-end: 4;
  }
  .grid-sm.grid-cols-4-sm {
    --grid-template-column: repeat(4, minmax(0, 1fr));
  }
  .grid-sm .grid-c-4-sm {
    grid-column: span 4 / span 4;
  }
  .grid-sm .grid-r-4-sm {
    grid-row: span 4 / span 4;
  }
  .grid-sm .grid-cs-4-sm {
    grid-column-start: 4;
  }
  .grid-sm .grid-ce-4-sm {
    grid-column-end: 5;
  }
  .grid-sm .grid-rs-4-sm {
    grid-row-start: 4;
  }
  .grid-sm .grid-re-4-sm {
    grid-row-end: 5;
  }
  .grid-sm.grid-cols-5-sm {
    --grid-template-column: repeat(5, minmax(0, 1fr));
  }
  .grid-sm .grid-c-5-sm {
    grid-column: span 5 / span 5;
  }
  .grid-sm .grid-r-5-sm {
    grid-row: span 5 / span 5;
  }
  .grid-sm .grid-cs-5-sm {
    grid-column-start: 5;
  }
  .grid-sm .grid-ce-5-sm {
    grid-column-end: 6;
  }
  .grid-sm .grid-rs-5-sm {
    grid-row-start: 5;
  }
  .grid-sm .grid-re-5-sm {
    grid-row-end: 6;
  }
  .grid-sm.grid-cols-6-sm {
    --grid-template-column: repeat(6, minmax(0, 1fr));
  }
  .grid-sm .grid-c-6-sm {
    grid-column: span 6 / span 6;
  }
  .grid-sm .grid-r-6-sm {
    grid-row: span 6 / span 6;
  }
  .grid-sm .grid-cs-6-sm {
    grid-column-start: 6;
  }
  .grid-sm .grid-ce-6-sm {
    grid-column-end: 7;
  }
  .grid-sm .grid-rs-6-sm {
    grid-row-start: 6;
  }
  .grid-sm .grid-re-6-sm {
    grid-row-end: 7;
  }
  .grid-sm.grid-cols-7-sm {
    --grid-template-column: repeat(7, minmax(0, 1fr));
  }
  .grid-sm .grid-c-7-sm {
    grid-column: span 7 / span 7;
  }
  .grid-sm .grid-r-7-sm {
    grid-row: span 7 / span 7;
  }
  .grid-sm .grid-cs-7-sm {
    grid-column-start: 7;
  }
  .grid-sm .grid-ce-7-sm {
    grid-column-end: 8;
  }
  .grid-sm .grid-rs-7-sm {
    grid-row-start: 7;
  }
  .grid-sm .grid-re-7-sm {
    grid-row-end: 8;
  }
  .grid-sm.grid-cols-8-sm {
    --grid-template-column: repeat(8, minmax(0, 1fr));
  }
  .grid-sm .grid-c-8-sm {
    grid-column: span 8 / span 8;
  }
  .grid-sm .grid-r-8-sm {
    grid-row: span 8 / span 8;
  }
  .grid-sm .grid-cs-8-sm {
    grid-column-start: 8;
  }
  .grid-sm .grid-ce-8-sm {
    grid-column-end: 9;
  }
  .grid-sm .grid-rs-8-sm {
    grid-row-start: 8;
  }
  .grid-sm .grid-re-8-sm {
    grid-row-end: 9;
  }
  .grid-sm.grid-cols-9-sm {
    --grid-template-column: repeat(9, minmax(0, 1fr));
  }
  .grid-sm .grid-c-9-sm {
    grid-column: span 9 / span 9;
  }
  .grid-sm .grid-r-9-sm {
    grid-row: span 9 / span 9;
  }
  .grid-sm .grid-cs-9-sm {
    grid-column-start: 9;
  }
  .grid-sm .grid-ce-9-sm {
    grid-column-end: 10;
  }
  .grid-sm .grid-rs-9-sm {
    grid-row-start: 9;
  }
  .grid-sm .grid-re-9-sm {
    grid-row-end: 10;
  }
  .grid-sm.grid-cols-10-sm {
    --grid-template-column: repeat(10, minmax(0, 1fr));
  }
  .grid-sm .grid-c-10-sm {
    grid-column: span 10 / span 10;
  }
  .grid-sm .grid-r-10-sm {
    grid-row: span 10 / span 10;
  }
  .grid-sm .grid-cs-10-sm {
    grid-column-start: 10;
  }
  .grid-sm .grid-ce-10-sm {
    grid-column-end: 11;
  }
  .grid-sm .grid-rs-10-sm {
    grid-row-start: 10;
  }
  .grid-sm .grid-re-10-sm {
    grid-row-end: 11;
  }
  .grid-sm.grid-cols-11-sm {
    --grid-template-column: repeat(11, minmax(0, 1fr));
  }
  .grid-sm .grid-c-11-sm {
    grid-column: span 11 / span 11;
  }
  .grid-sm .grid-r-11-sm {
    grid-row: span 11 / span 11;
  }
  .grid-sm .grid-cs-11-sm {
    grid-column-start: 11;
  }
  .grid-sm .grid-ce-11-sm {
    grid-column-end: 12;
  }
  .grid-sm .grid-rs-11-sm {
    grid-row-start: 11;
  }
  .grid-sm .grid-re-11-sm {
    grid-row-end: 12;
  }
  .grid-sm.grid-cols-12-sm {
    --grid-template-column: repeat(12, minmax(0, 1fr));
  }
  .grid-sm .grid-c-12-sm {
    grid-column: span 12 / span 12;
  }
  .grid-sm .grid-r-12-sm {
    grid-row: span 12 / span 12;
  }
  .grid-sm .grid-cs-12-sm {
    grid-column-start: 12;
  }
  .grid-sm .grid-ce-12-sm {
    grid-column-end: 13;
  }
  .grid-sm .grid-rs-12-sm {
    grid-row-start: 12;
  }
  .grid-sm .grid-re-12-sm {
    grid-row-end: 13;
  }
  .grid-sm .grid-ce-end-sm {
    grid-column-end: -1;
  }
  .grid-sm .grid-re-end-sm {
    grid-row-end: -1;
  }
  .grid-sm .grid-ce-auto-sm {
    grid-column-end: auto;
  }
  .grid-sm .grid-re-auto-sm {
    grid-row-end: auto;
  }
}
@media screen and (min-width: 640px) and (max-width: 767px) {
  .grid-sm {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
}
@media screen and (min-width: 768px) {
  .grid-md {
    display: grid;
    grid-gap: var(--grid-gap);
    grid-template-columns: var(--grid-template-column);
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
  }
  .grid-md.grid-gap-1-md {
    --grid-gap: var(--gap-1);
  }
  .grid-md.grid-gap-2-md {
    --grid-gap: var(--gap-2);
  }
  .grid-md.grid-gap-3-md {
    --grid-gap: var(--gap-3);
  }
  .grid-md.grid-gap-4-md {
    --grid-gap: var(--gap-4);
  }
  .grid-md.grid-gap-5-md {
    --grid-gap: var(--gap-5);
  }
  .grid-md.grid-gap-6-md {
    --grid-gap: var(--gap-6);
  }
  .grid-md.grid-gap-7-md {
    --grid-gap: var(--gap-7);
  }
  .grid-md.grid-gap-8-md {
    --grid-gap: var(--gap-8);
  }
  .grid-md.grid-gap-9-md {
    --grid-gap: var(--gap-9);
  }
  .grid-md.grid-gap-10-md {
    --grid-gap: var(--gap-10);
  }
  .grid-md.grid-gap-11-md {
    --grid-gap: var(--gap-11);
  }
  .grid-md.grid-gap-12-md {
    --grid-gap: var(--gap-12);
  }
  .grid-md.grid-cols-1-md {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
  .grid-md .grid-c-1-md {
    grid-column: span 1 / span 1;
  }
  .grid-md .grid-r-1-md {
    grid-row: span 1 / span 1;
  }
  .grid-md .grid-cs-1-md {
    grid-column-start: 1;
  }
  .grid-md .grid-ce-1-md {
    grid-column-end: 2;
  }
  .grid-md .grid-rs-1-md {
    grid-row-start: 1;
  }
  .grid-md .grid-re-1-md {
    grid-row-end: 2;
  }
  .grid-md.grid-cols-2-md {
    --grid-template-column: repeat(2, minmax(0, 1fr));
  }
  .grid-md .grid-c-2-md {
    grid-column: span 2 / span 2;
  }
  .grid-md .grid-r-2-md {
    grid-row: span 2 / span 2;
  }
  .grid-md .grid-cs-2-md {
    grid-column-start: 2;
  }
  .grid-md .grid-ce-2-md {
    grid-column-end: 3;
  }
  .grid-md .grid-rs-2-md {
    grid-row-start: 2;
  }
  .grid-md .grid-re-2-md {
    grid-row-end: 3;
  }
  .grid-md.grid-cols-3-md {
    --grid-template-column: repeat(3, minmax(0, 1fr));
  }
  .grid-md .grid-c-3-md {
    grid-column: span 3 / span 3;
  }
  .grid-md .grid-r-3-md {
    grid-row: span 3 / span 3;
  }
  .grid-md .grid-cs-3-md {
    grid-column-start: 3;
  }
  .grid-md .grid-ce-3-md {
    grid-column-end: 4;
  }
  .grid-md .grid-rs-3-md {
    grid-row-start: 3;
  }
  .grid-md .grid-re-3-md {
    grid-row-end: 4;
  }
  .grid-md.grid-cols-4-md {
    --grid-template-column: repeat(4, minmax(0, 1fr));
  }
  .grid-md .grid-c-4-md {
    grid-column: span 4 / span 4;
  }
  .grid-md .grid-r-4-md {
    grid-row: span 4 / span 4;
  }
  .grid-md .grid-cs-4-md {
    grid-column-start: 4;
  }
  .grid-md .grid-ce-4-md {
    grid-column-end: 5;
  }
  .grid-md .grid-rs-4-md {
    grid-row-start: 4;
  }
  .grid-md .grid-re-4-md {
    grid-row-end: 5;
  }
  .grid-md.grid-cols-5-md {
    --grid-template-column: repeat(5, minmax(0, 1fr));
  }
  .grid-md .grid-c-5-md {
    grid-column: span 5 / span 5;
  }
  .grid-md .grid-r-5-md {
    grid-row: span 5 / span 5;
  }
  .grid-md .grid-cs-5-md {
    grid-column-start: 5;
  }
  .grid-md .grid-ce-5-md {
    grid-column-end: 6;
  }
  .grid-md .grid-rs-5-md {
    grid-row-start: 5;
  }
  .grid-md .grid-re-5-md {
    grid-row-end: 6;
  }
  .grid-md.grid-cols-6-md {
    --grid-template-column: repeat(6, minmax(0, 1fr));
  }
  .grid-md .grid-c-6-md {
    grid-column: span 6 / span 6;
  }
  .grid-md .grid-r-6-md {
    grid-row: span 6 / span 6;
  }
  .grid-md .grid-cs-6-md {
    grid-column-start: 6;
  }
  .grid-md .grid-ce-6-md {
    grid-column-end: 7;
  }
  .grid-md .grid-rs-6-md {
    grid-row-start: 6;
  }
  .grid-md .grid-re-6-md {
    grid-row-end: 7;
  }
  .grid-md.grid-cols-7-md {
    --grid-template-column: repeat(7, minmax(0, 1fr));
  }
  .grid-md .grid-c-7-md {
    grid-column: span 7 / span 7;
  }
  .grid-md .grid-r-7-md {
    grid-row: span 7 / span 7;
  }
  .grid-md .grid-cs-7-md {
    grid-column-start: 7;
  }
  .grid-md .grid-ce-7-md {
    grid-column-end: 8;
  }
  .grid-md .grid-rs-7-md {
    grid-row-start: 7;
  }
  .grid-md .grid-re-7-md {
    grid-row-end: 8;
  }
  .grid-md.grid-cols-8-md {
    --grid-template-column: repeat(8, minmax(0, 1fr));
  }
  .grid-md .grid-c-8-md {
    grid-column: span 8 / span 8;
  }
  .grid-md .grid-r-8-md {
    grid-row: span 8 / span 8;
  }
  .grid-md .grid-cs-8-md {
    grid-column-start: 8;
  }
  .grid-md .grid-ce-8-md {
    grid-column-end: 9;
  }
  .grid-md .grid-rs-8-md {
    grid-row-start: 8;
  }
  .grid-md .grid-re-8-md {
    grid-row-end: 9;
  }
  .grid-md.grid-cols-9-md {
    --grid-template-column: repeat(9, minmax(0, 1fr));
  }
  .grid-md .grid-c-9-md {
    grid-column: span 9 / span 9;
  }
  .grid-md .grid-r-9-md {
    grid-row: span 9 / span 9;
  }
  .grid-md .grid-cs-9-md {
    grid-column-start: 9;
  }
  .grid-md .grid-ce-9-md {
    grid-column-end: 10;
  }
  .grid-md .grid-rs-9-md {
    grid-row-start: 9;
  }
  .grid-md .grid-re-9-md {
    grid-row-end: 10;
  }
  .grid-md.grid-cols-10-md {
    --grid-template-column: repeat(10, minmax(0, 1fr));
  }
  .grid-md .grid-c-10-md {
    grid-column: span 10 / span 10;
  }
  .grid-md .grid-r-10-md {
    grid-row: span 10 / span 10;
  }
  .grid-md .grid-cs-10-md {
    grid-column-start: 10;
  }
  .grid-md .grid-ce-10-md {
    grid-column-end: 11;
  }
  .grid-md .grid-rs-10-md {
    grid-row-start: 10;
  }
  .grid-md .grid-re-10-md {
    grid-row-end: 11;
  }
  .grid-md.grid-cols-11-md {
    --grid-template-column: repeat(11, minmax(0, 1fr));
  }
  .grid-md .grid-c-11-md {
    grid-column: span 11 / span 11;
  }
  .grid-md .grid-r-11-md {
    grid-row: span 11 / span 11;
  }
  .grid-md .grid-cs-11-md {
    grid-column-start: 11;
  }
  .grid-md .grid-ce-11-md {
    grid-column-end: 12;
  }
  .grid-md .grid-rs-11-md {
    grid-row-start: 11;
  }
  .grid-md .grid-re-11-md {
    grid-row-end: 12;
  }
  .grid-md.grid-cols-12-md {
    --grid-template-column: repeat(12, minmax(0, 1fr));
  }
  .grid-md .grid-c-12-md {
    grid-column: span 12 / span 12;
  }
  .grid-md .grid-r-12-md {
    grid-row: span 12 / span 12;
  }
  .grid-md .grid-cs-12-md {
    grid-column-start: 12;
  }
  .grid-md .grid-ce-12-md {
    grid-column-end: 13;
  }
  .grid-md .grid-rs-12-md {
    grid-row-start: 12;
  }
  .grid-md .grid-re-12-md {
    grid-row-end: 13;
  }
  .grid-md .grid-ce-end-md {
    grid-column-end: -1;
  }
  .grid-md .grid-re-end-md {
    grid-row-end: -1;
  }
  .grid-md .grid-ce-auto-md {
    grid-column-end: auto;
  }
  .grid-md .grid-re-auto-md {
    grid-row-end: auto;
  }
}
@media screen and (min-width: 768px) and (max-width: 767px) {
  .grid-md {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
}
@media screen and (min-width: 1024px) {
  .grid-lg {
    display: grid;
    grid-gap: var(--grid-gap);
    grid-template-columns: var(--grid-template-column);
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
  }
  .grid-lg.grid-gap-1-lg {
    --grid-gap: var(--gap-1);
  }
  .grid-lg.grid-gap-2-lg {
    --grid-gap: var(--gap-2);
  }
  .grid-lg.grid-gap-3-lg {
    --grid-gap: var(--gap-3);
  }
  .grid-lg.grid-gap-4-lg {
    --grid-gap: var(--gap-4);
  }
  .grid-lg.grid-gap-5-lg {
    --grid-gap: var(--gap-5);
  }
  .grid-lg.grid-gap-6-lg {
    --grid-gap: var(--gap-6);
  }
  .grid-lg.grid-gap-7-lg {
    --grid-gap: var(--gap-7);
  }
  .grid-lg.grid-gap-8-lg {
    --grid-gap: var(--gap-8);
  }
  .grid-lg.grid-gap-9-lg {
    --grid-gap: var(--gap-9);
  }
  .grid-lg.grid-gap-10-lg {
    --grid-gap: var(--gap-10);
  }
  .grid-lg.grid-gap-11-lg {
    --grid-gap: var(--gap-11);
  }
  .grid-lg.grid-gap-12-lg {
    --grid-gap: var(--gap-12);
  }
  .grid-lg.grid-cols-1-lg {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
  .grid-lg .grid-c-1-lg {
    grid-column: span 1 / span 1;
  }
  .grid-lg .grid-r-1-lg {
    grid-row: span 1 / span 1;
  }
  .grid-lg .grid-cs-1-lg {
    grid-column-start: 1;
  }
  .grid-lg .grid-ce-1-lg {
    grid-column-end: 2;
  }
  .grid-lg .grid-rs-1-lg {
    grid-row-start: 1;
  }
  .grid-lg .grid-re-1-lg {
    grid-row-end: 2;
  }
  .grid-lg.grid-cols-2-lg {
    --grid-template-column: repeat(2, minmax(0, 1fr));
  }
  .grid-lg .grid-c-2-lg {
    grid-column: span 2 / span 2;
  }
  .grid-lg .grid-r-2-lg {
    grid-row: span 2 / span 2;
  }
  .grid-lg .grid-cs-2-lg {
    grid-column-start: 2;
  }
  .grid-lg .grid-ce-2-lg {
    grid-column-end: 3;
  }
  .grid-lg .grid-rs-2-lg {
    grid-row-start: 2;
  }
  .grid-lg .grid-re-2-lg {
    grid-row-end: 3;
  }
  .grid-lg.grid-cols-3-lg {
    --grid-template-column: repeat(3, minmax(0, 1fr));
  }
  .grid-lg .grid-c-3-lg {
    grid-column: span 3 / span 3;
  }
  .grid-lg .grid-r-3-lg {
    grid-row: span 3 / span 3;
  }
  .grid-lg .grid-cs-3-lg {
    grid-column-start: 3;
  }
  .grid-lg .grid-ce-3-lg {
    grid-column-end: 4;
  }
  .grid-lg .grid-rs-3-lg {
    grid-row-start: 3;
  }
  .grid-lg .grid-re-3-lg {
    grid-row-end: 4;
  }
  .grid-lg.grid-cols-4-lg {
    --grid-template-column: repeat(4, minmax(0, 1fr));
  }
  .grid-lg .grid-c-4-lg {
    grid-column: span 4 / span 4;
  }
  .grid-lg .grid-r-4-lg {
    grid-row: span 4 / span 4;
  }
  .grid-lg .grid-cs-4-lg {
    grid-column-start: 4;
  }
  .grid-lg .grid-ce-4-lg {
    grid-column-end: 5;
  }
  .grid-lg .grid-rs-4-lg {
    grid-row-start: 4;
  }
  .grid-lg .grid-re-4-lg {
    grid-row-end: 5;
  }
  .grid-lg.grid-cols-5-lg {
    --grid-template-column: repeat(5, minmax(0, 1fr));
  }
  .grid-lg .grid-c-5-lg {
    grid-column: span 5 / span 5;
  }
  .grid-lg .grid-r-5-lg {
    grid-row: span 5 / span 5;
  }
  .grid-lg .grid-cs-5-lg {
    grid-column-start: 5;
  }
  .grid-lg .grid-ce-5-lg {
    grid-column-end: 6;
  }
  .grid-lg .grid-rs-5-lg {
    grid-row-start: 5;
  }
  .grid-lg .grid-re-5-lg {
    grid-row-end: 6;
  }
  .grid-lg.grid-cols-6-lg {
    --grid-template-column: repeat(6, minmax(0, 1fr));
  }
  .grid-lg .grid-c-6-lg {
    grid-column: span 6 / span 6;
  }
  .grid-lg .grid-r-6-lg {
    grid-row: span 6 / span 6;
  }
  .grid-lg .grid-cs-6-lg {
    grid-column-start: 6;
  }
  .grid-lg .grid-ce-6-lg {
    grid-column-end: 7;
  }
  .grid-lg .grid-rs-6-lg {
    grid-row-start: 6;
  }
  .grid-lg .grid-re-6-lg {
    grid-row-end: 7;
  }
  .grid-lg.grid-cols-7-lg {
    --grid-template-column: repeat(7, minmax(0, 1fr));
  }
  .grid-lg .grid-c-7-lg {
    grid-column: span 7 / span 7;
  }
  .grid-lg .grid-r-7-lg {
    grid-row: span 7 / span 7;
  }
  .grid-lg .grid-cs-7-lg {
    grid-column-start: 7;
  }
  .grid-lg .grid-ce-7-lg {
    grid-column-end: 8;
  }
  .grid-lg .grid-rs-7-lg {
    grid-row-start: 7;
  }
  .grid-lg .grid-re-7-lg {
    grid-row-end: 8;
  }
  .grid-lg.grid-cols-8-lg {
    --grid-template-column: repeat(8, minmax(0, 1fr));
  }
  .grid-lg .grid-c-8-lg {
    grid-column: span 8 / span 8;
  }
  .grid-lg .grid-r-8-lg {
    grid-row: span 8 / span 8;
  }
  .grid-lg .grid-cs-8-lg {
    grid-column-start: 8;
  }
  .grid-lg .grid-ce-8-lg {
    grid-column-end: 9;
  }
  .grid-lg .grid-rs-8-lg {
    grid-row-start: 8;
  }
  .grid-lg .grid-re-8-lg {
    grid-row-end: 9;
  }
  .grid-lg.grid-cols-9-lg {
    --grid-template-column: repeat(9, minmax(0, 1fr));
  }
  .grid-lg .grid-c-9-lg {
    grid-column: span 9 / span 9;
  }
  .grid-lg .grid-r-9-lg {
    grid-row: span 9 / span 9;
  }
  .grid-lg .grid-cs-9-lg {
    grid-column-start: 9;
  }
  .grid-lg .grid-ce-9-lg {
    grid-column-end: 10;
  }
  .grid-lg .grid-rs-9-lg {
    grid-row-start: 9;
  }
  .grid-lg .grid-re-9-lg {
    grid-row-end: 10;
  }
  .grid-lg.grid-cols-10-lg {
    --grid-template-column: repeat(10, minmax(0, 1fr));
  }
  .grid-lg .grid-c-10-lg {
    grid-column: span 10 / span 10;
  }
  .grid-lg .grid-r-10-lg {
    grid-row: span 10 / span 10;
  }
  .grid-lg .grid-cs-10-lg {
    grid-column-start: 10;
  }
  .grid-lg .grid-ce-10-lg {
    grid-column-end: 11;
  }
  .grid-lg .grid-rs-10-lg {
    grid-row-start: 10;
  }
  .grid-lg .grid-re-10-lg {
    grid-row-end: 11;
  }
  .grid-lg.grid-cols-11-lg {
    --grid-template-column: repeat(11, minmax(0, 1fr));
  }
  .grid-lg .grid-c-11-lg {
    grid-column: span 11 / span 11;
  }
  .grid-lg .grid-r-11-lg {
    grid-row: span 11 / span 11;
  }
  .grid-lg .grid-cs-11-lg {
    grid-column-start: 11;
  }
  .grid-lg .grid-ce-11-lg {
    grid-column-end: 12;
  }
  .grid-lg .grid-rs-11-lg {
    grid-row-start: 11;
  }
  .grid-lg .grid-re-11-lg {
    grid-row-end: 12;
  }
  .grid-lg.grid-cols-12-lg {
    --grid-template-column: repeat(12, minmax(0, 1fr));
  }
  .grid-lg .grid-c-12-lg {
    grid-column: span 12 / span 12;
  }
  .grid-lg .grid-r-12-lg {
    grid-row: span 12 / span 12;
  }
  .grid-lg .grid-cs-12-lg {
    grid-column-start: 12;
  }
  .grid-lg .grid-ce-12-lg {
    grid-column-end: 13;
  }
  .grid-lg .grid-rs-12-lg {
    grid-row-start: 12;
  }
  .grid-lg .grid-re-12-lg {
    grid-row-end: 13;
  }
  .grid-lg .grid-ce-end-lg {
    grid-column-end: -1;
  }
  .grid-lg .grid-re-end-lg {
    grid-row-end: -1;
  }
  .grid-lg .grid-ce-auto-lg {
    grid-column-end: auto;
  }
  .grid-lg .grid-re-auto-lg {
    grid-row-end: auto;
  }
}
@media screen and (min-width: 1024px) and (max-width: 767px) {
  .grid-lg {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
}
@media screen and (min-width: 1280px) {
  .grid-xl {
    display: grid;
    grid-gap: var(--grid-gap);
    grid-template-columns: var(--grid-template-column);
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Gap */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
    /* Templates */
    /* Column expansion */
    /* Row expansion */
    /* Cell Column Start/End */
    /* Cell Row Start/End */
  }
  .grid-xl.grid-gap-1-xl {
    --grid-gap: var(--gap-1);
  }
  .grid-xl.grid-gap-2-xl {
    --grid-gap: var(--gap-2);
  }
  .grid-xl.grid-gap-3-xl {
    --grid-gap: var(--gap-3);
  }
  .grid-xl.grid-gap-4-xl {
    --grid-gap: var(--gap-4);
  }
  .grid-xl.grid-gap-5-xl {
    --grid-gap: var(--gap-5);
  }
  .grid-xl.grid-gap-6-xl {
    --grid-gap: var(--gap-6);
  }
  .grid-xl.grid-gap-7-xl {
    --grid-gap: var(--gap-7);
  }
  .grid-xl.grid-gap-8-xl {
    --grid-gap: var(--gap-8);
  }
  .grid-xl.grid-gap-9-xl {
    --grid-gap: var(--gap-9);
  }
  .grid-xl.grid-gap-10-xl {
    --grid-gap: var(--gap-10);
  }
  .grid-xl.grid-gap-11-xl {
    --grid-gap: var(--gap-11);
  }
  .grid-xl.grid-gap-12-xl {
    --grid-gap: var(--gap-12);
  }
  .grid-xl.grid-cols-1-xl {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
  .grid-xl .grid-c-1-xl {
    grid-column: span 1 / span 1;
  }
  .grid-xl .grid-r-1-xl {
    grid-row: span 1 / span 1;
  }
  .grid-xl .grid-cs-1-xl {
    grid-column-start: 1;
  }
  .grid-xl .grid-ce-1-xl {
    grid-column-end: 2;
  }
  .grid-xl .grid-rs-1-xl {
    grid-row-start: 1;
  }
  .grid-xl .grid-re-1-xl {
    grid-row-end: 2;
  }
  .grid-xl.grid-cols-2-xl {
    --grid-template-column: repeat(2, minmax(0, 1fr));
  }
  .grid-xl .grid-c-2-xl {
    grid-column: span 2 / span 2;
  }
  .grid-xl .grid-r-2-xl {
    grid-row: span 2 / span 2;
  }
  .grid-xl .grid-cs-2-xl {
    grid-column-start: 2;
  }
  .grid-xl .grid-ce-2-xl {
    grid-column-end: 3;
  }
  .grid-xl .grid-rs-2-xl {
    grid-row-start: 2;
  }
  .grid-xl .grid-re-2-xl {
    grid-row-end: 3;
  }
  .grid-xl.grid-cols-3-xl {
    --grid-template-column: repeat(3, minmax(0, 1fr));
  }
  .grid-xl .grid-c-3-xl {
    grid-column: span 3 / span 3;
  }
  .grid-xl .grid-r-3-xl {
    grid-row: span 3 / span 3;
  }
  .grid-xl .grid-cs-3-xl {
    grid-column-start: 3;
  }
  .grid-xl .grid-ce-3-xl {
    grid-column-end: 4;
  }
  .grid-xl .grid-rs-3-xl {
    grid-row-start: 3;
  }
  .grid-xl .grid-re-3-xl {
    grid-row-end: 4;
  }
  .grid-xl.grid-cols-4-xl {
    --grid-template-column: repeat(4, minmax(0, 1fr));
  }
  .grid-xl .grid-c-4-xl {
    grid-column: span 4 / span 4;
  }
  .grid-xl .grid-r-4-xl {
    grid-row: span 4 / span 4;
  }
  .grid-xl .grid-cs-4-xl {
    grid-column-start: 4;
  }
  .grid-xl .grid-ce-4-xl {
    grid-column-end: 5;
  }
  .grid-xl .grid-rs-4-xl {
    grid-row-start: 4;
  }
  .grid-xl .grid-re-4-xl {
    grid-row-end: 5;
  }
  .grid-xl.grid-cols-5-xl {
    --grid-template-column: repeat(5, minmax(0, 1fr));
  }
  .grid-xl .grid-c-5-xl {
    grid-column: span 5 / span 5;
  }
  .grid-xl .grid-r-5-xl {
    grid-row: span 5 / span 5;
  }
  .grid-xl .grid-cs-5-xl {
    grid-column-start: 5;
  }
  .grid-xl .grid-ce-5-xl {
    grid-column-end: 6;
  }
  .grid-xl .grid-rs-5-xl {
    grid-row-start: 5;
  }
  .grid-xl .grid-re-5-xl {
    grid-row-end: 6;
  }
  .grid-xl.grid-cols-6-xl {
    --grid-template-column: repeat(6, minmax(0, 1fr));
  }
  .grid-xl .grid-c-6-xl {
    grid-column: span 6 / span 6;
  }
  .grid-xl .grid-r-6-xl {
    grid-row: span 6 / span 6;
  }
  .grid-xl .grid-cs-6-xl {
    grid-column-start: 6;
  }
  .grid-xl .grid-ce-6-xl {
    grid-column-end: 7;
  }
  .grid-xl .grid-rs-6-xl {
    grid-row-start: 6;
  }
  .grid-xl .grid-re-6-xl {
    grid-row-end: 7;
  }
  .grid-xl.grid-cols-7-xl {
    --grid-template-column: repeat(7, minmax(0, 1fr));
  }
  .grid-xl .grid-c-7-xl {
    grid-column: span 7 / span 7;
  }
  .grid-xl .grid-r-7-xl {
    grid-row: span 7 / span 7;
  }
  .grid-xl .grid-cs-7-xl {
    grid-column-start: 7;
  }
  .grid-xl .grid-ce-7-xl {
    grid-column-end: 8;
  }
  .grid-xl .grid-rs-7-xl {
    grid-row-start: 7;
  }
  .grid-xl .grid-re-7-xl {
    grid-row-end: 8;
  }
  .grid-xl.grid-cols-8-xl {
    --grid-template-column: repeat(8, minmax(0, 1fr));
  }
  .grid-xl .grid-c-8-xl {
    grid-column: span 8 / span 8;
  }
  .grid-xl .grid-r-8-xl {
    grid-row: span 8 / span 8;
  }
  .grid-xl .grid-cs-8-xl {
    grid-column-start: 8;
  }
  .grid-xl .grid-ce-8-xl {
    grid-column-end: 9;
  }
  .grid-xl .grid-rs-8-xl {
    grid-row-start: 8;
  }
  .grid-xl .grid-re-8-xl {
    grid-row-end: 9;
  }
  .grid-xl.grid-cols-9-xl {
    --grid-template-column: repeat(9, minmax(0, 1fr));
  }
  .grid-xl .grid-c-9-xl {
    grid-column: span 9 / span 9;
  }
  .grid-xl .grid-r-9-xl {
    grid-row: span 9 / span 9;
  }
  .grid-xl .grid-cs-9-xl {
    grid-column-start: 9;
  }
  .grid-xl .grid-ce-9-xl {
    grid-column-end: 10;
  }
  .grid-xl .grid-rs-9-xl {
    grid-row-start: 9;
  }
  .grid-xl .grid-re-9-xl {
    grid-row-end: 10;
  }
  .grid-xl.grid-cols-10-xl {
    --grid-template-column: repeat(10, minmax(0, 1fr));
  }
  .grid-xl .grid-c-10-xl {
    grid-column: span 10 / span 10;
  }
  .grid-xl .grid-r-10-xl {
    grid-row: span 10 / span 10;
  }
  .grid-xl .grid-cs-10-xl {
    grid-column-start: 10;
  }
  .grid-xl .grid-ce-10-xl {
    grid-column-end: 11;
  }
  .grid-xl .grid-rs-10-xl {
    grid-row-start: 10;
  }
  .grid-xl .grid-re-10-xl {
    grid-row-end: 11;
  }
  .grid-xl.grid-cols-11-xl {
    --grid-template-column: repeat(11, minmax(0, 1fr));
  }
  .grid-xl .grid-c-11-xl {
    grid-column: span 11 / span 11;
  }
  .grid-xl .grid-r-11-xl {
    grid-row: span 11 / span 11;
  }
  .grid-xl .grid-cs-11-xl {
    grid-column-start: 11;
  }
  .grid-xl .grid-ce-11-xl {
    grid-column-end: 12;
  }
  .grid-xl .grid-rs-11-xl {
    grid-row-start: 11;
  }
  .grid-xl .grid-re-11-xl {
    grid-row-end: 12;
  }
  .grid-xl.grid-cols-12-xl {
    --grid-template-column: repeat(12, minmax(0, 1fr));
  }
  .grid-xl .grid-c-12-xl {
    grid-column: span 12 / span 12;
  }
  .grid-xl .grid-r-12-xl {
    grid-row: span 12 / span 12;
  }
  .grid-xl .grid-cs-12-xl {
    grid-column-start: 12;
  }
  .grid-xl .grid-ce-12-xl {
    grid-column-end: 13;
  }
  .grid-xl .grid-rs-12-xl {
    grid-row-start: 12;
  }
  .grid-xl .grid-re-12-xl {
    grid-row-end: 13;
  }
  .grid-xl .grid-ce-end-xl {
    grid-column-end: -1;
  }
  .grid-xl .grid-re-end-xl {
    grid-row-end: -1;
  }
  .grid-xl .grid-ce-auto-xl {
    grid-column-end: auto;
  }
  .grid-xl .grid-re-auto-xl {
    grid-row-end: auto;
  }
}
@media screen and (min-width: 1280px) and (max-width: 767px) {
  .grid-xl {
    --grid-template-column: repeat(1, minmax(0, 1fr));
  }
}
/* EXTENDED LINKS */
/* Animated links */
.u,
.utb {
  display: inline;
  position: relative;
  /* So the psuedo-elements are positioned correctly */
}

/* Underline */
.u::after {
  content: '';
  transition: all 0.3s;
  backface-visibility: hidden;
  position: absolute;
  height: 2px;
  width: 0;
  background: var(--cirrus-link-dark);
  bottom: -0.25em;
}
.u:hover::after {
  width: 100%;
}
.u.u-LR::after {
  /* Left to Right */
  left: 0;
}
.u.u-LR::after {
  /* Left to Right */
  left: 0;
}
.u.u-RL::after {
  /* Right to Left */
  right: 0;
}
.u.u-RL:hover::after {
  width: 100%;
}
.u.u-C::after {
  /* Center Outwards */
  left: 50%;
  transform: translateX(-50%);
}

/* Underline top and bottom */
.utb {
  /* Opposite start */
}
.utb::before,
.utb::after {
  content: '';
  transition: all 0.3s;
  backface-visibility: hidden;
  position: absolute;
  height: 2px;
  width: 0;
  background: var(--cirrus-link-dark);
}
.utb::before {
  top: -0.25em;
}
.utb::after {
  bottom: -0.25em;
}
.utb:hover::before,
.utb:hover::after {
  width: 100%;
}
.utb.utb-LR::before,
.utb.utb-LR::after {
  left: 0;
}
.utb.utb-RL::before,
.utb.utb-RL::after {
  right: 0;
}
.utb.utb-C::before,
.utb.utb-C::after {
  left: 50%;
  transform: translateX(-50%);
}
.utb.utb-OLR::before {
  /* Suffix denotes border transition direction for the top border (left to right). Bottom border will be the opposite direction */
  left: 0;
}
.utb.utb-OLR::after {
  right: 0;
}
.utb.utb-ORL::before {
  right: 0;
}
.utb.utb-ORL::after {
  left: 0;
}

/* Links with square borders */
/* Please note that usquare is the parent span (not div) which would create the left and right borders. The link (.utb-OLR) gets nested within this */
.usquare {
  margin-left: 0.4rem;
  position: relative;
  overflow: hidden;
}
.usquare::before,
.usquare::after {
  content: '';
  transition: 0.25s all ease;
  backface-visibility: hidden;
  position: absolute;
  width: 2px;
  width: 0.1 rem;
  height: 0;
  background: var(--cirrus-link-dark);
}
.usquare::before {
  left: 0;
  bottom: -0.2rem;
}
.usquare::after {
  right: 0;
  top: -0.2rem;
}
.usquare:hover::before,
.usquare:hover::after {
  height: calc(100% + 0.4rem);
  /* Makes the left and right borders */
}
.usquare:hover a::before,
.usquare:hover a::after {
  width: 100%;
}
.usquare.delay::before {
  transition-delay: 0.6s;
}
.usquare.delay::after {
  transition-delay: var(--animation-duration);
}
.usquare.delay a::after {
  transition: 0.25s all ease 0.4s;
}
.usquare a {
  position: static;
  padding: 0.2rem 0.4rem;
  transition: 0.25s all ease;
}
.usquare a::before {
  left: 0;
}
.usquare a::after {
  right: 0;
}
/*
    Group selectors that share common styling.
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* The base of the modal dialog, which is an overlay of the webpage */
.modal {
  position: fixed;
  /* Scrolls with the user */
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  opacity: 0;
  /* Initially hidden */
  padding: 1rem;
  display: none;
  /* Doesn't block the elements underneath */
  align-items: center;
  justify-content: center;
  /* Vertical centering */
  pointer-events: none;
  /* Prevent any pointer events made to modal while hidden */
  /* When the modal dialog is visible */
  /* Different size modals */
  /* The modal dialog body with the text itself */
  /* MODAL ANIMATIONS */
  /* Visible state */
}
.modal:target,
.modal.shown {
  display: flex;
  opacity: 1;
  z-index: 999;
  pointer-events: auto;
  /* Re-enable pointer events */
  /* The div in the modal dialpog used to create the translucent background */
}
.modal:target .modal-overlay,
.modal.shown .modal-overlay {
  position: absolute;
  /* Absolute inside of the modal container */
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: block;
  background-color: rgba(54, 54, 54, 0.5);
}
.modal:target .modal-container,
.modal:target .modal-container,
.modal.shown .modal-container,
.modal.shown .modal-container {
  animation: slide-down var(--animation-duration) ease 1;
  z-index: 1;
}
.modal.modal-small .modal-content {
  max-width: 20rem;
  /* 320px */
}
.modal.modal-large .modal-content {
  max-width: 60rem;
  /* 960px */
}
.modal .modal-content {
  background-color: var(--cirrus-bg);
  padding: 0;
  display: block;
  border-radius: 3px;
  box-shadow: 0 0.4rem 1rem rgba(54, 54, 54, 0.3);
  z-index: 1;
  color: var(--cirrus-fg);
  max-width: 40rem;
  /* 640px */
  /* Restrict width  */
}
.modal .modal-content.small {
  max-width: 32rem;
}
.modal .modal-content h1,
.modal .modal-content h2,
.modal .modal-content h3,
.modal .modal-content h4,
.modal .modal-content h5,
.modal .modal-content h6 {
  color: var(--cirrus-fg);
}
.modal .modal-content .modal-header {
  padding: 1rem 2.5rem;
}
.modal .modal-content .modal-header .modal-title {
  font-weight: bolder;
  font-size: 1.4rem;
}
.modal .modal-content .modal-body {
  padding: 1rem 2.5rem;
  overflow-y: auto;
  max-height: 50vh;
  /* Max height is 50% of viewport height which prevents dialog from extetnding past screen */
  position: relative;
}
.modal .modal-content .modal-footer {
  padding: 1rem 2.5rem;
}
@media screen and (max-width: 767px) {
  .modal .modal-content {
    max-width: 90%;
  }
}
.modal.modal-animated--dropdown {
  animation: slide-down var(--animation-duration) ease 1;
}
.modal.modal-animated--zoom-in,
.modal.modal-animated--zoom-out {
  display: flex;
  opacity: 0;
  transition: 300ms all ease;
}
.modal:target.modal-animated--zoom-in,
.modal:target.modal-animated--zoom-out {
  opacity: 1;
  transition: 300ms all ease;
}
.modal.modal-animated--zoom-in .modal-content {
  transform: scale(0.8);
  transition: 300ms all ease;
}
.modal:target.modal-animated--zoom-in .modal-content,
.modal:target.modal-animated--zoom-out .modal-content {
  transform: scale(1);
  transition: 300ms all ease;
}
.modal.modal-animated--zoom-out .modal-content {
  transform: scale(1.2);
  transition: 300ms all ease;
}

/* Keyframes for slide down animation */
@keyframes slide-down {
  0% {
    opacity: 0;
    transform: translateY(-3rem);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
@media screen and (max-width: 767px) {
  .modal-content {
    max-width: 90%;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Group selectors that share common styling.
*/
/* A collection of modifiers that extend control styling */
.btn.btn--pilled,
button.btn--pilled,
[type='submit'].btn--pilled,
[type='reset'].btn--pilled,
[type='button'].btn--pilled {
  border-radius: 6.25rem;
  padding-left: 1.25rem;
  padding-right: 1.25rem;
}

/* btn--circle: contents must be placed inside child element */
.btn.btn--circle,
button.btn--circle,
[type='submit'].btn--circle,
[type='reset'].btn--circle,
[type='button'].btn--circle {
  border-radius: 100%;
  min-width: 60px;
  overflow: hidden;
  padding: 0;
  text-align: center;
}
.btn.btn--circle:before,
button.btn--circle:before,
[type='submit'].btn--circle:before,
[type='reset'].btn--circle:before,
[type='button'].btn--circle:before {
  content: '';
  display: inline-block;
  vertical-align: middle;
  padding-top: 100%;
}
.btn.btn--circle *,
button.btn--circle *,
[type='submit'].btn--circle *,
[type='reset'].btn--circle *,
[type='button'].btn--circle * {
  display: inline;
  max-width: 90%;
  vertical-align: middle;
  white-space: pre-wrap;
}

/* Input (primary text-based) controls apply to inputs */
.input-control--pilled {
  border-radius: 6.25rem !important;
}

/* Theme modifiers */
/* GLOBAL THEME SELECTORS */
/* v1 */
.bg-primary {
  background-color: var(--cirrus-primary) !important;
}

.text-primary {
  border-color: var(--cirrus-primary) !important;
  color: var(--cirrus-primary) !important;
}

.bg-success {
  background-color: var(--cirrus-success) !important;
}

.text-success {
  border-color: var(--cirrus-success) !important;
  color: var(--cirrus-success) !important;
}

.bg-warning {
  background-color: var(--cirrus-warning) !important;
}

.text-warning {
  border-color: var(--cirrus-warning) !important;
  color: var(--cirrus-warning) !important;
}

.bg-danger {
  background-color: var(--cirrus-danger) !important;
}

.text-danger {
  border-color: var(--cirrus-danger) !important;
  color: var(--cirrus-danger) !important;
}

.bg-light {
  background-color: var(--cirrus-light) !important;
}

.text-light {
  border-color: var(--cirrus-light) !important;
  color: var(--cirrus-light) !important;
}

.bg-dark {
  background-color: var(--cirrus-dark) !important;
}

.text-dark {
  border-color: var(--cirrus-dark) !important;
  color: var(--cirrus-dark) !important;
}

.bg-link {
  background-color: var(--cirrus-link) !important;
}

.text-link {
  border-color: var(--cirrus-link) !important;
  color: var(--cirrus-link) !important;
}

.bg-link-dark {
  background-color: var(--cirrus-link-dark) !important;
}

.text-link-dark {
  border-color: var(--cirrus-link-dark) !important;
  color: var(--cirrus-link-dark) !important;
}

.bg-info {
  background-color: var(--cirrus-info) !important;
}

.text-info {
  border-color: var(--cirrus-info) !important;
  color: var(--cirrus-info) !important;
}

.bg-black {
  background-color: var(--cirrus-black) !important;
}

.text-black {
  border-color: var(--cirrus-black) !important;
  color: var(--cirrus-black) !important;
}

.bg-white {
  background-color: var(--cirrus-white) !important;
}

.text-white {
  border-color: var(--cirrus-white) !important;
  color: var(--cirrus-white) !important;
}

/* v2 */
.bg-pink-100 {
  background-color: #f8e7f1 !important;
}

.text-pink-100 {
  border-color: #f8e7f1 !important;
  color: #f8e7f1 !important;
}

.bg-pink-200 {
  background-color: #f3d2e3 !important;
}

.text-pink-200 {
  border-color: #f3d2e3 !important;
  color: #f3d2e3 !important;
}

.bg-pink-300 {
  background-color: #ecb7d3 !important;
}

.text-pink-300 {
  border-color: #ecb7d3 !important;
  color: #ecb7d3 !important;
}

.bg-pink-400 {
  background-color: #eb8cbc !important;
}

.text-pink-400 {
  border-color: #eb8cbc !important;
  color: #eb8cbc !important;
}

.bg-pink-500 {
  background-color: #dd5a9c !important;
}

.text-pink-500 {
  border-color: #dd5a9c !important;
  color: #dd5a9c !important;
}

.bg-pink-600 {
  background-color: #d12e81 !important;
}

.text-pink-600 {
  border-color: #d12e81 !important;
  color: #d12e81 !important;
}

.bg-pink-700 {
  background-color: #a21f61 !important;
}

.text-pink-700 {
  border-color: #a21f61 !important;
  color: #a21f61 !important;
}

.bg-pink-800 {
  background-color: #831b50 !important;
}

.text-pink-800 {
  border-color: #831b50 !important;
  color: #831b50 !important;
}

.bg-pink-900 {
  background-color: #741648 !important;
}

.text-pink-900 {
  border-color: #741648 !important;
  color: #741648 !important;
}

.bg-red-100 {
  background-color: #fde7e9 !important;
}

.text-red-100 {
  border-color: #fde7e9 !important;
  color: #fde7e9 !important;
}

.bg-red-200 {
  background-color: #fbd4d5 !important;
}

.text-red-200 {
  border-color: #fbd4d5 !important;
  color: #fbd4d5 !important;
}

.bg-red-300 {
  background-color: #f7b1b1 !important;
}

.text-red-300 {
  border-color: #f7b1b1 !important;
  color: #f7b1b1 !important;
}

.bg-red-400 {
  background-color: #f19393 !important;
}

.text-red-400 {
  border-color: #f19393 !important;
  color: #f19393 !important;
}

.bg-red-500 {
  background-color: #e85c61 !important;
}

.text-red-500 {
  border-color: #e85c61 !important;
  color: #e85c61 !important;
}

.bg-red-600 {
  background-color: #db3839 !important;
}

.text-red-600 {
  border-color: #db3839 !important;
  color: #db3839 !important;
}

.bg-red-700 {
  background-color: #b31e1d !important;
}

.text-red-700 {
  border-color: #b31e1d !important;
  color: #b31e1d !important;
}

.bg-red-800 {
  background-color: #9b1313 !important;
}

.text-red-800 {
  border-color: #9b1313 !important;
  color: #9b1313 !important;
}

.bg-red-900 {
  background-color: #890e10 !important;
}

.text-red-900 {
  border-color: #890e10 !important;
  color: #890e10 !important;
}

.bg-orange-100 {
  background-color: #fdeed1 !important;
}

.text-orange-100 {
  border-color: #fdeed1 !important;
  color: #fdeed1 !important;
}

.bg-orange-200 {
  background-color: #fbdbaa !important;
}

.text-orange-200 {
  border-color: #fbdbaa !important;
  color: #fbdbaa !important;
}

.bg-orange-300 {
  background-color: #f6b65c !important;
}

.text-orange-300 {
  border-color: #f6b65c !important;
  color: #f6b65c !important;
}

.bg-orange-400 {
  background-color: #f19736 !important;
}

.text-orange-400 {
  border-color: #f19736 !important;
  color: #f19736 !important;
}

.bg-orange-500 {
  background-color: #e4771c !important;
}

.text-orange-500 {
  border-color: #e4771c !important;
  color: #e4771c !important;
}

.bg-orange-600 {
  background-color: #c45307 !important;
}

.text-orange-600 {
  border-color: #c45307 !important;
  color: #c45307 !important;
}

.bg-orange-700 {
  background-color: #9b3908 !important;
}

.text-orange-700 {
  border-color: #9b3908 !important;
  color: #9b3908 !important;
}

.bg-orange-800 {
  background-color: #842b09 !important;
}

.text-orange-800 {
  border-color: #842b09 !important;
  color: #842b09 !important;
}

.bg-orange-900 {
  background-color: #890e10 !important;
}

.text-orange-900 {
  border-color: #890e10 !important;
  color: #890e10 !important;
}

.bg-yellow-100 {
  background-color: #fffde4 !important;
}

.text-yellow-100 {
  border-color: #fffde4 !important;
  color: #fffde4 !important;
}

.bg-yellow-200 {
  background-color: #f9e978 !important;
}

.text-yellow-200 {
  border-color: #f9e978 !important;
  color: #f9e978 !important;
}

.bg-yellow-300 {
  background-color: #f6da52 !important;
}

.text-yellow-300 {
  border-color: #f6da52 !important;
  color: #f6da52 !important;
}

.bg-yellow-400 {
  background-color: #e8bb24 !important;
}

.text-yellow-400 {
  border-color: #e8bb24 !important;
  color: #e8bb24 !important;
}

.bg-yellow-500 {
  background-color: #d29507 !important;
}

.text-yellow-500 {
  border-color: #d29507 !important;
  color: #d29507 !important;
}

.bg-yellow-600 {
  background-color: #9d6b0c !important;
}

.text-yellow-600 {
  border-color: #9d6b0c !important;
  color: #9d6b0c !important;
}

.bg-yellow-700 {
  background-color: #7c4d09 !important;
}

.text-yellow-700 {
  border-color: #7c4d09 !important;
  color: #7c4d09 !important;
}

.bg-yellow-800 {
  background-color: #6c3e0c !important;
}

.text-yellow-800 {
  border-color: #6c3e0c !important;
  color: #6c3e0c !important;
}

.bg-yellow-900 {
  background-color: #5d320f !important;
}

.text-yellow-900 {
  border-color: #5d320f !important;
  color: #5d320f !important;
}

.bg-green-100 {
  background-color: #e1f7eb !important;
}

.text-green-100 {
  border-color: #e1f7eb !important;
  color: #e1f7eb !important;
}

.bg-green-200 {
  background-color: #c2ecd6 !important;
}

.text-green-200 {
  border-color: #c2ecd6 !important;
  color: #c2ecd6 !important;
}

.bg-green-300 {
  background-color: #98d9b7 !important;
}

.text-green-300 {
  border-color: #98d9b7 !important;
  color: #98d9b7 !important;
}

.bg-green-400 {
  background-color: #64c192 !important;
}

.text-green-400 {
  border-color: #64c192 !important;
  color: #64c192 !important;
}

.bg-green-500 {
  background-color: #44a675 !important;
}

.text-green-500 {
  border-color: #44a675 !important;
  color: #44a675 !important;
}

.bg-green-600 {
  background-color: #33855d !important;
}

.text-green-600 {
  border-color: #33855d !important;
  color: #33855d !important;
}

.bg-green-700 {
  background-color: #27684a !important;
}

.text-green-700 {
  border-color: #27684a !important;
  color: #27684a !important;
}

.bg-green-800 {
  background-color: #275440 !important;
}

.text-green-800 {
  border-color: #275440 !important;
  color: #275440 !important;
}

.bg-green-900 {
  background-color: #234535 !important;
}

.text-green-900 {
  border-color: #234535 !important;
  color: #234535 !important;
}

.bg-teal-100 {
  background-color: #ddf2f5 !important;
}

.text-teal-100 {
  border-color: #ddf2f5 !important;
  color: #ddf2f5 !important;
}

.bg-teal-200 {
  background-color: #b5e6eb !important;
}

.text-teal-200 {
  border-color: #b5e6eb !important;
  color: #b5e6eb !important;
}

.bg-teal-300 {
  background-color: #7fced5 !important;
}

.text-teal-300 {
  border-color: #7fced5 !important;
  color: #7fced5 !important;
}

.bg-teal-400 {
  background-color: #59bac3 !important;
}

.text-teal-400 {
  border-color: #59bac3 !important;
  color: #59bac3 !important;
}

.bg-teal-500 {
  background-color: #1e9ca8 !important;
}

.text-teal-500 {
  border-color: #1e9ca8 !important;
  color: #1e9ca8 !important;
}

.bg-teal-600 {
  background-color: #0f7d8a !important;
}

.text-teal-600 {
  border-color: #0f7d8a !important;
  color: #0f7d8a !important;
}

.bg-teal-700 {
  background-color: #0a616a !important;
}

.text-teal-700 {
  border-color: #0a616a !important;
  color: #0a616a !important;
}

.bg-teal-800 {
  background-color: #105157 !important;
}

.text-teal-800 {
  border-color: #105157 !important;
  color: #105157 !important;
}

.bg-teal-900 {
  background-color: #114448 !important;
}

.text-teal-900 {
  border-color: #114448 !important;
  color: #114448 !important;
}

.bg-blue-100 {
  background-color: #e1effc !important;
}

.text-blue-100 {
  border-color: #e1effc !important;
  color: #e1effc !important;
}

.bg-blue-200 {
  background-color: #bfdcfc !important;
}

.text-blue-200 {
  border-color: #bfdcfc !important;
  color: #bfdcfc !important;
}

.bg-blue-300 {
  background-color: #8bc2f8 !important;
}

.text-blue-300 {
  border-color: #8bc2f8 !important;
  color: #8bc2f8 !important;
}

.bg-blue-400 {
  background-color: #5fa7f3 !important;
}

.text-blue-400 {
  border-color: #5fa7f3 !important;
  color: #5fa7f3 !important;
}

.bg-blue-500 {
  background-color: #3c91ec !important;
}

.text-blue-500 {
  border-color: #3c91ec !important;
  color: #3c91ec !important;
}

.bg-blue-600 {
  background-color: #1b74d9 !important;
}

.text-blue-600 {
  border-color: #1b74d9 !important;
  color: #1b74d9 !important;
}

.bg-blue-700 {
  background-color: #1e5898 !important;
}

.text-blue-700 {
  border-color: #1e5898 !important;
  color: #1e5898 !important;
}

.bg-blue-800 {
  background-color: #1e4c80 !important;
}

.text-blue-800 {
  border-color: #1e4c80 !important;
  color: #1e4c80 !important;
}

.bg-blue-900 {
  background-color: #1c3c63 !important;
}

.text-blue-900 {
  border-color: #1c3c63 !important;
  color: #1c3c63 !important;
}

.bg-indigo-100 {
  background-color: #e2efff !important;
}

.text-indigo-100 {
  border-color: #e2efff !important;
  color: #e2efff !important;
}

.bg-indigo-200 {
  background-color: #c4dbfd !important;
}

.text-indigo-200 {
  border-color: #c4dbfd !important;
  color: #c4dbfd !important;
}

.bg-indigo-300 {
  background-color: #a1befa !important;
}

.text-indigo-300 {
  border-color: #a1befa !important;
  color: #a1befa !important;
}

.bg-indigo-400 {
  background-color: #89a3f7 !important;
}

.text-indigo-400 {
  border-color: #89a3f7 !important;
  color: #89a3f7 !important;
}

.bg-indigo-500 {
  background-color: #6c83e9 !important;
}

.text-indigo-500 {
  border-color: #6c83e9 !important;
  color: #6c83e9 !important;
}

.bg-indigo-600 {
  background-color: #5966d9 !important;
}

.text-indigo-600 {
  border-color: #5966d9 !important;
  color: #5966d9 !important;
}

.bg-indigo-700 {
  background-color: #4c4f9e !important;
}

.text-indigo-700 {
  border-color: #4c4f9e !important;
  color: #4c4f9e !important;
}

.bg-indigo-800 {
  background-color: #42417b !important;
}

.text-indigo-800 {
  border-color: #42417b !important;
  color: #42417b !important;
}

.bg-indigo-900 {
  background-color: #3a3462 !important;
}

.text-indigo-900 {
  border-color: #3a3462 !important;
  color: #3a3462 !important;
}

.bg-purple-100 {
  background-color: #f0e9fb !important;
}

.text-purple-100 {
  border-color: #f0e9fb !important;
  color: #f0e9fb !important;
}

.bg-purple-200 {
  background-color: #e2d4f8 !important;
}

.text-purple-200 {
  border-color: #e2d4f8 !important;
  color: #e2d4f8 !important;
}

.bg-purple-300 {
  background-color: #cbb2f6 !important;
}

.text-purple-300 {
  border-color: #cbb2f6 !important;
  color: #cbb2f6 !important;
}

.bg-purple-400 {
  background-color: #b89af4 !important;
}

.text-purple-400 {
  border-color: #b89af4 !important;
  color: #b89af4 !important;
}

.bg-purple-500 {
  background-color: #9c73ed !important;
}

.text-purple-500 {
  border-color: #9c73ed !important;
  color: #9c73ed !important;
}

.bg-purple-600 {
  background-color: #8256e1 !important;
}

.text-purple-600 {
  border-color: #8256e1 !important;
  color: #8256e1 !important;
}

.bg-purple-700 {
  background-color: #6340b6 !important;
}

.text-purple-700 {
  border-color: #6340b6 !important;
  color: #6340b6 !important;
}

.bg-purple-800 {
  background-color: #50388e !important;
}

.text-purple-800 {
  border-color: #50388e !important;
  color: #50388e !important;
}

.bg-purple-900 {
  background-color: #413170 !important;
}

.text-purple-900 {
  border-color: #413170 !important;
  color: #413170 !important;
}

.bg-gray-000 {
  background-color: #f8f9fa !important;
}

.text-gray-000 {
  border-color: #f8f9fa !important;
  color: #f8f9fa !important;
}

.bg-gray-100 {
  background-color: #f1f3f5 !important;
}

.text-gray-100 {
  border-color: #f1f3f5 !important;
  color: #f1f3f5 !important;
}

.bg-gray-200 {
  background-color: #e9ecef !important;
}

.text-gray-200 {
  border-color: #e9ecef !important;
  color: #e9ecef !important;
}

.bg-gray-300 {
  background-color: #dee2e6 !important;
}

.text-gray-300 {
  border-color: #dee2e6 !important;
  color: #dee2e6 !important;
}

.bg-gray-400 {
  background-color: #ced4da !important;
}

.text-gray-400 {
  border-color: #ced4da !important;
  color: #ced4da !important;
}

.bg-gray-500 {
  background-color: #adb5bd !important;
}

.text-gray-500 {
  border-color: #adb5bd !important;
  color: #adb5bd !important;
}

.bg-gray-600 {
  background-color: #868e96 !important;
}

.text-gray-600 {
  border-color: #868e96 !important;
  color: #868e96 !important;
}

.bg-gray-700 {
  background-color: #495057 !important;
}

.text-gray-700 {
  border-color: #495057 !important;
  color: #495057 !important;
}

.bg-gray-800 {
  background-color: #343a40 !important;
}

.text-gray-800 {
  border-color: #343a40 !important;
  color: #343a40 !important;
}

.bg-gray-900 {
  background-color: #212529 !important;
}

.text-gray-900 {
  border-color: #212529 !important;
  color: #212529 !important;
}
/*
    Group selectors that share common styling.
*/
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* PAGINATION */
/* Parent contianer for page navigation */
.pagination {
  display: flex;
  display: -ms-flexbox;
  /* Use for the major pagination meant to display about 2 items */
  /* Bordered pagination */
}
.pagination .pagination-item {
  flex: 1 0 50%;
  /* Flex to fill */
  margin: 1rem 0.1rem;
  transition: all 0.3s;
  /* Pagination Item */
  /* Used to display many pagination items */
}
.pagination .pagination-item:hover p,
.pagination .pagination-item:hover h1,
.pagination .pagination-item:hover h2,
.pagination .pagination-item:hover h3,
.pagination .pagination-item:hover h4,
.pagination .pagination-item:hover h5,
.pagination .pagination-item:hover h6 {
  transition: all 0.3s;
  color: var(--cirrus-primary);
}
.pagination .pagination-item:not(.selected):hover *:not([disabled]):not(.disabled):not(.ellipses) {
  transition: all 0.3s;
  color: var(--cirrus-primary);
}
.pagination .pagination-item.pagination-next {
  text-align: right;
}
.pagination .pagination-item.pagination-prev {
  text-align: left;
}
.pagination .pagination-item a {
  color: #495057;
}
.pagination .pagination-item a[disabled],
.pagination .pagination-item a.disabled {
  cursor: pointer;
  opacity: 0.5;
  pointer-events: none;
  user-select: none;
}
.pagination .pagination-item .pagination-item-subtitle {
  opacity: 0.7;
  margin: 0;
  /* Needed to override style after formatting paragraph update */
}
.pagination .pagination-item.short {
  border-radius: 0.1rem;
  margin: 0.2rem 0;
  flex: 0;
  /* Flex to fill */
  /* Color the selected pagination item with accent color */
}
.pagination .pagination-item.short:first-child a {
  border-top-left-radius: 0.25rem;
  border-bottom-left-radius: 0.25rem;
}
.pagination .pagination-item.short:last-child a {
  border-top-right-radius: 0.25rem;
  border-bottom-right-radius: 0.25rem;
}
.pagination .pagination-item.short:not([disabled]):not(.disabled):not(.selected):hover {
  background-color: rgba(0, 0, 0, 0.07);
}
.pagination .pagination-item.short.selected {
  background-color: var(--cirrus-primary);
  color: #fff;
}
.pagination .pagination-item.short.selected a {
  color: #fff;
}
.pagination .pagination-item.short.ellipses {
  color: #adb5bd;
  pointer-events: none;
}
.pagination .pagination-item.short a {
  display: inline-block;
  line-height: 1.25;
  padding: 0.5rem 0.75rem;
}
.pagination.pagination-bordered .pagination-item.short a {
  border: 1px solid #dee2e6;
  border-radius: 0;
  margin-left: -1px;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* PLACEHOLDER */
/* Designed to be embedded in any parent container as placeholder when content is absent. */
.placeholder {
  background-color: rgba(222, 226, 230, 0.5);
  border-radius: 3px;
  text-align: center;
  padding: 3rem 2rem;
  color: #495057;
  /* Lighter than original text color */
  display: block;
  /* Place buttons here for the placeholder */
}
.placeholder .placeholder-icon {
  text-align: center;
}
.placeholder .placeholder-title,
.placeholder .placeholder-subtitle {
  margin: 1rem auto;
}
.placeholder .placeholder-subtitle {
  opacity: 0.7;
  margin: 0;
}
.placeholder .placeholder-commands {
  margin-top: 1rem;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* TABS AND TAB CONTAINER */
.tab-container {
  display: flex;
  justify-content: space-between;
  overflow: hidden;
  overflow-x: auto;
  /* Allow scrollbar to be visible if the width of the tabs exceeds container */
  user-select: none;
  white-space: nowrap;
  align-items: stretch;
  font-size: 1rem;
  /* Shift tabs to the center */
  /* Shift tabs to the right */
  /* Depth tab styles */
  /* Classic tab styles */
  /* Tabs that fill the width */
  /* Different tab sizes */
  /* Tabs are embedded inside an unordered list */
  /* Font Awesome Integration */
  /* Left icon */
  /* Right icon */
}
.tab-container.tabs-center ul {
  justify-content: center;
}
.tab-container.tabs-right ul {
  justify-content: flex-end;
}
.tab-container.tabs-depth ul {
  box-shadow: 0 2px 3px rgba(134, 142, 150, 0.15);
  border-bottom: 0;
}
.tab-container.tabs-classic ul {
  border-bottom-color: #dee2e6;
  border-bottom-style: solid;
  border-bottom-width: 1px;
  border-radius: 3px 3px 0 0;
  /* Only round the top left and right corners */
  transition: all 0.3s;
}
.tab-container.tabs-classic ul li:not(.selected) a:hover,
.tab-container.tabs-classic ul li:not(.selected) .tab-item-content:hover {
  background-color: #f1f3f5;
  transition: all 0.3s;
}
.tab-container.tabs-classic ul li.selected a,
.tab-container.tabs-classic ul li.selected .tab-item-content {
  color: var(--cirrus-primary);
  border-color: #dee2e6;
  border-bottom-color: transparent !important;
}
.tab-container.tabs-classic ul li a,
.tab-container.tabs-classic ul li .tab-item-content {
  border: 1px solid transparent;
  border-bottom-color: #dee2e6;
  border-radius: 3px 3px 0 0;
  cursor: pointer;
  transition: all 0.3s;
}
.tab-container.tabs-fill {
  /* Override the -webkit-box display that sizes tab items based on text */
}
.tab-container.tabs-fill ul {
  display: flex;
  /* Equal size tabs */
}
.tab-container.tabs-fill li {
  flex-grow: 1;
  flex-shrink: 0;
  /* Disable shrinking to original width */
  flex-basis: 0;
}
.tab-container.tabs-xs {
  font-size: 0.75rem;
}
.tab-container.tabs-sm {
  font-size: 0.875rem;
}
.tab-container.tabs-lg {
  font-size: 1.25rem;
}
.tab-container.tabs-xl {
  font-size: 1.5rem;
}
.tab-container ul {
  display: flex;
  justify-content: flex-start;
  /* Move tab items to left side */
  margin: 0.5rem;
  /* Override the behavior for standard ul and add equal padding */
  border-bottom: 1px solid #e9ecef;
  /* Bottom border of tabs */
  flex-grow: 1;
  list-style: none;
  padding-inline-start: 0;
}
.tab-container li {
  display: block;
  /* Keep the tabs from extending too far */
  cursor: pointer;
  margin: 0;
  text-align: center;
}
.tab-container li:hover a,
.tab-container li:hover .tab-item-content {
  border-bottom-color: rgba(240, 61, 77, 0.6);
  transition: all 0.3s;
}
.tab-container li.selected a,
.tab-container li.selected .tab-item-content {
  border-bottom-color: var(--cirrus-primary);
  color: var(--cirrus-primary);
  border-width: 2px;
  transition: all 0.3s;
}
.tab-container li a,
.tab-container li .tab-item-content {
  display: flex;
  align-items: center;
  border-bottom: 1px solid #e9ecef;
  justify-content: center;
  padding: 0.5rem 1rem;
  transition: all 0.3s;
  color: var(--cirrus-fg);
  border-width: 2px;
  margin-bottom: -1px;
  /* Get rid of any remaining border lines */
  background-color: var(--cirrus-bg);
}
.tab-container .icon:first-child {
  margin-right: 0.75rem;
}
.tab-container .icon:last-child {
  margin-left: 0.75rem;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* TAGS */
.tag {
  align-items: center;
  background-color: var(--cirrus-light);
  border-radius: 0.25rem;
  color: currentColor;
  display: inline-flex;
  height: 2em;
  line-height: 1.5;
  font-size: 0.875rem;
  padding: 0.625rem 0.625rem;
  white-space: nowrap;
  /* Delete button for tag */
  /* Draw the delete button */
  /* TAG THEMES */
  /* Tag close button */
}
.tag.tag--xs {
  font-size: 0.75rem;
  padding: 0.5rem 0.5rem;
}
.tag.tag--sm {
  font-size: 0.875rem;
  padding: 0.625rem 0.625rem;
}
.tag.tag--md {
  font-size: 1rem;
  padding: 0.75rem 0.75rem;
}
.tag.tag--lg {
  font-size: 1.25rem;
  padding: 0.875rem 0.875rem;
}
.tag.tag--xl {
  font-size: 1.5rem;
  padding: 1rem 1rem;
}
.tag.tag--rounded {
  border-radius: 290486px;
}
.tag.tag__delete {
  aspect-ratio: 1/1;
  background-color: rgba(10, 10, 10, 0.2);
  border-radius: 290486px;
  cursor: pointer;
  pointer-events: auto;
  display: inline-block;
  height: auto;
  position: relative;
  width: auto;
}
.tag.tag__delete:hover {
  background-color: rgba(10, 10, 10, 0.3);
}
.tag.tag__delete::before,
.tag.tag__delete::after {
  background-color: var(--cirrus-light);
  content: '';
  display: block;
  left: 50%;
  position: absolute;
  top: 50%;
  transform: translateX(-50%) translateY(-50%) rotate(45deg);
  transform-origin: center center;
}
.tag.tag__delete::before {
  height: 1px;
  width: 50%;
}
.tag.tag__delete::after {
  height: 50%;
  width: 1px;
}
.tag.tag__delete {
  margin-left: 0.25rem;
  margin-right: -0.125rem;
}
.tag.tag--white {
  background-color: #fff;
  color: var(--cirrus-dark);
}
.tag.tag--black {
  background-color: #000;
  color: #fff;
}
.tag.tag--primary {
  background-color: var(--cirrus-primary);
  color: #fff;
}
.tag.tag--primary {
  background-color: #f03d4d;
  color: #fff;
  cursor: pointer;
}
.tag.tag--primary.tag__close-btn:hover {
  background-color: #ee2537;
}
.tag.tag--primary.tag__close-btn:active {
  background-color: #e81225;
}
.tag.tag--gray {
  background-color: #d5d7dc;
  color: #fff;
  cursor: pointer;
}
.tag.tag--gray.tag__close-btn:hover {
  background-color: #c7cad0;
}
.tag.tag--gray.tag__close-btn:active {
  background-color: #b9bdc5;
}
.tag.tag--dark {
  background-color: #363636;
  color: #fff;
  cursor: pointer;
}
.tag.tag--dark.tag__close-btn:hover {
  background-color: #292929;
}
.tag.tag--dark.tag__close-btn:active {
  background-color: #1d1d1d;
}
.tag.tag--link {
  background-color: #5e5cc7;
  color: #fff;
  cursor: pointer;
}
.tag.tag--link.tag__close-btn:hover {
  background-color: #4b49c0;
}
.tag.tag--link.tag__close-btn:active {
  background-color: #403db3;
}
.tag.tag--info {
  background-color: #2972fa;
  color: #fff;
  cursor: pointer;
}
.tag.tag--info.tag__close-btn:hover {
  background-color: #1062f9;
}
.tag.tag--info.tag__close-btn:active {
  background-color: #0555eb;
}
.tag.tag--success {
  background-color: #0dd157;
  color: #fff;
  cursor: pointer;
}
.tag.tag--success.tag__close-btn:hover {
  background-color: #0cb94d;
}
.tag.tag--success.tag__close-btn:active {
  background-color: #0aa143;
}
.tag.tag--warning {
  background-color: #fab633;
  color: #fff;
  cursor: pointer;
}
.tag.tag--warning.tag__close-btn:hover {
  background-color: #f9ad1a;
}
.tag.tag--warning.tag__close-btn:active {
  background-color: #f4a306;
}
.tag.tag--danger {
  background-color: #fb4143;
  color: #fff;
  cursor: pointer;
}
.tag.tag--danger.tag__close-btn:hover {
  background-color: #fa282a;
}
.tag.tag--danger.tag__close-btn:active {
  background-color: #fa0f12;
}
.tag.tag__close-btn {
  position: relative;
  width: 2em;
}
.tag.tag__close-btn::before,
.tag.tag__close-btn::after {
  background-color: currentColor;
  content: '';
  display: block;
  left: 50%;
  top: 50%;
  position: absolute;
  transform: translateX(-50%) translateY(-50%) rotate(45deg);
  transform-origin: center center;
}
.tag.tag__close-btn::before {
  height: 1px;
  width: 50%;
}
.tag.tag__close-btn::after {
  height: 50%;
  width: 1px;
}

/* TAG CONTAINER */
.tag-container {
  /* Add margin in between tag containers */
  /* Used for grouping tags together */
  /* Tag positioning */
}
.tag-container:not(:last-child) {
  margin-bottom: 1rem;
}
.tag-container.group-tags {
  --tag-first-border-radius: 0.25rem 0 0 0.25rem;
  --tag-last-border-radius: 0 0.25rem 0.25rem 0;
  align-items: center;
  display: flex;
  flex-wrap: wrap;
}
.tag-container.group-tags .tag {
  margin-right: 0 !important;
}
.tag-container.group-tags .tag:first-child {
  border-radius: var(--tag-first-border-radius);
}
.tag-container.group-tags .tag:not(:first-child):not(:last-child) {
  border-radius: 0;
}
.tag-container.group-tags .tag:last-child {
  border-radius: var(--tag-last-border-radius);
}
.tag-container.group-tags.group-tags--rounded {
  --tag-first-border-radius: 290486px 0 0 290486px;
  --tag-last-border-radius: 0 290486px 290486px 0;
}
.tag-container.tag-container--centered {
  justify-content: center;
}
.tag-container.tag-container--centered .tag {
  margin: 0 0.25rem;
}
.tag-container.tag-container--right {
  justify-content: flex-end;
}
.tag-container.tag-container--right .tag:not(:first-child) {
  margin-left: 0.5rem;
}
.tag-container.tag-container--right .tag:not(:last-child) {
  margin-right: 0;
}
.tag-container .tag {
  margin-bottom: 0.5rem;
}
.tag-container .tag:not(:last-child) {
  margin-right: 0.5rem;
}

/* MISC */
a.tag:hover {
  text-decoration: underline;
}
/* TILES */
.tile {
  display: flex;
  display: -ms-flexbox;
  align-content: space-between;
  /* Ensure space between child elements of card tile */
  overflow: inherit;
  /* Prevent overflowing when unnecessary */
  /* Override the default behavior where buttons display as blocks */
  /* Add spacing between the elements in between */
}
.tile p {
  font-size: 0.95rem;
  /* Base font size is 1rem */
}
.tile .tile__icon,
.tile .tile__buttons {
  flex: 0 0 auto;
}
.tile .tile__buttons button,
.tile .tile__buttons .btn,
.tile .tile__buttons [type='submit'] {
  display: inline-block;
  margin: 0.1rem;
  /* Reduce space used by buttons, default .5rem */
}
.tile .tile__container {
  flex: 1 1 auto;
}
.tile .tile__container:not(:first-child) {
  padding-left: 1rem;
}
.tile .tile__container:not(:last-child) {
  padding-right: 1rem;
}
.tile .tile__title {
  line-height: 1.5rem;
  font-weight: bolder;
  margin: 0.1rem auto;
}
.tile .tile__subtitle {
  line-height: 1.25rem;
  opacity: 0.7;
  margin: 0.1rem auto;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
.toast {
  display: block;
  width: 100%;
  padding: 0.75rem 1.25rem;
  background-color: var(--toast-primary-bg);
  border: 1px solid var(--toast-primary-bg);
  border-radius: 2px;
  color: #fff;
  position: relative;
  margin: 0.5rem;
  /* TOAST TYPES */
}
.toast.toast--translucent {
  opacity: 0.5;
}
.toast.toast--translucent:hover {
  opacity: 1;
}
.toast p {
  margin: 0;
}
.toast a {
  color: var(--cirrus-light);
  transition: all 0.3s;
}
.toast a:hover {
  opacity: 0.8;
  transition: all 0.3s;
}
.toast .toast__title {
  margin: 0;
  margin-top: 1rem;
}
.toast .btn-close {
  position: absolute;
  right: 1rem;
  top: 1rem;
}
.toast.toast--primary {
  background-color: var(--cirrus-primary);
  border-color: var(--cirrus-primary);
}
.toast.toast--primary {
  background-color: #f03d4d;
  border-color: #f03d4d;
}
.toast.toast--gray {
  background-color: #d5d7dc;
  border-color: #d5d7dc;
}
.toast.toast--dark {
  background-color: #363636;
  border-color: #363636;
}
.toast.toast--link {
  background-color: #5e5cc7;
  border-color: #5e5cc7;
}
.toast.toast--info {
  background-color: #2972fa;
  border-color: #2972fa;
}
.toast.toast--success {
  background-color: #0dd157;
  border-color: #0dd157;
}
.toast.toast--warning {
  background-color: #fab633;
  border-color: #fab633;
}
.toast.toast--danger {
  background-color: #fb4143;
  border-color: #fb4143;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/* TOOLTIPS */
.tooltip {
  position: relative;
  /* let's the pseudoelement that we are displaying relative to the button. */
  overflow: visible;
  /* Allows the pseudoelement to be shown */
  white-space: nowrap;
  /* Keeps the button text from wrapping and getting too large */
  /* This is the psuedoelement that creates the tooltip */
  /* Handles the on hover event of the button and then modifies the associated tooltip accordingly. */
  /* Tooltip top left */
  /* Tooltip top right */
  /* Tooltip bottom */
  /* Tooltip bottom left */
  /* Tooltip bottom right */
  /* Tooltip right */
  /* Tooltip Left */
}
.tooltip::after {
  position: absolute;
  color: #fff;
  font-size: 0.6rem;
  background-color: rgba(69, 77, 93, 0.9);
  content: attr(data-tooltip);
  /* Retrieves the data specified in this element property and displays it as text */
  display: block;
  line-height: 1rem;
  text-transform: none;
  overflow: hidden;
  padding: 0.4rem 0.8rem;
  opacity: 0;
  /* Hide the element */
  text-overflow: ellipsis;
  max-width: 15rem;
  transform: translate(-50%, 0);
  transition: all var(--animation-duration) ease;
  z-index: 200;
  pointer-events: none;
  bottom: 100%;
  /* Pushes the tooltip above the button */
  left: 50%;
  /* Horizontally center it */
  border-radius: 0.2rem;
}
.tooltip:focus::after,
.tooltip:hover::after {
  opacity: 1;
  transform: translate(-50%, -0.5rem);
  transition: all var(--animation-duration) ease;
}
.tooltip.tooltip--top-left::after {
  transform: translate(-50%, 0);
}
.tooltip.tooltip--top-left:hover::after,
.tooltip.tooltip--top-left:focus::after {
  left: 0;
  transform: translate(-100%, -0.5rem);
}
.tooltip.tooltip--top-right::after {
  left: auto;
  transform: translate(15%, 0);
}
.tooltip.tooltip--top-right:hover::after,
.tooltip.tooltip--top-right:focus::after {
  right: 0;
  transform: translate(100%, -0.5rem);
}
.tooltip.tooltip--bottom::after {
  top: 100%;
  transform: translate(-50%, -1rem);
  /* Moves tooltip to the center horizontally and shifts tooltip down */
  bottom: auto;
}
.tooltip.tooltip--bottom:hover::after,
.tooltip.tooltip--bottom:focus::after {
  transform: translate(-50%, 0.5rem);
  bottom: auto;
}
.tooltip.tooltip--bottom-left::after {
  top: 100%;
  transform: translate(-65%, -1rem);
  bottom: auto;
}
.tooltip.tooltip--bottom-left:hover::after,
.tooltip.tooltip--bottom-left:focus::after {
  left: 0;
  transform: translate(-100%, 0.5rem);
}
.tooltip.tooltip--bottom-right::after {
  left: auto;
  top: 100%;
  transform: translate(0%, -1rem);
  bottom: auto;
}
.tooltip.tooltip--bottom-right:hover::after,
.tooltip.tooltip--bottom-right:focus::after {
  right: 0;
  transform: translate(100%, 0.5rem);
}
.tooltip.tooltip--right::after {
  left: 100%;
  bottom: 50%;
  transform: translate(-1rem, 50%);
}
.tooltip.tooltip--right:hover::after,
.tooltip.tooltip--right:focus::after {
  transform: translate(0.5rem, 50%);
}
.tooltip.tooltip--left::after {
  right: 100%;
  bottom: 50%;
  left: auto;
  /* Needed to work */
  transform: translate(1rem, 50%);
}
.tooltip.tooltip--left:hover::after,
.tooltip.tooltip--left:focus::after {
  transform: translate(-0.5rem, 50%);
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
.u-top-auto {
  top: auto !important;
}

.u-top-0 {
  top: 0 !important;
}

.u-top-50p {
  top: 50% !important;
}

.u-top-100p {
  top: 100% !important;
}

.u-top-n50p {
  top: -50% !important;
}

.u-top-n100p {
  top: -100% !important;
}

.u-left-auto {
  left: auto !important;
}

.u-left-0 {
  left: 0 !important;
}

.u-left-50p {
  left: 50% !important;
}

.u-left-100p {
  left: 100% !important;
}

.u-left-n50p {
  left: -50% !important;
}

.u-left-n100p {
  left: -100% !important;
}

.u-right-auto {
  right: auto !important;
}

.u-right-0 {
  right: 0 !important;
}

.u-right-50p {
  right: 50% !important;
}

.u-right-100p {
  right: 100% !important;
}

.u-right-n50p {
  right: -50% !important;
}

.u-right-n100p {
  right: -100% !important;
}

.u-bottom-auto {
  bottom: auto !important;
}

.u-bottom-0 {
  bottom: 0 !important;
}

.u-bottom-50p {
  bottom: 50% !important;
}

.u-bottom-100p {
  bottom: 100% !important;
}

.u-bottom-n50p {
  bottom: -50% !important;
}

.u-bottom-n100p {
  bottom: -100% !important;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
.u-clear-left {
  clear: left !important;
}

.u-clear-right {
  clear: right !important;
}

.u-clear-both {
  clear: both !important;
}

@media screen and (min-width: 640px) {
  .u-clear-left-sm {
    clear: left !important;
  }
}
@media screen and (min-width: 640px) {
  .u-clear-right-sm {
    clear: right !important;
  }
}
@media screen and (min-width: 640px) {
  .u-clear-both-sm {
    clear: both !important;
  }
}
@media screen and (min-width: 768px) {
  .u-clear-left-md {
    clear: left !important;
  }
}
@media screen and (min-width: 768px) {
  .u-clear-right-md {
    clear: right !important;
  }
}
@media screen and (min-width: 768px) {
  .u-clear-both-md {
    clear: both !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-clear-left-lg {
    clear: left !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-clear-right-lg {
    clear: right !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-clear-both-lg {
    clear: both !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-clear-left-xl {
    clear: left !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-clear-right-xl {
    clear: right !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-clear-both-xl {
    clear: both !important;
  }
}
/*
   When using floats, clearfix allows the container to automatically resize so that
   other elements are not blocked by children.
*/
.u-clearfix:after {
  clear: both !important;
  content: ' ';
  display: table !important;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
.u-none {
  display: none !important;
}

.u-inline {
  display: inline !important;
}

.u-inline-block {
  display: inline-block !important;
}

.u-block {
  display: block !important;
}

.u-flex {
  display: flex !important;
}

.u-inline-flex {
  display: inline-flex !important;
}

.u-table {
  display: table !important;
}

.u-table-row {
  display: table-row !important;
}

.u-table-column {
  display: table-column !important;
}

.u-table-cell {
  display: table-cell !important;
}

@media screen and (min-width: 640px) {
  .u-none-sm {
    display: none !important;
  }
}
@media screen and (min-width: 640px) {
  .u-inline-sm {
    display: inline !important;
  }
}
@media screen and (min-width: 640px) {
  .u-inline-block-sm {
    display: inline-block !important;
  }
}
@media screen and (min-width: 640px) {
  .u-block-sm {
    display: block !important;
  }
}
@media screen and (min-width: 640px) {
  .u-flex-sm {
    display: flex !important;
  }
}
@media screen and (min-width: 640px) {
  .u-inline-flex-sm {
    display: inline-flex !important;
  }
}
@media screen and (min-width: 640px) {
  .u-table-sm {
    display: table !important;
  }
}
@media screen and (min-width: 640px) {
  .u-table-row-sm {
    display: table-row !important;
  }
}
@media screen and (min-width: 640px) {
  .u-table-column-sm {
    display: table-column !important;
  }
}
@media screen and (min-width: 640px) {
  .u-table-cell-sm {
    display: table-cell !important;
  }
}
@media screen and (min-width: 768px) {
  .u-none-md {
    display: none !important;
  }
}
@media screen and (min-width: 768px) {
  .u-inline-md {
    display: inline !important;
  }
}
@media screen and (min-width: 768px) {
  .u-inline-block-md {
    display: inline-block !important;
  }
}
@media screen and (min-width: 768px) {
  .u-block-md {
    display: block !important;
  }
}
@media screen and (min-width: 768px) {
  .u-flex-md {
    display: flex !important;
  }
}
@media screen and (min-width: 768px) {
  .u-inline-flex-md {
    display: inline-flex !important;
  }
}
@media screen and (min-width: 768px) {
  .u-table-md {
    display: table !important;
  }
}
@media screen and (min-width: 768px) {
  .u-table-row-md {
    display: table-row !important;
  }
}
@media screen and (min-width: 768px) {
  .u-table-column-md {
    display: table-column !important;
  }
}
@media screen and (min-width: 768px) {
  .u-table-cell-md {
    display: table-cell !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-none-lg {
    display: none !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-inline-lg {
    display: inline !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-inline-block-lg {
    display: inline-block !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-block-lg {
    display: block !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-flex-lg {
    display: flex !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-inline-flex-lg {
    display: inline-flex !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-table-lg {
    display: table !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-table-row-lg {
    display: table-row !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-table-column-lg {
    display: table-column !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-table-cell-lg {
    display: table-cell !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-none-xl {
    display: none !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-inline-xl {
    display: inline !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-inline-block-xl {
    display: inline-block !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-block-xl {
    display: block !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-flex-xl {
    display: flex !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-inline-flex-xl {
    display: inline-flex !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-table-xl {
    display: table !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-table-row-xl {
    display: table-row !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-table-column-xl {
    display: table-column !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-table-cell-xl {
    display: table-cell !important;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
.u-flex-row {
  flex-direction: row !important;
}

.u-flex-row-reverse {
  flex-direction: row-reverse !important;
}

.u-flex-column {
  flex-direction: column !important;
}

.u-flex-column-reverse {
  flex-direction: column-reverse !important;
}

@media screen and (min-width: 640px) {
  .u-flex-row-sm {
    flex-direction: row !important;
  }
}
@media screen and (min-width: 640px) {
  .u-flex-row-reverse-sm {
    flex-direction: row-reverse !important;
  }
}
@media screen and (min-width: 640px) {
  .u-flex-column-sm {
    flex-direction: column !important;
  }
}
@media screen and (min-width: 640px) {
  .u-flex-column-reverse-sm {
    flex-direction: column-reverse !important;
  }
}
@media screen and (min-width: 768px) {
  .u-flex-row-md {
    flex-direction: row !important;
  }
}
@media screen and (min-width: 768px) {
  .u-flex-row-reverse-md {
    flex-direction: row-reverse !important;
  }
}
@media screen and (min-width: 768px) {
  .u-flex-column-md {
    flex-direction: column !important;
  }
}
@media screen and (min-width: 768px) {
  .u-flex-column-reverse-md {
    flex-direction: column-reverse !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-flex-row-lg {
    flex-direction: row !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-flex-row-reverse-lg {
    flex-direction: row-reverse !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-flex-column-lg {
    flex-direction: column !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-flex-column-reverse-lg {
    flex-direction: column-reverse !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-flex-row-xl {
    flex-direction: row !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-flex-row-reverse-xl {
    flex-direction: row-reverse !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-flex-column-xl {
    flex-direction: column !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-flex-column-reverse-xl {
    flex-direction: column-reverse !important;
  }
}
.u-justify-flex-start {
  justify-content: flex-start !important;
}

.u-justify-center {
  justify-content: center !important;
}

.u-justify-flex-end {
  justify-content: flex-end !important;
}

.u-justify-space-between {
  justify-content: space-between !important;
}

.u-justify-space-around {
  justify-content: space-around !important;
}

.u-justify-space-evenly {
  justify-content: space-evenly !important;
}

@media screen and (min-width: 640px) {
  .u-justify-flex-start-sm {
    justify-content: flex-start !important;
  }
}
@media screen and (min-width: 640px) {
  .u-justify-center-sm {
    justify-content: center !important;
  }
}
@media screen and (min-width: 640px) {
  .u-justify-flex-end-sm {
    justify-content: flex-end !important;
  }
}
@media screen and (min-width: 640px) {
  .u-justify-space-between-sm {
    justify-content: space-between !important;
  }
}
@media screen and (min-width: 640px) {
  .u-justify-space-around-sm {
    justify-content: space-around !important;
  }
}
@media screen and (min-width: 640px) {
  .u-justify-space-evenly-sm {
    justify-content: space-evenly !important;
  }
}
@media screen and (min-width: 768px) {
  .u-justify-flex-start-md {
    justify-content: flex-start !important;
  }
}
@media screen and (min-width: 768px) {
  .u-justify-center-md {
    justify-content: center !important;
  }
}
@media screen and (min-width: 768px) {
  .u-justify-flex-end-md {
    justify-content: flex-end !important;
  }
}
@media screen and (min-width: 768px) {
  .u-justify-space-between-md {
    justify-content: space-between !important;
  }
}
@media screen and (min-width: 768px) {
  .u-justify-space-around-md {
    justify-content: space-around !important;
  }
}
@media screen and (min-width: 768px) {
  .u-justify-space-evenly-md {
    justify-content: space-evenly !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-justify-flex-start-lg {
    justify-content: flex-start !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-justify-center-lg {
    justify-content: center !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-justify-flex-end-lg {
    justify-content: flex-end !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-justify-space-between-lg {
    justify-content: space-between !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-justify-space-around-lg {
    justify-content: space-around !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-justify-space-evenly-lg {
    justify-content: space-evenly !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-justify-flex-start-xl {
    justify-content: flex-start !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-justify-center-xl {
    justify-content: center !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-justify-flex-end-xl {
    justify-content: flex-end !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-justify-space-between-xl {
    justify-content: space-between !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-justify-space-around-xl {
    justify-content: space-around !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-justify-space-evenly-xl {
    justify-content: space-evenly !important;
  }
}
.u-items-stretch {
  align-items: stretch !important;
}

.u-items-flex-start {
  align-items: flex-start !important;
}

.u-items-center {
  align-items: center !important;
}

.u-items-flex-end {
  align-items: flex-end !important;
}

.u-items-baseline {
  align-items: baseline !important;
}

@media screen and (min-width: 640px) {
  .u-items-stretch-sm {
    align-items: stretch !important;
  }
}
@media screen and (min-width: 640px) {
  .u-items-flex-start-sm {
    align-items: flex-start !important;
  }
}
@media screen and (min-width: 640px) {
  .u-items-center-sm {
    align-items: center !important;
  }
}
@media screen and (min-width: 640px) {
  .u-items-flex-end-sm {
    align-items: flex-end !important;
  }
}
@media screen and (min-width: 640px) {
  .u-items-baseline-sm {
    align-items: baseline !important;
  }
}
@media screen and (min-width: 768px) {
  .u-items-stretch-md {
    align-items: stretch !important;
  }
}
@media screen and (min-width: 768px) {
  .u-items-flex-start-md {
    align-items: flex-start !important;
  }
}
@media screen and (min-width: 768px) {
  .u-items-center-md {
    align-items: center !important;
  }
}
@media screen and (min-width: 768px) {
  .u-items-flex-end-md {
    align-items: flex-end !important;
  }
}
@media screen and (min-width: 768px) {
  .u-items-baseline-md {
    align-items: baseline !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-items-stretch-lg {
    align-items: stretch !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-items-flex-start-lg {
    align-items: flex-start !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-items-center-lg {
    align-items: center !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-items-flex-end-lg {
    align-items: flex-end !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-items-baseline-lg {
    align-items: baseline !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-items-stretch-xl {
    align-items: stretch !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-items-flex-start-xl {
    align-items: flex-start !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-items-center-xl {
    align-items: center !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-items-flex-end-xl {
    align-items: flex-end !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-items-baseline-xl {
    align-items: baseline !important;
  }
}
.u-flex-grow-0 {
  flex-grow: 0 !important;
}

.u-flex-grow-1 {
  flex-grow: 1 !important;
}

@media screen and (min-width: 640px) {
  .u-flex-grow-0-sm {
    flex-grow: 0 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-flex-grow-1-sm {
    flex-grow: 1 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-flex-grow-0-md {
    flex-grow: 0 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-flex-grow-1-md {
    flex-grow: 1 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-flex-grow-0-lg {
    flex-grow: 0 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-flex-grow-1-lg {
    flex-grow: 1 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-flex-grow-0-xl {
    flex-grow: 0 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-flex-grow-1-xl {
    flex-grow: 1 !important;
  }
}
.u-gap-0 {
  gap: calc(0.5rem * 0) !important;
}

.u-gap-1 {
  gap: calc(0.5rem * 1) !important;
}

.u-gap-2 {
  gap: calc(0.5rem * 2) !important;
}

.u-gap-3 {
  gap: calc(0.5rem * 3) !important;
}

.u-gap-4 {
  gap: calc(0.5rem * 4) !important;
}

.u-gap-5 {
  gap: calc(0.5rem * 5) !important;
}

.u-gap-6 {
  gap: calc(0.5rem * 6) !important;
}

.u-gap-8 {
  gap: calc(0.5rem * 8) !important;
}

.u-gap-10 {
  gap: calc(0.5rem * 10) !important;
}

.u-gap-12 {
  gap: calc(0.5rem * 12) !important;
}

.u-gap-16 {
  gap: calc(0.5rem * 16) !important;
}

.u-gap-20 {
  gap: calc(0.5rem * 20) !important;
}

.u-gap-24 {
  gap: calc(0.5rem * 24) !important;
}

.u-gap-32 {
  gap: calc(0.5rem * 32) !important;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* UTILS */
/* Utility classes to help solve some very annoying issues */
.u-pull-left {
  float: left !important;
}

.u-pull-right {
  float: right !important;
}

@media screen and (min-width: 640px) {
  .u-pull-left-sm {
    float: left !important;
  }
}
@media screen and (min-width: 640px) {
  .u-pull-right-sm {
    float: right !important;
  }
}
@media screen and (min-width: 768px) {
  .u-pull-left-md {
    float: left !important;
  }
}
@media screen and (min-width: 768px) {
  .u-pull-right-md {
    float: right !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-pull-left-lg {
    float: left !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-pull-right-lg {
    float: right !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-pull-left-xl {
    float: left !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-pull-right-xl {
    float: right !important;
  }
}
.u-text-justify {
  text-align: justify !important;
}

.u-text-left {
  text-align: left !important;
}

.u-text-right {
  text-align: right !important;
}

.u-text-center {
  text-align: center !important;
}

@media screen and (min-width: 640px) {
  .u-text-justify-sm {
    text-align: justify !important;
  }
}
@media screen and (min-width: 640px) {
  .u-text-left-sm {
    text-align: left !important;
  }
}
@media screen and (min-width: 640px) {
  .u-text-right-sm {
    text-align: right !important;
  }
}
@media screen and (min-width: 640px) {
  .u-text-center-sm {
    text-align: center !important;
  }
}
@media screen and (min-width: 768px) {
  .u-text-justify-md {
    text-align: justify !important;
  }
}
@media screen and (min-width: 768px) {
  .u-text-left-md {
    text-align: left !important;
  }
}
@media screen and (min-width: 768px) {
  .u-text-right-md {
    text-align: right !important;
  }
}
@media screen and (min-width: 768px) {
  .u-text-center-md {
    text-align: center !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-text-justify-lg {
    text-align: justify !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-text-left-lg {
    text-align: left !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-text-right-lg {
    text-align: right !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-text-center-lg {
    text-align: center !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-text-justify-xl {
    text-align: justify !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-text-left-xl {
    text-align: left !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-text-right-xl {
    text-align: right !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-text-center-xl {
    text-align: center !important;
  }
}
.u-text-ellipsis {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

.u-text-break {
  hyphens: auto;
  word-break: break-word;
  word-wrap: break-word;
}

/* Center element - best used for hero bodies or text */
.u-center {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto;
  flex-wrap: wrap;
}

.u-center-alt,
.u-center-alt:hover,
.u-center-alt:active {
  /* If flexbox method fails, this works for elements with unknown dimensions */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.u-overlay {
  bottom: 0;
  left: 0;
  right: 0;
  top: 0;
  position: absolute;
}

.u-disabled {
  cursor: not-allowed !important;
  pointer-events: none !important;
}

.u-unselectable {
  user-select: none !important;
}

.u-no-outline {
  outline: 0px !important;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
.u-opacity-0 {
  opacity: 0 !important;
}

.u-opacity-10 {
  opacity: 0.1 !important;
}

.u-opacity-20 {
  opacity: 0.2 !important;
}

.u-opacity-30 {
  opacity: 0.3 !important;
}

.u-opacity-40 {
  opacity: 0.4 !important;
}

.u-opacity-50 {
  opacity: 0.5 !important;
}

.u-opacity-60 {
  opacity: 0.6 !important;
}

.u-opacity-70 {
  opacity: 0.7 !important;
}

.u-opacity-80 {
  opacity: 0.8 !important;
}

.u-opacity-90 {
  opacity: 0.9 !important;
}

.u-opacity-100 {
  opacity: 1 !important;
}

@media screen and (min-width: 640px) {
  .u-opacity-0-sm {
    opacity: 0 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-10-sm {
    opacity: 0.1 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-20-sm {
    opacity: 0.2 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-30-sm {
    opacity: 0.3 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-40-sm {
    opacity: 0.4 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-50-sm {
    opacity: 0.5 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-60-sm {
    opacity: 0.6 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-70-sm {
    opacity: 0.7 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-80-sm {
    opacity: 0.8 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-90-sm {
    opacity: 0.9 !important;
  }
}
@media screen and (min-width: 640px) {
  .u-opacity-100-sm {
    opacity: 1 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-0-md {
    opacity: 0 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-10-md {
    opacity: 0.1 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-20-md {
    opacity: 0.2 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-30-md {
    opacity: 0.3 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-40-md {
    opacity: 0.4 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-50-md {
    opacity: 0.5 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-60-md {
    opacity: 0.6 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-70-md {
    opacity: 0.7 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-80-md {
    opacity: 0.8 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-90-md {
    opacity: 0.9 !important;
  }
}
@media screen and (min-width: 768px) {
  .u-opacity-100-md {
    opacity: 1 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-0-lg {
    opacity: 0 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-10-lg {
    opacity: 0.1 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-20-lg {
    opacity: 0.2 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-30-lg {
    opacity: 0.3 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-40-lg {
    opacity: 0.4 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-50-lg {
    opacity: 0.5 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-60-lg {
    opacity: 0.6 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-70-lg {
    opacity: 0.7 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-80-lg {
    opacity: 0.8 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-90-lg {
    opacity: 0.9 !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-opacity-100-lg {
    opacity: 1 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-0-xl {
    opacity: 0 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-10-xl {
    opacity: 0.1 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-20-xl {
    opacity: 0.2 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-30-xl {
    opacity: 0.3 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-40-xl {
    opacity: 0.4 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-50-xl {
    opacity: 0.5 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-60-xl {
    opacity: 0.6 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-70-xl {
    opacity: 0.7 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-80-xl {
    opacity: 0.8 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-90-xl {
    opacity: 0.9 !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-opacity-100-xl {
    opacity: 1 !important;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
.u-overflow-auto {
  overflow: auto !important;
}

.u-overflow-hidden {
  overflow: hidden !important;
}

.u-overflow-visible {
  overflow: visible !important;
}

.u-overflow-scroll {
  overflow: scroll !important;
}

@media screen and (min-width: 640px) {
  .u-overflow-auto-sm {
    overflow: auto !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-hidden-sm {
    overflow: hidden !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-visible-sm {
    overflow: visible !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-scroll-sm {
    overflow: scroll !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-auto-md {
    overflow: auto !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-hidden-md {
    overflow: hidden !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-visible-md {
    overflow: visible !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-scroll-md {
    overflow: scroll !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-auto-lg {
    overflow: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-hidden-lg {
    overflow: hidden !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-visible-lg {
    overflow: visible !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-scroll-lg {
    overflow: scroll !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-auto-xl {
    overflow: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-hidden-xl {
    overflow: hidden !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-visible-xl {
    overflow: visible !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-scroll-xl {
    overflow: scroll !important;
  }
}
.u-overflow-x-auto {
  overflow-x: auto !important;
}

.u-overflow-x-hidden {
  overflow-x: hidden !important;
}

.u-overflow-x-visible {
  overflow-x: visible !important;
}

.u-overflow-x-scroll {
  overflow-x: scroll !important;
}

@media screen and (min-width: 640px) {
  .u-overflow-x-auto-sm {
    overflow-x: auto !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-x-hidden-sm {
    overflow-x: hidden !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-x-visible-sm {
    overflow-x: visible !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-x-scroll-sm {
    overflow-x: scroll !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-x-auto-md {
    overflow-x: auto !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-x-hidden-md {
    overflow-x: hidden !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-x-visible-md {
    overflow-x: visible !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-x-scroll-md {
    overflow-x: scroll !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-x-auto-lg {
    overflow-x: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-x-hidden-lg {
    overflow-x: hidden !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-x-visible-lg {
    overflow-x: visible !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-x-scroll-lg {
    overflow-x: scroll !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-x-auto-xl {
    overflow-x: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-x-hidden-xl {
    overflow-x: hidden !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-x-visible-xl {
    overflow-x: visible !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-x-scroll-xl {
    overflow-x: scroll !important;
  }
}
.u-overflow-y-auto {
  overflow-y: auto !important;
}

.u-overflow-y-hidden {
  overflow-y: hidden !important;
}

.u-overflow-y-visible {
  overflow-y: visible !important;
}

.u-overflow-y-scroll {
  overflow-y: scroll !important;
}

@media screen and (min-width: 640px) {
  .u-overflow-y-auto-sm {
    overflow-y: auto !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-y-hidden-sm {
    overflow-y: hidden !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-y-visible-sm {
    overflow-y: visible !important;
  }
}
@media screen and (min-width: 640px) {
  .u-overflow-y-scroll-sm {
    overflow-y: scroll !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-y-auto-md {
    overflow-y: auto !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-y-hidden-md {
    overflow-y: hidden !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-y-visible-md {
    overflow-y: visible !important;
  }
}
@media screen and (min-width: 768px) {
  .u-overflow-y-scroll-md {
    overflow-y: scroll !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-y-auto-lg {
    overflow-y: auto !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-y-hidden-lg {
    overflow-y: hidden !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-y-visible-lg {
    overflow-y: visible !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-overflow-y-scroll-lg {
    overflow-y: scroll !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-y-auto-xl {
    overflow-y: auto !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-y-hidden-xl {
    overflow-y: hidden !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-y-visible-xl {
    overflow-y: visible !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-overflow-y-scroll-xl {
    overflow-y: scroll !important;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
.u-static {
  position: static !important;
}

.u-fixed {
  position: fixed !important;
}

.u-absolute {
  position: absolute !important;
}

.u-relative {
  position: relative !important;
}

.u-sticky {
  position: sticky !important;
}

@media screen and (min-width: 640px) {
  .u-static-sm {
    position: static !important;
  }
}
@media screen and (min-width: 640px) {
  .u-fixed-sm {
    position: fixed !important;
  }
}
@media screen and (min-width: 640px) {
  .u-absolute-sm {
    position: absolute !important;
  }
}
@media screen and (min-width: 640px) {
  .u-relative-sm {
    position: relative !important;
  }
}
@media screen and (min-width: 640px) {
  .u-sticky-sm {
    position: sticky !important;
  }
}
@media screen and (min-width: 768px) {
  .u-static-md {
    position: static !important;
  }
}
@media screen and (min-width: 768px) {
  .u-fixed-md {
    position: fixed !important;
  }
}
@media screen and (min-width: 768px) {
  .u-absolute-md {
    position: absolute !important;
  }
}
@media screen and (min-width: 768px) {
  .u-relative-md {
    position: relative !important;
  }
}
@media screen and (min-width: 768px) {
  .u-sticky-md {
    position: sticky !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-static-lg {
    position: static !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-fixed-lg {
    position: fixed !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-absolute-lg {
    position: absolute !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-relative-lg {
    position: relative !important;
  }
}
@media screen and (min-width: 1024px) {
  .u-sticky-lg {
    position: sticky !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-static-xl {
    position: static !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-fixed-xl {
    position: fixed !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-absolute-xl {
    position: absolute !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-relative-xl {
    position: relative !important;
  }
}
@media screen and (min-width: 1280px) {
  .u-sticky-xl {
    position: sticky !important;
  }
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Global Mixins
*/
/*
    Mixin that returns a property map as a series of CSS class properties.

    E.g. $xs: (color: #fff, opacity: 0.5), $sm... =>

    <class>--xs {
        color: #fff;
        opacity: 0.5;
    }
*/
/*
    Bring to front on focus.
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
.u-round-none {
  border-radius: 0px;
}

.u-round-xs {
  border-radius: 0.25rem;
}

.u-round-sm {
  border-radius: 0.5rem;
}

.u-round-md {
  border-radius: 0.75rem;
}

.u-round-lg {
  border-radius: 1rem;
}

.u-round-xl {
  border-radius: 1.25rem;
}

.u-round-full {
  border-radius: 9001px;
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* v1 Color scheme for Cirrus */
/* v2 Colors */
/*
    Global Mixins
*/
/*
    Mixin that returns a property map as a series of CSS class properties.

    E.g. $xs: (color: #fff, opacity: 0.5), $sm... =>

    <class>--xs {
        color: #fff;
        opacity: 0.5;
    }
*/
/*
    Bring to front on focus.
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
.u-shadow-none {
  --cirrus-shadow: 0 0 #000;
  box-shadow: var(--cirrus-shadow);
}

.u-shadow-xs {
  --cirrus-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  box-shadow: var(--cirrus-shadow);
}

.u-shadow-sm {
  --cirrus-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
  box-shadow: var(--cirrus-shadow);
}

.u-shadow-md {
  --cirrus-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  box-shadow: var(--cirrus-shadow);
}

.u-shadow-lg {
  --cirrus-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
  box-shadow: var(--cirrus-shadow);
}

.u-shadow-xl {
  --cirrus-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  box-shadow: var(--cirrus-shadow);
}

.u-shadow-inset {
  --cirrus-shadow: inset 0 2px 4px 0 rgba(0, 0, 0, 0.06);
  box-shadow: var(--cirrus-shadow);
}
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/* Spacing */
/* Breakpoints */
/* Fonts */
/* Grid Count (Columns + Grid) */
/* Grid Percents */
/* Media Queries */
/* Smaller than the defined pixels are the dimensions for that range */
/* Variant of mixin that takes in mapping of class name to value */
/**
 * DART SASS ONLY: Generates viewport classes given styles in a @content mixin
 * 
 * When using this mixin, you must follow specify a mixin that takes in the same number of variables that is being passed into @content below -- in this case, 1.
 * 
 * Example usage (pretend \ is $):
 *      
 *       @include generate-styles-with-viewports('true') using ($viewport) {
 *           $suffix: if($viewport != '', '-viewport', '');
 *           .outersuffix {
 *               background: #222;
 *               .innersuffix {
 *                   color: #fff;
 *               }
 *           }
 *       }
 */
/*
  Functions
  TODO Refactor to different categories
*/
/*
    Converts a given hex value to RGB.
*/
/*
    Generates delimited class name prefix.
*/
/*
    Fetch feature flag for different utility class types for generating viewport classes (e.g., u-flex-sm, u-flex-md, etc.).
*/
.u-z-0 {
  z-index: 0 !important;
}

.u-z-10 {
  z-index: 10 !important;
}

.u-z-20 {
  z-index: 20 !important;
}

.u-z-30 {
  z-index: 30 !important;
}

.u-z-40 {
  z-index: 40 !important;
}

.u-z-50 {
  z-index: 50 !important;
}

.u-z-auto {
  z-index: auto !important;
}
